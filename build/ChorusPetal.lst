ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ChorusPetal.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN5daisy10DaisyPetalD2Ev,"axG",%progbits,_ZN5daisy10DaisyPetalD5Ev,comdat
  17              		.align	1
  18              		.p2align 2,,3
  19              		.weak	_ZN5daisy10DaisyPetalD2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN5daisy10DaisyPetalD2Ev:
  27              	.LVL0:
  28              	.LFB1762:
  29              		.file 1 "../../DaisyExamples/libdaisy/src/daisy_petal.h"
   1:../../DaisyExamples/libdaisy/src/daisy_petal.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/daisy_petal.h **** #ifndef DSY_PETAL_H
   3:../../DaisyExamples/libdaisy/src/daisy_petal.h **** #define DSY_PETAL_H /**< & */
   4:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
   5:../../DaisyExamples/libdaisy/src/daisy_petal.h **** #include "daisy_seed.h"
   6:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
   7:../../DaisyExamples/libdaisy/src/daisy_petal.h **** namespace daisy
   8:../../DaisyExamples/libdaisy/src/daisy_petal.h **** {
   9:../../DaisyExamples/libdaisy/src/daisy_petal.h **** /**
  10:../../DaisyExamples/libdaisy/src/daisy_petal.h ****    @brief Helpers and hardware definitions for daisy petal.
  11:../../DaisyExamples/libdaisy/src/daisy_petal.h ****    @ingroup boards
  12:../../DaisyExamples/libdaisy/src/daisy_petal.h **** */
  13:../../DaisyExamples/libdaisy/src/daisy_petal.h **** class DaisyPetal
  14:../../DaisyExamples/libdaisy/src/daisy_petal.h **** {
  15:../../DaisyExamples/libdaisy/src/daisy_petal.h ****   public:
  16:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Switches */
  17:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     enum Sw
  18:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     {
  19:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_1,    /**< Footswitch */
  20:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_2,    /**< Footswitch */
  21:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_3,    /**< Footswitch */
  22:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_4,    /**< Footswitch */
  23:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_5,    /**< Toggle */
  24:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_6,    /**< Toggle */
  25:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_7,    /**< Toggle */
  26:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         SW_LAST, /**< Last enum item */
  27:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     };
  28:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  29:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Knobs */
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 2


  30:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     enum Knob
  31:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     {
  32:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_1,    /**< & */
  33:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_2,    /**< & */
  34:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_3,    /**< & */
  35:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_4,    /**< & */
  36:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_5,    /**< & */
  37:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_6,    /**< & */
  38:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         KNOB_LAST, /**< & */
  39:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     };
  40:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  41:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Leds in ringled */
  42:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     enum RingLed
  43:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     {
  44:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_1,   /**< & */
  45:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_2,   /**< & */
  46:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_3,   /**< & */
  47:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_4,   /**< & */
  48:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_5,   /**< & */
  49:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_6,   /**< & */
  50:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_7,   /**< & */
  51:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_8,   /**< & */
  52:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         RING_LED_LAST /**< & */
  53:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     };
  54:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  55:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** footswitch leds */
  56:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     enum FootswitchLed
  57:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     {
  58:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         FOOTSWITCH_LED_1,    /**< & */
  59:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         FOOTSWITCH_LED_2,    /**< & */
  60:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         FOOTSWITCH_LED_3,    /**< & */
  61:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         FOOTSWITCH_LED_4,    /**< & */
  62:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         FOOTSWITCH_LED_LAST, /**< & */
  63:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     };
  64:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  65:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Constructor */
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     DaisyPetal() {}
  67:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
  68:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     ~DaisyPetal() {}
  30              		.loc 1 68 5 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LBB482:
  36              	.LBI482:
  37              		.file 2 "../../DaisyExamples/libdaisy/src/hid/ctrl.h"
   1:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** #ifndef DSY_KNOB_H
   3:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** #define DSY_KNOB_H /**< & */
   4:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** #include <stdint.h>
   5:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** 
   6:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** #ifdef __cplusplus
   7:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** namespace daisy
   8:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** {
   9:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** /**
  10:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     @brief Hardware Interface for control inputs \n 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 3


  11:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     Primarily designed for ADC input controls such as \n 
  12:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     potentiometers, and control voltage. \n 
  13:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     @author Stephen Hensley
  14:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     @date November 2019
  15:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     @ingroup controls
  16:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** */
  17:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** class AnalogControl
  18:../../DaisyExamples/libdaisy/src/hid/ctrl.h **** {
  19:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****   public:
  20:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     /** Constructor */
  21:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     AnalogControl() {}
  22:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     /** destructor */
  23:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     ~AnalogControl() {}
  38              		.loc 2 23 5 view .LVU1
  39              		.loc 2 23 5 is_stmt 0 view .LVU2
  40              	.LBE482:
  41              	.LBB483:
  42              	.LBI483:
  43              		.file 3 "../../DaisyExamples/libdaisy/src/hid/encoder.h"
   1:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #ifndef DSY_ENCODER_H
   3:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #define DSY_ENCODER_H
   4:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #include "daisy_core.h"
   5:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #include "per/gpio.h"
   6:../../DaisyExamples/libdaisy/src/hid/encoder.h **** #include "hid/switch.h"
   7:../../DaisyExamples/libdaisy/src/hid/encoder.h **** 
   8:../../DaisyExamples/libdaisy/src/hid/encoder.h **** namespace daisy
   9:../../DaisyExamples/libdaisy/src/hid/encoder.h **** {
  10:../../DaisyExamples/libdaisy/src/hid/encoder.h **** /** 
  11:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     @brief Generic Class for handling Quadrature Encoders \n 
  12:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     Inspired/influenced by Mutable Instruments (pichenettes) Encoder classes
  13:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     @author Stephen Hensley
  14:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     @date December 2019
  15:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     @ingroup controls
  16:../../DaisyExamples/libdaisy/src/hid/encoder.h **** */
  17:../../DaisyExamples/libdaisy/src/hid/encoder.h **** class Encoder
  18:../../DaisyExamples/libdaisy/src/hid/encoder.h **** {
  19:../../DaisyExamples/libdaisy/src/hid/encoder.h ****   public:
  20:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     Encoder() {}
  21:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     ~Encoder() {}
  44              		.loc 3 21 5 is_stmt 1 view .LVU3
  45              	.LBB484:
  46              	.LBI484:
  47              		.file 4 "../../DaisyExamples/libdaisy/src/hid/switch.h"
   1:../../DaisyExamples/libdaisy/src/hid/switch.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/hid/switch.h **** #ifndef DSY_SWITCH_H
   3:../../DaisyExamples/libdaisy/src/hid/switch.h **** #define DSY_SWITCH_H
   4:../../DaisyExamples/libdaisy/src/hid/switch.h **** #include "daisy_core.h"
   5:../../DaisyExamples/libdaisy/src/hid/switch.h **** #include "per/gpio.h"
   6:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
   7:../../DaisyExamples/libdaisy/src/hid/switch.h **** namespace daisy
   8:../../DaisyExamples/libdaisy/src/hid/switch.h **** {
   9:../../DaisyExamples/libdaisy/src/hid/switch.h **** /** 
  10:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Generic Class for handling momentary/latching switches \n 
  11:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Inspired/influenced by Mutable Instruments (pichenettes) Switch classes
  12:../../DaisyExamples/libdaisy/src/hid/switch.h ****     @author Stephen Hensley
  13:../../DaisyExamples/libdaisy/src/hid/switch.h ****     @date December 2019
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 4


  14:../../DaisyExamples/libdaisy/src/hid/switch.h ****     @ingroup controls
  15:../../DaisyExamples/libdaisy/src/hid/switch.h **** */
  16:../../DaisyExamples/libdaisy/src/hid/switch.h **** class Switch
  17:../../DaisyExamples/libdaisy/src/hid/switch.h **** {
  18:../../DaisyExamples/libdaisy/src/hid/switch.h ****   public:
  19:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** Specifies the expected behavior of the switch */
  20:../../DaisyExamples/libdaisy/src/hid/switch.h ****     enum Type
  21:../../DaisyExamples/libdaisy/src/hid/switch.h ****     {
  22:../../DaisyExamples/libdaisy/src/hid/switch.h ****         TYPE_TOGGLE,    /**< & */
  23:../../DaisyExamples/libdaisy/src/hid/switch.h ****         TYPE_MOMENTARY, /**< & */
  24:../../DaisyExamples/libdaisy/src/hid/switch.h ****     };
  25:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** Specifies whether the pressed is HIGH or LOW. */
  26:../../DaisyExamples/libdaisy/src/hid/switch.h ****     enum Polarity
  27:../../DaisyExamples/libdaisy/src/hid/switch.h ****     {
  28:../../DaisyExamples/libdaisy/src/hid/switch.h ****         POLARITY_NORMAL,   /**< & */
  29:../../DaisyExamples/libdaisy/src/hid/switch.h ****         POLARITY_INVERTED, /**< & */
  30:../../DaisyExamples/libdaisy/src/hid/switch.h ****     };
  31:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  32:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** Specifies whether to use built-in Pull Up/Down resistors to hold button at a given state wh
  33:../../DaisyExamples/libdaisy/src/hid/switch.h ****     enum Pull
  34:../../DaisyExamples/libdaisy/src/hid/switch.h ****     {
  35:../../DaisyExamples/libdaisy/src/hid/switch.h ****         PULL_UP,   /**< & */
  36:../../DaisyExamples/libdaisy/src/hid/switch.h ****         PULL_DOWN, /**< & */
  37:../../DaisyExamples/libdaisy/src/hid/switch.h ****         PULL_NONE, /**< & */
  38:../../DaisyExamples/libdaisy/src/hid/switch.h ****     };
  39:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  40:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Switch() {}
  41:../../DaisyExamples/libdaisy/src/hid/switch.h ****     ~Switch() {}
  48              		.loc 4 41 5 view .LVU4
  49              		.loc 4 41 5 is_stmt 0 view .LVU5
  50              	.LBE484:
  51              	.LBE483:
  52              	.LBB485:
  53              	.LBI485:
  54              		.file 5 "../../DaisyExamples/libdaisy/src/daisy_seed.h"
   1:../../DaisyExamples/libdaisy/src/daisy_seed.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/daisy_seed.h **** #ifndef DSY_SEED_H
   3:../../DaisyExamples/libdaisy/src/daisy_seed.h **** #define DSY_SEED_H
   4:../../DaisyExamples/libdaisy/src/daisy_seed.h **** 
   5:../../DaisyExamples/libdaisy/src/daisy_seed.h **** #include "daisy.h"
   6:../../DaisyExamples/libdaisy/src/daisy_seed.h **** 
   7:../../DaisyExamples/libdaisy/src/daisy_seed.h **** //Uncomment this out if you're still using the rev2 hardware
   8:../../DaisyExamples/libdaisy/src/daisy_seed.h **** //#define SEED_REV2
   9:../../DaisyExamples/libdaisy/src/daisy_seed.h **** 
  10:../../DaisyExamples/libdaisy/src/daisy_seed.h **** namespace daisy
  11:../../DaisyExamples/libdaisy/src/daisy_seed.h **** {
  12:../../DaisyExamples/libdaisy/src/daisy_seed.h **** /**
  13:../../DaisyExamples/libdaisy/src/daisy_seed.h ****    @brief This is the higher-level interface for the Daisy board. \n 
  14:../../DaisyExamples/libdaisy/src/daisy_seed.h ****     All basic peripheral configuration/initialization is setup here. \n
  15:../../DaisyExamples/libdaisy/src/daisy_seed.h **** 
  16:../../DaisyExamples/libdaisy/src/daisy_seed.h ****    @ingroup boards
  17:../../DaisyExamples/libdaisy/src/daisy_seed.h **** */
  18:../../DaisyExamples/libdaisy/src/daisy_seed.h **** class DaisySeed
  19:../../DaisyExamples/libdaisy/src/daisy_seed.h **** {
  20:../../DaisyExamples/libdaisy/src/daisy_seed.h ****   public:
  21:../../DaisyExamples/libdaisy/src/daisy_seed.h ****     DaisySeed() {}
  22:../../DaisyExamples/libdaisy/src/daisy_seed.h ****     ~DaisySeed() {}
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 5


  55              		.loc 5 22 5 is_stmt 1 view .LVU6
  56              	.LBB486:
  57              	.LBI486:
  58              		.file 6 "../../DaisyExamples/libdaisy/src/sys/system.h"
   1:../../DaisyExamples/libdaisy/src/sys/system.h **** #ifndef DSY_SYSTEM_H
   2:../../DaisyExamples/libdaisy/src/sys/system.h **** #define DSY_SYSTEM_H
   3:../../DaisyExamples/libdaisy/src/sys/system.h **** 
   4:../../DaisyExamples/libdaisy/src/sys/system.h **** #include <cstdint>
   5:../../DaisyExamples/libdaisy/src/sys/system.h **** #include "per/tim.h"
   6:../../DaisyExamples/libdaisy/src/sys/system.h **** 
   7:../../DaisyExamples/libdaisy/src/sys/system.h **** namespace daisy
   8:../../DaisyExamples/libdaisy/src/sys/system.h **** {
   9:../../DaisyExamples/libdaisy/src/sys/system.h **** /** A handle for interacting with the Core System. 
  10:../../DaisyExamples/libdaisy/src/sys/system.h ****  ** This includes the Clock tree, MPU, global DMA initialization,
  11:../../DaisyExamples/libdaisy/src/sys/system.h ****  ** cache handling, and any other necessary global initiailzation
  12:../../DaisyExamples/libdaisy/src/sys/system.h ****  **
  13:../../DaisyExamples/libdaisy/src/sys/system.h ****  ** @author shensley
  14:../../DaisyExamples/libdaisy/src/sys/system.h ****  ** @addtogroup system
  15:../../DaisyExamples/libdaisy/src/sys/system.h ****  */
  16:../../DaisyExamples/libdaisy/src/sys/system.h **** class System
  17:../../DaisyExamples/libdaisy/src/sys/system.h **** {
  18:../../DaisyExamples/libdaisy/src/sys/system.h ****   public:
  19:../../DaisyExamples/libdaisy/src/sys/system.h ****     /** Contains settings for initializing the System */
  20:../../DaisyExamples/libdaisy/src/sys/system.h ****     struct Config
  21:../../DaisyExamples/libdaisy/src/sys/system.h ****     {
  22:../../DaisyExamples/libdaisy/src/sys/system.h ****         /** Specifies the system clock frequency that feeds APB/AHB clocks, etc. */
  23:../../DaisyExamples/libdaisy/src/sys/system.h ****         enum class SysClkFreq
  24:../../DaisyExamples/libdaisy/src/sys/system.h ****         {
  25:../../DaisyExamples/libdaisy/src/sys/system.h ****             FREQ_400MHZ,
  26:../../DaisyExamples/libdaisy/src/sys/system.h ****             FREQ_480MHZ,
  27:../../DaisyExamples/libdaisy/src/sys/system.h ****         };
  28:../../DaisyExamples/libdaisy/src/sys/system.h **** 
  29:../../DaisyExamples/libdaisy/src/sys/system.h ****         /** Method to call on the struct to set to defaults
  30:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** CPU Freq set to 400MHz
  31:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** Cache Enabled 
  32:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** */
  33:../../DaisyExamples/libdaisy/src/sys/system.h ****         void Defaults()
  34:../../DaisyExamples/libdaisy/src/sys/system.h ****         {
  35:../../DaisyExamples/libdaisy/src/sys/system.h ****             cpu_freq   = SysClkFreq::FREQ_400MHZ;
  36:../../DaisyExamples/libdaisy/src/sys/system.h ****             use_dcache = true;
  37:../../DaisyExamples/libdaisy/src/sys/system.h ****             use_icache = true;
  38:../../DaisyExamples/libdaisy/src/sys/system.h ****         }
  39:../../DaisyExamples/libdaisy/src/sys/system.h **** 
  40:../../DaisyExamples/libdaisy/src/sys/system.h ****         /** Method to call on the struct to set to boost mode:
  41:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** CPU Freq set to 480MHz
  42:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** Cache Enabled 
  43:../../DaisyExamples/libdaisy/src/sys/system.h ****          ** */
  44:../../DaisyExamples/libdaisy/src/sys/system.h ****         void Boost()
  45:../../DaisyExamples/libdaisy/src/sys/system.h ****         {
  46:../../DaisyExamples/libdaisy/src/sys/system.h ****             cpu_freq   = SysClkFreq::FREQ_480MHZ;
  47:../../DaisyExamples/libdaisy/src/sys/system.h ****             use_dcache = true;
  48:../../DaisyExamples/libdaisy/src/sys/system.h ****             use_icache = true;
  49:../../DaisyExamples/libdaisy/src/sys/system.h ****         }
  50:../../DaisyExamples/libdaisy/src/sys/system.h **** 
  51:../../DaisyExamples/libdaisy/src/sys/system.h ****         SysClkFreq cpu_freq;
  52:../../DaisyExamples/libdaisy/src/sys/system.h ****         bool       use_dcache;
  53:../../DaisyExamples/libdaisy/src/sys/system.h ****         bool       use_icache;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 6


  54:../../DaisyExamples/libdaisy/src/sys/system.h ****     };
  55:../../DaisyExamples/libdaisy/src/sys/system.h **** 
  56:../../DaisyExamples/libdaisy/src/sys/system.h ****     System() {}
  57:../../DaisyExamples/libdaisy/src/sys/system.h ****     ~System() {}
  59              		.loc 6 57 5 view .LVU7
  60              		.loc 6 57 5 is_stmt 0 view .LVU8
  61              	.LBE486:
  62              	.LBB487:
  63              	.LBI487:
  64              		.file 7 "../../DaisyExamples/libdaisy/src/hid/usb.h"
   1:../../DaisyExamples/libdaisy/src/hid/usb.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/hid/usb.h **** #ifndef DSY_HID_USB_H
   3:../../DaisyExamples/libdaisy/src/hid/usb.h **** #define DSY_HID_USB_H
   4:../../DaisyExamples/libdaisy/src/hid/usb.h **** #include <stdint.h>
   5:../../DaisyExamples/libdaisy/src/hid/usb.h **** #include <stdlib.h>
   6:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
   7:../../DaisyExamples/libdaisy/src/hid/usb.h **** namespace daisy
   8:../../DaisyExamples/libdaisy/src/hid/usb.h **** /** @addtogroup externals
   9:../../DaisyExamples/libdaisy/src/hid/usb.h ****     @{
  10:../../DaisyExamples/libdaisy/src/hid/usb.h **** */
  11:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  12:../../DaisyExamples/libdaisy/src/hid/usb.h **** {
  13:../../DaisyExamples/libdaisy/src/hid/usb.h **** /** 
  14:../../DaisyExamples/libdaisy/src/hid/usb.h ****     @brief Interface for initializing and using the USB Peripherals on the daisy
  15:../../DaisyExamples/libdaisy/src/hid/usb.h ****     @author Stephen Hensley
  16:../../DaisyExamples/libdaisy/src/hid/usb.h ****     @date December 2019
  17:../../DaisyExamples/libdaisy/src/hid/usb.h **** */
  18:../../DaisyExamples/libdaisy/src/hid/usb.h **** class UsbHandle
  19:../../DaisyExamples/libdaisy/src/hid/usb.h **** {
  20:../../DaisyExamples/libdaisy/src/hid/usb.h ****   public:
  21:../../DaisyExamples/libdaisy/src/hid/usb.h ****     /** Return values for USBHandle Functions */
  22:../../DaisyExamples/libdaisy/src/hid/usb.h ****     enum class Result
  23:../../DaisyExamples/libdaisy/src/hid/usb.h ****     {
  24:../../DaisyExamples/libdaisy/src/hid/usb.h ****         OK,
  25:../../DaisyExamples/libdaisy/src/hid/usb.h ****         ERR,
  26:../../DaisyExamples/libdaisy/src/hid/usb.h ****     };
  27:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  28:../../DaisyExamples/libdaisy/src/hid/usb.h ****     /** Specified which of the two USB Peripherals to initialize. */
  29:../../DaisyExamples/libdaisy/src/hid/usb.h ****     enum UsbPeriph
  30:../../DaisyExamples/libdaisy/src/hid/usb.h ****     {
  31:../../DaisyExamples/libdaisy/src/hid/usb.h ****         FS_INTERNAL, /**< Internal pin */
  32:../../DaisyExamples/libdaisy/src/hid/usb.h ****         FS_EXTERNAL, /**< FS External D+ pin is Pin 38 (GPIO32). FS External D- pin is Pin 37 (GPIO
  33:../../DaisyExamples/libdaisy/src/hid/usb.h ****         FS_BOTH,     /**< Both */
  34:../../DaisyExamples/libdaisy/src/hid/usb.h ****     };
  35:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  36:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  37:../../DaisyExamples/libdaisy/src/hid/usb.h ****     /** Function called upon reception of a buffer */
  38:../../DaisyExamples/libdaisy/src/hid/usb.h ****     typedef void (*ReceiveCallback)(uint8_t* buff, uint32_t* len);
  39:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  40:../../DaisyExamples/libdaisy/src/hid/usb.h ****     UsbHandle() {}
  41:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
  42:../../DaisyExamples/libdaisy/src/hid/usb.h ****     ~UsbHandle() {}
  65              		.loc 7 42 5 is_stmt 1 view .LVU9
  66              		.loc 7 42 5 is_stmt 0 view .LVU10
  67              	.LBE487:
  68              	.LBB488:
  69              	.LBI488:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 7


  70              		.file 8 "../../DaisyExamples/libdaisy/src/per/adc.h"
   1:../../DaisyExamples/libdaisy/src/per/adc.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/per/adc.h **** #ifndef DSY_ADC_H
   3:../../DaisyExamples/libdaisy/src/per/adc.h **** #define DSY_ADC_H /**< Macro */
   4:../../DaisyExamples/libdaisy/src/per/adc.h **** #include <stdint.h>
   5:../../DaisyExamples/libdaisy/src/per/adc.h **** #include <stdlib.h>
   6:../../DaisyExamples/libdaisy/src/per/adc.h **** #include "daisy_core.h"
   7:../../DaisyExamples/libdaisy/src/per/adc.h **** #include "per/gpio.h"
   8:../../DaisyExamples/libdaisy/src/per/adc.h **** 
   9:../../DaisyExamples/libdaisy/src/per/adc.h **** #define DSY_ADC_MAX_CHANNELS 14 /**< Maximum number of ADC channels */
  10:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  11:../../DaisyExamples/libdaisy/src/per/adc.h **** namespace daisy
  12:../../DaisyExamples/libdaisy/src/per/adc.h **** {
  13:../../DaisyExamples/libdaisy/src/per/adc.h **** /** @addtogroup analog_digital_conversion
  14:../../DaisyExamples/libdaisy/src/per/adc.h ****     @{
  15:../../DaisyExamples/libdaisy/src/per/adc.h **** */
  16:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  17:../../DaisyExamples/libdaisy/src/per/adc.h **** /* While there may not be many configuration options here,
  18:../../DaisyExamples/libdaisy/src/per/adc.h **** using a struct like this allows us to add more configuration
  19:../../DaisyExamples/libdaisy/src/per/adc.h **** later without breaking existing functionality.
  20:../../DaisyExamples/libdaisy/src/per/adc.h **** */
  21:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  22:../../DaisyExamples/libdaisy/src/per/adc.h **** /** Configuration Structure for a given channel */
  23:../../DaisyExamples/libdaisy/src/per/adc.h **** struct AdcChannelConfig
  24:../../DaisyExamples/libdaisy/src/per/adc.h **** {
  25:../../DaisyExamples/libdaisy/src/per/adc.h ****     /** Which pin to use for multiplexing */
  26:../../DaisyExamples/libdaisy/src/per/adc.h ****     enum MuxPin
  27:../../DaisyExamples/libdaisy/src/per/adc.h ****     {
  28:../../DaisyExamples/libdaisy/src/per/adc.h ****         MUX_SEL_0,    /**< & */
  29:../../DaisyExamples/libdaisy/src/per/adc.h ****         MUX_SEL_1,    /**< & */
  30:../../DaisyExamples/libdaisy/src/per/adc.h ****         MUX_SEL_2,    /**< & */
  31:../../DaisyExamples/libdaisy/src/per/adc.h ****         MUX_SEL_LAST, /**< & */
  32:../../DaisyExamples/libdaisy/src/per/adc.h ****     };
  33:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  34:../../DaisyExamples/libdaisy/src/per/adc.h ****     /** Initializes a single ADC pin as an ADC. 
  35:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param pin Pin to init.
  36:../../DaisyExamples/libdaisy/src/per/adc.h ****      */
  37:../../DaisyExamples/libdaisy/src/per/adc.h ****     void InitSingle(dsy_gpio_pin pin);
  38:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  39:../../DaisyExamples/libdaisy/src/per/adc.h ****     /** 
  40:../../DaisyExamples/libdaisy/src/per/adc.h ****     Initializes a single ADC pin as a Multiplexed ADC.
  41:../../DaisyExamples/libdaisy/src/per/adc.h ****     Requires a CD405X Multiplexer connected to the pin.
  42:../../DaisyExamples/libdaisy/src/per/adc.h ****     You only need to supply the mux pins that are required,
  43:../../DaisyExamples/libdaisy/src/per/adc.h ****     e.g. a 4052 mux would only require mux_0 and mux_1.
  44:../../DaisyExamples/libdaisy/src/per/adc.h ****     Internal Callbacks handle the pin addressing.
  45:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param mux_channels must be 1-8
  46:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param mux_0 First mux pin
  47:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param mux_1 Second mux pin
  48:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param mux_2 Third mux pin
  49:../../DaisyExamples/libdaisy/src/per/adc.h ****     \param adc_pin &
  50:../../DaisyExamples/libdaisy/src/per/adc.h ****     */
  51:../../DaisyExamples/libdaisy/src/per/adc.h ****     void InitMux(dsy_gpio_pin adc_pin,
  52:../../DaisyExamples/libdaisy/src/per/adc.h ****                  size_t       mux_channels,
  53:../../DaisyExamples/libdaisy/src/per/adc.h ****                  dsy_gpio_pin mux_0,
  54:../../DaisyExamples/libdaisy/src/per/adc.h ****                  dsy_gpio_pin mux_1 = {DSY_GPIOX, 0},
  55:../../DaisyExamples/libdaisy/src/per/adc.h ****                  dsy_gpio_pin mux_2 = {DSY_GPIOX, 0});
  56:../../DaisyExamples/libdaisy/src/per/adc.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 8


  57:../../DaisyExamples/libdaisy/src/per/adc.h ****     dsy_gpio pin_;                   /**< & */
  58:../../DaisyExamples/libdaisy/src/per/adc.h ****     dsy_gpio mux_pin_[MUX_SEL_LAST]; /**< & */
  59:../../DaisyExamples/libdaisy/src/per/adc.h ****     uint8_t  mux_channels_;          /**< & */
  60:../../DaisyExamples/libdaisy/src/per/adc.h **** };
  61:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  62:../../DaisyExamples/libdaisy/src/per/adc.h **** /**
  63:../../DaisyExamples/libdaisy/src/per/adc.h ****    Handler for analog to digital conversion
  64:../../DaisyExamples/libdaisy/src/per/adc.h **** */
  65:../../DaisyExamples/libdaisy/src/per/adc.h **** class AdcHandle
  66:../../DaisyExamples/libdaisy/src/per/adc.h **** {
  67:../../DaisyExamples/libdaisy/src/per/adc.h ****   public:
  68:../../DaisyExamples/libdaisy/src/per/adc.h ****     /** Supported oversampling amounts */
  69:../../DaisyExamples/libdaisy/src/per/adc.h ****     enum OverSampling
  70:../../DaisyExamples/libdaisy/src/per/adc.h ****     {
  71:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_NONE, /**< & */
  72:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_4,    /**< & */
  73:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_8,    /**< & */
  74:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_16,   /**< & */
  75:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_32,   /**< & */
  76:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_64,   /**< & */
  77:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_128,  /**< & */
  78:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_256,  /**< & */
  79:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_512,  /**< & */
  80:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_1024, /**< & */
  81:../../DaisyExamples/libdaisy/src/per/adc.h ****         OVS_LAST, /**< & */
  82:../../DaisyExamples/libdaisy/src/per/adc.h ****     };
  83:../../DaisyExamples/libdaisy/src/per/adc.h **** 
  84:../../DaisyExamples/libdaisy/src/per/adc.h ****     AdcHandle() {}
  85:../../DaisyExamples/libdaisy/src/per/adc.h ****     ~AdcHandle() {}
  71              		.loc 8 85 5 is_stmt 1 view .LVU11
  72              		.loc 8 85 5 is_stmt 0 view .LVU12
  73              	.LBE488:
  74              	.LBB489:
  75              	.LBI489:
  76              		.file 9 "../../DaisyExamples/libdaisy/src/hid/audio.h"
   1:../../DaisyExamples/libdaisy/src/hid/audio.h **** #ifndef DSY_AUDIO_H
   2:../../DaisyExamples/libdaisy/src/hid/audio.h **** #define DSY_AUDIO_H /**< & */
   3:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
   4:../../DaisyExamples/libdaisy/src/hid/audio.h **** #include "per/sai.h"
   5:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
   6:../../DaisyExamples/libdaisy/src/hid/audio.h **** namespace daisy
   7:../../DaisyExamples/libdaisy/src/hid/audio.h **** {
   8:../../DaisyExamples/libdaisy/src/hid/audio.h **** class AudioHandle
   9:../../DaisyExamples/libdaisy/src/hid/audio.h **** {
  10:../../DaisyExamples/libdaisy/src/hid/audio.h ****   public:
  11:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Manually configurable details about the Audio Engine */
  12:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** TODO: Figure out how to get samplerate in here. */
  13:../../DaisyExamples/libdaisy/src/hid/audio.h ****     struct Config
  14:../../DaisyExamples/libdaisy/src/hid/audio.h ****     {
  15:../../DaisyExamples/libdaisy/src/hid/audio.h ****         size_t                        blocksize;
  16:../../DaisyExamples/libdaisy/src/hid/audio.h ****         SaiHandle::Config::SampleRate samplerate;
  17:../../DaisyExamples/libdaisy/src/hid/audio.h ****         float                         postgain;
  18:../../DaisyExamples/libdaisy/src/hid/audio.h ****     };
  19:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  20:../../DaisyExamples/libdaisy/src/hid/audio.h ****     enum class Result
  21:../../DaisyExamples/libdaisy/src/hid/audio.h ****     {
  22:../../DaisyExamples/libdaisy/src/hid/audio.h ****         OK,
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 9


  23:../../DaisyExamples/libdaisy/src/hid/audio.h ****         ERR,
  24:../../DaisyExamples/libdaisy/src/hid/audio.h ****     };
  25:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  26:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Non-Interleaving input buffer
  27:../../DaisyExamples/libdaisy/src/hid/audio.h ****      * Buffer arranged by float[chn][sample] 
  28:../../DaisyExamples/libdaisy/src/hid/audio.h ****      * const so that the user can't modify the input
  29:../../DaisyExamples/libdaisy/src/hid/audio.h ****     */
  30:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef const float* const* InputBuffer;
  31:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  32:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Non-Interleaving output buffer
  33:../../DaisyExamples/libdaisy/src/hid/audio.h ****      * Arranged by float[chn][sample] 
  34:../../DaisyExamples/libdaisy/src/hid/audio.h ****     */
  35:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef float** OutputBuffer;
  36:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  37:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Type for a Non-Interleaving audio callback 
  38:../../DaisyExamples/libdaisy/src/hid/audio.h ****    * Non-Interleaving audio callbacks in daisy will be of this type
  39:../../DaisyExamples/libdaisy/src/hid/audio.h ****   */
  40:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef void (*AudioCallback)(InputBuffer  in,
  41:../../DaisyExamples/libdaisy/src/hid/audio.h ****                                   OutputBuffer out,
  42:../../DaisyExamples/libdaisy/src/hid/audio.h ****                                   size_t       size);
  43:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  44:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Interleaving Input buffer
  45:../../DaisyExamples/libdaisy/src/hid/audio.h ****      ** audio is prepared as { L0, R0, L1, R1, . . . LN, RN }]
  46:../../DaisyExamples/libdaisy/src/hid/audio.h ****      ** this is const, as the user shouldn't modify it
  47:../../DaisyExamples/libdaisy/src/hid/audio.h ****     */
  48:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef const float* InterleavingInputBuffer;
  49:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  50:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Interleaving Output buffer 
  51:../../DaisyExamples/libdaisy/src/hid/audio.h ****      ** audio is prepared as { L0, R0, L1, R1, . . . LN, RN }
  52:../../DaisyExamples/libdaisy/src/hid/audio.h ****     */
  53:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef float* InterleavingOutputBuffer;
  54:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  55:../../DaisyExamples/libdaisy/src/hid/audio.h ****     /** Interleaving Audio Callback 
  56:../../DaisyExamples/libdaisy/src/hid/audio.h ****    * Interleaving audio callbacks in daisy must be of this type
  57:../../DaisyExamples/libdaisy/src/hid/audio.h ****   */
  58:../../DaisyExamples/libdaisy/src/hid/audio.h ****     typedef void (*InterleavingAudioCallback)(InterleavingInputBuffer  in,
  59:../../DaisyExamples/libdaisy/src/hid/audio.h ****                                               InterleavingOutputBuffer out,
  60:../../DaisyExamples/libdaisy/src/hid/audio.h ****                                               size_t                   size);
  61:../../DaisyExamples/libdaisy/src/hid/audio.h **** 
  62:../../DaisyExamples/libdaisy/src/hid/audio.h ****     AudioHandle() : pimpl_(nullptr) {}
  63:../../DaisyExamples/libdaisy/src/hid/audio.h ****     ~AudioHandle() {}
  77              		.loc 9 63 5 is_stmt 1 view .LVU13
  78              		.loc 9 63 5 is_stmt 0 view .LVU14
  79              	.LBE489:
  80              	.LBE485:
  81              		.loc 1 68 20 view .LVU15
  82 0000 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE1762:
  86              		.weak	_ZN5daisy10DaisyPetalD1Ev
  87              		.thumb_set _ZN5daisy10DaisyPetalD1Ev,_ZN5daisy10DaisyPetalD2Ev
  88 0002 00BF     		.section	.text._ZN10dingus_dsp6ChorusD2Ev,"axG",%progbits,_ZN10dingus_dsp6ChorusD5Ev,comdat
  89              		.align	1
  90              		.p2align 2,,3
  91              		.weak	_ZN10dingus_dsp6ChorusD2Ev
  92              		.syntax unified
  93              		.thumb
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 10


  94              		.thumb_func
  95              		.fpu fpv5-d16
  97              	_ZN10dingus_dsp6ChorusD2Ev:
  98              	.LVL1:
  99              	.LFB4080:
 100              		.file 10 "dingus_dsp/chorus.h"
   1:dingus_dsp/chorus.h **** #pragma once
   2:dingus_dsp/chorus.h **** #ifndef CHORUS_H
   3:dingus_dsp/chorus.h **** #define CHORUS_H
   4:dingus_dsp/chorus.h **** 
   5:dingus_dsp/chorus.h **** #include "modulated_delay.h"
   6:dingus_dsp/chorus.h **** #include "multitap_delay.h"
   7:dingus_dsp/chorus.h **** 
   8:dingus_dsp/chorus.h **** #include <array>
   9:dingus_dsp/chorus.h **** 
  10:dingus_dsp/chorus.h **** namespace dingus_dsp
  11:dingus_dsp/chorus.h **** {
  12:dingus_dsp/chorus.h **** 
  13:dingus_dsp/chorus.h **** // A stereo chorus engine combining two modulated delay lines.
  14:dingus_dsp/chorus.h **** class Chorus
  15:dingus_dsp/chorus.h **** {
  16:dingus_dsp/chorus.h ****     public:
  17:dingus_dsp/chorus.h ****         Chorus() {}
  18:dingus_dsp/chorus.h **** 
  19:dingus_dsp/chorus.h ****         ~Chorus() {}
 101              		.loc 10 19 9 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LBB490:
 107              	.LBI490:
 108              		.file 11 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
   1:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // <array> -*- C++ -*-
   2:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
   3:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** //
   5:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // software; you can redistribute it and/or modify it under the
   7:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // terms of the GNU General Public License as published by the
   8:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // any later version.
  10:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  11:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // This library is distributed in the hope that it will be useful,
  12:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // GNU General Public License for more details.
  15:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  16:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // 3.1, as published by the Free Software Foundation.
  19:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  20:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // You should have received a copy of the GNU General Public License and
  21:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // <http://www.gnu.org/licenses/>.
  24:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 11


  25:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** /** @file include/array
  26:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  *  This is a Standard C++ Library header.
  27:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  */
  28:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  29:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #ifndef _GLIBCXX_ARRAY
  30:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #define _GLIBCXX_ARRAY 1
  31:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  32:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #pragma GCC system_header
  33:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  34:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #if __cplusplus < 201103L
  35:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** # include <bits/c++0x_warning.h>
  36:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #else
  37:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  38:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <utility>
  39:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/functexcept.h>
  40:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/stl_algobase.h>
  41:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/range_access.h>
  42:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  43:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** {
  45:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  47:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  48:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     struct __array_traits
  49:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
  50:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp _Type[_Nm];
  51:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  54:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp&
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  58:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp*
  59:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _S_ptr(const _Type& __t) noexcept
  60:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp*>(__t); }
  61:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     };
  62:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  63:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  template<typename _Tp>
  64:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    struct __array_traits<_Tp, 0>
  65:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    {
  66:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      struct _Type { };
  67:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_swappable;
  68:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_nothrow_swappable;
  69:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  70:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp&
  71:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      { return *static_cast<_Tp*>(nullptr); }
  73:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  74:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp*
  75:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      _S_ptr(const _Type&) noexcept
  76:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      { return nullptr; }
  77:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    };
  78:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  79:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   /**
  80:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 12


  82:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @ingroup sequences
  83:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  84:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#67">sequence</a>.
  87:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  88:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  Sets support random access iterators.
  89:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  90:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Nm  Number of elements.
  92:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   */
  93:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     struct array
 109              		.loc 11 94 12 view .LVU17
 110              		.loc 11 94 12 is_stmt 0 view .LVU18
 111              	.LBE490:
 112              		.loc 10 19 20 view .LVU19
 113 0000 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE4080:
 117              		.weak	_ZN10dingus_dsp6ChorusD1Ev
 118              		.thumb_set _ZN10dingus_dsp6ChorusD1Ev,_ZN10dingus_dsp6ChorusD2Ev
 119 0002 00BF     		.section	.text._ZN16GlobalParametersD2Ev,"axG",%progbits,_ZN16GlobalParametersD5Ev,comdat
 120              		.align	1
 121              		.p2align 2,,3
 122              		.weak	_ZN16GlobalParametersD2Ev
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv5-d16
 128              	_ZN16GlobalParametersD2Ev:
 129              	.LVL2:
 130              	.LFB4730:
 131              		.file 12 "ChorusPetal.cpp"
   1:ChorusPetal.cpp **** #include "daisy_petal.h"
   2:ChorusPetal.cpp **** #include "daisysp.h"
   3:ChorusPetal.cpp **** 
   4:ChorusPetal.cpp **** #include "dingus_dsp/chorus.h"
   5:ChorusPetal.cpp **** #include "dingus_dsp/dingus_math.h"
   6:ChorusPetal.cpp **** #include "dingus_dsp/smooth_value.h"
   7:ChorusPetal.cpp **** 
   8:ChorusPetal.cpp **** using namespace daisy;
   9:ChorusPetal.cpp **** //using namespace daisysp;
  10:ChorusPetal.cpp **** 
  11:ChorusPetal.cpp **** // A wrapper for all of the effect parameters.
  12:ChorusPetal.cpp **** struct GlobalParameters 
 132              		.loc 12 12 8 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LBB491:
 138              	.LBI491:
 139              		.file 13 "dingus_dsp/smooth_value.h"
   1:dingus_dsp/smooth_value.h **** /*
   2:dingus_dsp/smooth_value.h ****   ==============================================================================
   3:dingus_dsp/smooth_value.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 13


   4:dingus_dsp/smooth_value.h ****     File: smooth_value.h
   5:dingus_dsp/smooth_value.h ****     Author: Daniel Schwartz
   6:dingus_dsp/smooth_value.h ****     Description: SmoothValue will create a smooth linear transition from one 
   7:dingus_dsp/smooth_value.h ****     value to the next when it is set to a new value.
   8:dingus_dsp/smooth_value.h **** 
   9:dingus_dsp/smooth_value.h ****   ==============================================================================
  10:dingus_dsp/smooth_value.h **** */
  11:dingus_dsp/smooth_value.h **** 
  12:dingus_dsp/smooth_value.h **** #pragma once
  13:dingus_dsp/smooth_value.h **** #ifndef SMOOTH_VALUE_H
  14:dingus_dsp/smooth_value.h **** #define SMOOTH_VALUE_H
  15:dingus_dsp/smooth_value.h **** 
  16:dingus_dsp/smooth_value.h **** #include "dingus_math.h"
  17:dingus_dsp/smooth_value.h **** 
  18:dingus_dsp/smooth_value.h **** namespace dingus_dsp 
  19:dingus_dsp/smooth_value.h **** {
  20:dingus_dsp/smooth_value.h **** 
  21:dingus_dsp/smooth_value.h **** // SmoothValue will create a smooth linear transition from one value to the next.
  22:dingus_dsp/smooth_value.h **** template <typename FloatType>
  23:dingus_dsp/smooth_value.h **** class SmoothValue
  24:dingus_dsp/smooth_value.h **** {
  25:dingus_dsp/smooth_value.h ****     public:
  26:dingus_dsp/smooth_value.h ****         // Sets the inital value to 0.
  27:dingus_dsp/smooth_value.h ****         SmoothValue() {
  28:dingus_dsp/smooth_value.h ****             curr_ = 0;
  29:dingus_dsp/smooth_value.h ****             target_ = 0;
  30:dingus_dsp/smooth_value.h ****         }
  31:dingus_dsp/smooth_value.h **** 
  32:dingus_dsp/smooth_value.h ****         // Takes the initial value to use.
  33:dingus_dsp/smooth_value.h ****         SmoothValue(FloatType value) {
  34:dingus_dsp/smooth_value.h ****             curr_ = value;
  35:dingus_dsp/smooth_value.h ****             target_ = value;
  36:dingus_dsp/smooth_value.h ****         }
  37:dingus_dsp/smooth_value.h **** 
  38:dingus_dsp/smooth_value.h ****         ~SmoothValue() {}
 140              		.loc 13 38 9 view .LVU21
 141              		.loc 13 38 9 is_stmt 0 view .LVU22
 142              	.LBE491:
 143              	.LBB492:
 144              	.LBI492:
 145              		.loc 13 38 9 is_stmt 1 view .LVU23
 146              		.loc 13 38 9 is_stmt 0 view .LVU24
 147              	.LBE492:
 148              		.loc 12 12 8 view .LVU25
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE4730:
 153              		.weak	_ZN16GlobalParametersD1Ev
 154              		.thumb_set _ZN16GlobalParametersD1Ev,_ZN16GlobalParametersD2Ev
 155 0002 00BF     		.section	.text._Z8Controlsv,"ax",%progbits
 156              		.align	1
 157              		.p2align 2,,3
 158              		.global	_Z8Controlsv
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv5-d16
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 14


 164              	_Z8Controlsv:
 165              	.LFB4106:
  13:ChorusPetal.cpp **** {
  14:ChorusPetal.cpp **** 	void Init(float sample_rate) {
  15:ChorusPetal.cpp **** 		delay_time.Init(0.01f, sample_rate);
  16:ChorusPetal.cpp **** 		depth.Init(0.01f, sample_rate);
  17:ChorusPetal.cpp **** 	}
  18:ChorusPetal.cpp **** 
  19:ChorusPetal.cpp **** 	bool effectOn { false };
  20:ChorusPetal.cpp **** 	float mix { 0.5f };
  21:ChorusPetal.cpp **** 	float level { 1.f };
  22:ChorusPetal.cpp **** 	float feedback { 0.f };
  23:ChorusPetal.cpp **** 	float rate { 1.f };
  24:ChorusPetal.cpp **** 	dingus_dsp::SmoothValue<float> delay_time {};
  25:ChorusPetal.cpp **** 	dingus_dsp::SmoothValue<float> depth {};
  26:ChorusPetal.cpp **** };
  27:ChorusPetal.cpp **** 
  28:ChorusPetal.cpp **** // Globals
  29:ChorusPetal.cpp **** DaisyPetal hw;
  30:ChorusPetal.cpp **** static dingus_dsp::Chorus g_chorus;
  31:ChorusPetal.cpp **** static GlobalParameters g_param;
  32:ChorusPetal.cpp **** 
  33:ChorusPetal.cpp **** void Controls() 
  34:ChorusPetal.cpp **** {
 166              		.loc 12 34 1 is_stmt 1 view -0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
  35:ChorusPetal.cpp **** 	hw.ProcessAllControls();
 170              		.loc 12 35 2 view .LVU27
 171              	.LVL3:
 172              	.LBB537:
 173              	.LBI537:
  69:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  70:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Initialize daisy petal */
  71:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void Init(bool boost = false);
  72:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  73:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /**
  74:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        Wait before moving on.
  75:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        \param del Delay time in ms.
  76:../../DaisyExamples/libdaisy/src/daisy_petal.h ****      */
  77:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void DelayMs(size_t del);
  78:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  79:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  80:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Starts the callback
  81:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     \cb Interleaved callback function
  82:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     */
  83:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void StartAudio(AudioHandle::InterleavingAudioCallback cb);
  84:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  85:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Starts the callback
  86:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     \cb multichannel callback function
  87:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     */
  88:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void StartAudio(AudioHandle::AudioCallback cb);
  89:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  90:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /**
  91:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        Switch callback functions
  92:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        \param cb New interleaved callback function.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 15


  93:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     */
  94:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void ChangeAudioCallback(AudioHandle::InterleavingAudioCallback cb);
  95:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
  96:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /**
  97:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        Switch callback functions
  98:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        \param cb New multichannel callback function.
  99:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     */
 100:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void ChangeAudioCallback(AudioHandle::AudioCallback cb);
 101:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 102:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Stops the audio if it is running. */
 103:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void StopAudio();
 104:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 105:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Updates the Audio Sample Rate, and reinitializes.
 106:../../DaisyExamples/libdaisy/src/daisy_petal.h ****      ** Audio must be stopped for this to work.
 107:../../DaisyExamples/libdaisy/src/daisy_petal.h ****      */
 108:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void SetAudioSampleRate(SaiHandle::Config::SampleRate samplerate);
 109:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 110:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Returns the audio sample rate in Hz as a floating point number.
 111:../../DaisyExamples/libdaisy/src/daisy_petal.h ****      */
 112:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     float AudioSampleRate();
 113:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 114:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Sets the number of samples processed per channel by the audio callback.
 115:../../DaisyExamples/libdaisy/src/daisy_petal.h ****        \param size Audio block size
 116:../../DaisyExamples/libdaisy/src/daisy_petal.h ****      */
 117:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void SetAudioBlockSize(size_t size);
 118:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 119:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Returns the number of samples per channel in a block of audio. */
 120:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     size_t AudioBlockSize();
 121:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 122:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Returns the rate in Hz that the Audio callback is called */
 123:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     float AudioCallbackRate();
 124:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 125:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Start analog to digital conversion. */
 126:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void StartAdc();
 127:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 128:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Stops Transfering data from the ADC */
 129:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void StopAdc();
 130:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 131:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Call at the same frequency as controls are read for stable readings.*/
 132:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     void ProcessAnalogControls();
 133:../../DaisyExamples/libdaisy/src/daisy_petal.h **** 
 134:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Process Analog and Digital Controls */
 135:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     inline void ProcessAllControls()
 174              		.loc 1 135 17 view .LVU28
 175              	.LBB538:
 136:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     {
 137:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         ProcessAnalogControls();
 176              		.loc 1 137 9 view .LVU29
 177              	.LBE538:
 178              	.LBE537:
  34:ChorusPetal.cpp **** 	hw.ProcessAllControls();
 179              		.loc 12 34 1 is_stmt 0 view .LVU30
 180 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 181              		.cfi_def_cfa_offset 24
 182              		.cfi_offset 4, -24
 183              		.cfi_offset 5, -20
 184              		.cfi_offset 6, -16
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 16


 185              		.cfi_offset 7, -12
 186              		.cfi_offset 8, -8
 187              		.cfi_offset 14, -4
 188              	.LBB542:
 189              	.LBB539:
 190              		.loc 1 137 30 view .LVU31
 191 0004 464D     		ldr	r5, .L9
 192              	.LBE539:
 193              	.LBE542:
  36:ChorusPetal.cpp **** 	g_param.mix = hw.knob[0].Process();
 194              		.loc 12 36 14 view .LVU32
 195 0006 474C     		ldr	r4, .L9+4
 196              	.LBB543:
 197              	.LBB540:
 198              		.loc 1 137 30 view .LVU33
 199 0008 2846     		mov	r0, r5
 200              	.LBE540:
 201              	.LBE543:
 202              	.LBB544:
 203              	.LBB545:
 204              	.LBB546:
 205              		.file 14 "dingus_dsp/multitap_delay.h"
   1:dingus_dsp/multitap_delay.h **** #pragma once
   2:dingus_dsp/multitap_delay.h **** #ifndef MULTITAP_DELAY_H
   3:dingus_dsp/multitap_delay.h **** #define MULTITAP_DELAY_H
   4:dingus_dsp/multitap_delay.h **** 
   5:dingus_dsp/multitap_delay.h **** #include <array>
   6:dingus_dsp/multitap_delay.h **** #include <cstdlib>
   7:dingus_dsp/multitap_delay.h **** 
   8:dingus_dsp/multitap_delay.h **** #include "dingus_math.h"
   9:dingus_dsp/multitap_delay.h **** #include "delayline.h"
  10:dingus_dsp/multitap_delay.h **** 
  11:dingus_dsp/multitap_delay.h **** namespace dingus_dsp
  12:dingus_dsp/multitap_delay.h **** {
  13:dingus_dsp/multitap_delay.h **** 
  14:dingus_dsp/multitap_delay.h **** template<size_t num_taps, size_t max_delay>
  15:dingus_dsp/multitap_delay.h **** class MultitapDelay 
  16:dingus_dsp/multitap_delay.h **** {
  17:dingus_dsp/multitap_delay.h ****     public:
  18:dingus_dsp/multitap_delay.h ****         MultitapDelay() {}
  19:dingus_dsp/multitap_delay.h ****         ~MultitapDelay() {}
  20:dingus_dsp/multitap_delay.h **** 
  21:dingus_dsp/multitap_delay.h ****         // Sets the initial state of the delay given the sample rate.
  22:dingus_dsp/multitap_delay.h ****         void Init(float sample_rate) {
  23:dingus_dsp/multitap_delay.h ****             sample_rate_ = sample_rate;
  24:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
  25:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
  26:dingus_dsp/multitap_delay.h ****             delay_taps_.fill(0);
  27:dingus_dsp/multitap_delay.h ****             decay_ = 1.f / static_cast<float>(num_taps);
  28:dingus_dsp/multitap_delay.h **** 
  29:dingus_dsp/multitap_delay.h ****             // Set the random spread values
  30:dingus_dsp/multitap_delay.h ****             srand(666);
  31:dingus_dsp/multitap_delay.h ****             CalculateSpread();
  32:dingus_dsp/multitap_delay.h ****         }
  33:dingus_dsp/multitap_delay.h **** 
  34:dingus_dsp/multitap_delay.h ****         // Writes the input sample to the delay buffer and returns the delayed output.
  35:dingus_dsp/multitap_delay.h ****         float Process(float input) {
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 17


  36:dingus_dsp/multitap_delay.h ****             float output = 0.f;
  37:dingus_dsp/multitap_delay.h ****             float feedback = prev_output_ * feedback_lvl_;
  38:dingus_dsp/multitap_delay.h ****             delay_line_.Write(input + feedback);
  39:dingus_dsp/multitap_delay.h **** 
  40:dingus_dsp/multitap_delay.h ****             float gain = 1.f;
  41:dingus_dsp/multitap_delay.h ****             float mod_value = osc_.Process();
  42:dingus_dsp/multitap_delay.h **** 
  43:dingus_dsp/multitap_delay.h ****             for (float tap : delay_taps_) {
  44:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
  45:dingus_dsp/multitap_delay.h ****                 output += delay_line_.Read(tap + offset) * gain;
  46:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
  47:dingus_dsp/multitap_delay.h ****             }
  48:dingus_dsp/multitap_delay.h **** 
  49:dingus_dsp/multitap_delay.h ****             prev_output_ = output;
  50:dingus_dsp/multitap_delay.h **** 
  51:dingus_dsp/multitap_delay.h ****             return output;
  52:dingus_dsp/multitap_delay.h ****         }
  53:dingus_dsp/multitap_delay.h **** 
  54:dingus_dsp/multitap_delay.h ****         // Clears the buffer and resets the oscillator.
  55:dingus_dsp/multitap_delay.h ****         void Reset() {
  56:dingus_dsp/multitap_delay.h ****             delay_line_.Clear();
  57:dingus_dsp/multitap_delay.h ****             osc_.Reset();
  58:dingus_dsp/multitap_delay.h ****         }
  59:dingus_dsp/multitap_delay.h **** 
  60:dingus_dsp/multitap_delay.h ****         // Set the delay time for each tap based on the target delay.
  61:dingus_dsp/multitap_delay.h ****         void SetDelayTime(float delay_time) {
  62:dingus_dsp/multitap_delay.h ****             delay_time = delay_time * sample_rate_;
  63:dingus_dsp/multitap_delay.h **** 
  64:dingus_dsp/multitap_delay.h ****             // Make sure the delay time won't exceed the buffer size.
  65:dingus_dsp/multitap_delay.h ****             delay_time = Clamp<float>(delay_time, 0.f, max_delay);
  66:dingus_dsp/multitap_delay.h **** 
  67:dingus_dsp/multitap_delay.h ****             float tap_spacing = delay_time / static_cast<float>(num_taps);
  68:dingus_dsp/multitap_delay.h ****             float tap_time = tap_spacing;
  69:dingus_dsp/multitap_delay.h **** 
  70:dingus_dsp/multitap_delay.h ****             for (size_t i = 0; i < num_taps; i++) {
  71:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
  72:dingus_dsp/multitap_delay.h ****                 delay_taps_[i] = tap_time - spread;
  73:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
  74:dingus_dsp/multitap_delay.h ****             }
  75:dingus_dsp/multitap_delay.h ****         }
  76:dingus_dsp/multitap_delay.h **** 
  77:dingus_dsp/multitap_delay.h ****         // Set the amount of feedback
  78:dingus_dsp/multitap_delay.h ****         void SetFeedbackLevel(float feedback_lvl) {
  79:dingus_dsp/multitap_delay.h ****             feedback_lvl_ = feedback_lvl;
 206              		.loc 14 79 27 view .LVU34
 207 000a 474E     		ldr	r6, .L9+8
 208              	.LBE546:
 209              	.LBE545:
 210              	.LBB549:
 211              	.LBB550:
 212 000c DFF82481 		ldr	r8, .L9+20
 213              	.LBE550:
 214              	.LBE549:
 215              	.LBE544:
  34:ChorusPetal.cpp **** 	hw.ProcessAllControls();
 216              		.loc 12 34 1 view .LVU35
 217 0010 2DED028B 		vpush.64	{d8}
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 18


 218              		.cfi_def_cfa_offset 32
 219              		.cfi_offset 80, -32
 220              		.cfi_offset 81, -28
 221              	.LBB557:
 222              	.LBB541:
 223              		.loc 1 137 30 view .LVU36
 224 0014 FFF7FEFF 		bl	_ZN5daisy10DaisyPetal21ProcessAnalogControlsEv
 225              	.LVL4:
 138:../../DaisyExamples/libdaisy/src/daisy_petal.h ****         ProcessDigitalControls();
 226              		.loc 1 138 9 is_stmt 1 view .LVU37
 227              		.loc 1 138 31 is_stmt 0 view .LVU38
 228 0018 2846     		mov	r0, r5
 229 001a FFF7FEFF 		bl	_ZN5daisy10DaisyPetal22ProcessDigitalControlsEv
 230              	.LVL5:
 231              		.loc 1 138 31 view .LVU39
 232              	.LBE541:
 233              	.LBE557:
 234              		.loc 12 36 2 is_stmt 1 view .LVU40
 235              		.loc 12 36 34 is_stmt 0 view .LVU41
 236 001e 05F15C00 		add	r0, r5, #92
 237 0022 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 238              	.LVL6:
  37:ChorusPetal.cpp **** 	g_param.level = hw.knob[1].Process();
 239              		.loc 12 37 36 view .LVU42
 240 0026 05F17C00 		add	r0, r5, #124
  36:ChorusPetal.cpp **** 	g_param.level = hw.knob[1].Process();
 241              		.loc 12 36 14 view .LVU43
 242 002a 84ED010A 		vstr.32	s0, [r4, #4]
 243              		.loc 12 37 2 is_stmt 1 view .LVU44
 244              		.loc 12 37 36 is_stmt 0 view .LVU45
 245 002e FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 246              	.LVL7:
 247              	.LBB558:
 248              	.LBB559:
  42:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  43:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** 
  44:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Initializes the switch object with a given port/pin combo.
  45:../../DaisyExamples/libdaisy/src/hid/switch.h ****     \param pin port/pin object to tell the switch which hardware pin to use.
  46:../../DaisyExamples/libdaisy/src/hid/switch.h ****     \param update_rate the rate at which the Debounce() function will be called. (used for timing).
  47:../../DaisyExamples/libdaisy/src/hid/switch.h ****     \param t switch type -- Default: TYPE_MOMENTARY
  48:../../DaisyExamples/libdaisy/src/hid/switch.h ****     \param pol switch polarity -- Default: POLARITY_INVERTED
  49:../../DaisyExamples/libdaisy/src/hid/switch.h ****     \param pu switch pull up/down -- Default: PULL_UP
  50:../../DaisyExamples/libdaisy/src/hid/switch.h ****     */
  51:../../DaisyExamples/libdaisy/src/hid/switch.h ****     void
  52:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Init(dsy_gpio_pin pin, float update_rate, Type t, Polarity pol, Pull pu);
  53:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  54:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /**
  55:../../DaisyExamples/libdaisy/src/hid/switch.h ****        Simplified Init.
  56:../../DaisyExamples/libdaisy/src/hid/switch.h ****        \param pin port/pin object to tell the switch which hardware pin to use.
  57:../../DaisyExamples/libdaisy/src/hid/switch.h ****        \param update_rate the rate at which the Debounce() function will be called. (used for timin
  58:../../DaisyExamples/libdaisy/src/hid/switch.h ****     */
  59:../../DaisyExamples/libdaisy/src/hid/switch.h ****     void Init(dsy_gpio_pin pin, float update_rate);
  60:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  61:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** 
  62:../../DaisyExamples/libdaisy/src/hid/switch.h ****     Called at update_rate to debounce and handle timing for the switch.
  63:../../DaisyExamples/libdaisy/src/hid/switch.h ****     In order for events not to be missed, its important that the Edge/Pressed checks
  64:../../DaisyExamples/libdaisy/src/hid/switch.h ****     be made at the same rate as the debounce function is being called.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 19


  65:../../DaisyExamples/libdaisy/src/hid/switch.h ****     */
  66:../../DaisyExamples/libdaisy/src/hid/switch.h ****     void Debounce();
  67:../../DaisyExamples/libdaisy/src/hid/switch.h **** 
  68:../../DaisyExamples/libdaisy/src/hid/switch.h ****     /** \return true if a button was just pressed. */
  69:../../DaisyExamples/libdaisy/src/hid/switch.h ****     inline bool RisingEdge() const { return state_ == 0x7f; }
 249              		.loc 4 69 55 view .LVU46
 250 0032 95F84121 		ldrb	r2, [r5, #321]	@ zero_extendqisi2
 251              	.LBE559:
 252              	.LBE558:
  38:ChorusPetal.cpp **** 	g_param.effectOn ^= hw.switches[0].RisingEdge();
  39:ChorusPetal.cpp **** 
  40:ChorusPetal.cpp **** 	g_param.feedback = hw.knob[3].Process();
 253              		.loc 12 40 39 view .LVU47
 254 0036 05F1BC00 		add	r0, r5, #188
  38:ChorusPetal.cpp **** 	g_param.effectOn ^= hw.switches[0].RisingEdge();
 255              		.loc 12 38 19 view .LVU48
 256 003a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  37:ChorusPetal.cpp **** 	g_param.effectOn ^= hw.switches[0].RisingEdge();
 257              		.loc 12 37 16 view .LVU49
 258 003c 84ED020A 		vstr.32	s0, [r4, #8]
  38:ChorusPetal.cpp **** 	g_param.effectOn ^= hw.switches[0].RisingEdge();
 259              		.loc 12 38 2 is_stmt 1 view .LVU50
 260              	.LVL8:
 261              	.LBB561:
 262              	.LBI558:
 263              		.loc 4 69 17 view .LVU51
 264              	.LBB560:
 265              		.loc 4 69 38 view .LVU52
 266              		.loc 4 69 38 is_stmt 0 view .LVU53
 267              	.LBE560:
 268              	.LBE561:
  38:ChorusPetal.cpp **** 	g_param.effectOn ^= hw.switches[0].RisingEdge();
 269              		.loc 12 38 19 view .LVU54
 270 0040 7F2A     		cmp	r2, #127
 271 0042 08BF     		it	eq
 272 0044 83F00103 		eoreq	r3, r3, #1
 273 0048 2370     		strb	r3, [r4]
 274              		.loc 12 40 2 is_stmt 1 view .LVU55
 275              		.loc 12 40 39 is_stmt 0 view .LVU56
 276 004a FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 277              	.LVL9:
 278              	.LBB562:
 279              	.LBB552:
 280              	.LBB547:
 281              		.loc 14 79 27 view .LVU57
 282 004e 06F65C43 		addw	r3, r6, #3164
 283              	.LBE547:
 284              	.LBE552:
 285              	.LBE562:
  41:ChorusPetal.cpp **** 	g_chorus.SetFeedbackLevel(g_param.feedback);
  42:ChorusPetal.cpp **** 	g_param.rate = hw.knob[4].Process();
 286              		.loc 12 42 35 view .LVU58
 287 0052 05F1DC00 		add	r0, r5, #220
  40:ChorusPetal.cpp **** 	g_chorus.SetFeedbackLevel(g_param.feedback);
 288              		.loc 12 40 19 view .LVU59
 289 0056 84ED030A 		vstr.32	s0, [r4, #12]
  41:ChorusPetal.cpp **** 	g_chorus.SetFeedbackLevel(g_param.feedback);
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 20


 290              		.loc 12 41 2 is_stmt 1 view .LVU60
 291              	.LVL10:
 292              	.LBB563:
 293              	.LBI544:
  20:dingus_dsp/chorus.h **** 
  21:dingus_dsp/chorus.h ****         // Initialize the state of the chorus.
  22:dingus_dsp/chorus.h ****         void Init(float sample_rate) {
  23:dingus_dsp/chorus.h ****             sample_rate_ = sample_rate;
  24:dingus_dsp/chorus.h ****             delaylines_[0].Init(sample_rate);
  25:dingus_dsp/chorus.h ****             delaylines_[1].Init(sample_rate);
  26:dingus_dsp/chorus.h ****         }
  27:dingus_dsp/chorus.h **** 
  28:dingus_dsp/chorus.h ****         // Process a sample for one channel.
  29:dingus_dsp/chorus.h ****         float Process(float input, size_t channel) {
  30:dingus_dsp/chorus.h ****             float output = delaylines_[channel].Process(input);
  31:dingus_dsp/chorus.h ****             return output;
  32:dingus_dsp/chorus.h ****         }
  33:dingus_dsp/chorus.h **** 
  34:dingus_dsp/chorus.h ****         // Reset the state of the chorus.
  35:dingus_dsp/chorus.h ****         void Reset() {
  36:dingus_dsp/chorus.h ****             delaylines_[0].Reset();
  37:dingus_dsp/chorus.h ****             delaylines_[1].Reset();
  38:dingus_dsp/chorus.h ****         }
  39:dingus_dsp/chorus.h **** 
  40:dingus_dsp/chorus.h ****         // Returns the maximum delay time in seconds.
  41:dingus_dsp/chorus.h ****         float GetMaxDelay() {
  42:dingus_dsp/chorus.h ****             return static_cast<float>(delaylines_[0].GetMaxDelay()) / sample_rate_;
  43:dingus_dsp/chorus.h ****         }
  44:dingus_dsp/chorus.h **** 
  45:dingus_dsp/chorus.h ****         // Set the delay time given a 0 to 1 parameter.
  46:dingus_dsp/chorus.h ****         // Scales the time to between 5ms to 25ms
  47:dingus_dsp/chorus.h ****         void SetDelayTime(float delay_time) {
  48:dingus_dsp/chorus.h ****             delay_time = .005f + delay_time * 0.025f;
  49:dingus_dsp/chorus.h ****             delaylines_[0].SetDelayTime(delay_time);
  50:dingus_dsp/chorus.h ****             delaylines_[1].SetDelayTime(delay_time);
  51:dingus_dsp/chorus.h ****         }
  52:dingus_dsp/chorus.h **** 
  53:dingus_dsp/chorus.h ****         // Set the rate of modulation.
  54:dingus_dsp/chorus.h ****         void SetRate(float rate) {
  55:dingus_dsp/chorus.h ****             delaylines_[0].SetRate(rate);
  56:dingus_dsp/chorus.h ****             delaylines_[1].SetRate(rate);
  57:dingus_dsp/chorus.h ****         }
  58:dingus_dsp/chorus.h **** 
  59:dingus_dsp/chorus.h ****         // Set the depth of modulation.
  60:dingus_dsp/chorus.h ****         void SetDepth(float depth) {
  61:dingus_dsp/chorus.h ****             delaylines_[0].SetDepth(depth);
  62:dingus_dsp/chorus.h ****             delaylines_[1].SetDepth(depth * -1.f);
  63:dingus_dsp/chorus.h ****         }
  64:dingus_dsp/chorus.h **** 
  65:dingus_dsp/chorus.h ****         // Set the amount of feedback.
  66:dingus_dsp/chorus.h ****         void SetFeedbackLevel(float feedback_lvl) {
 294              		.loc 10 66 14 view .LVU61
 295              	.LBE563:
  67:dingus_dsp/chorus.h ****             delaylines_[0].SetFeedbackLevel(feedback_lvl);
 296              		.loc 10 67 13 view .LVU62
 297              	.LBB564:
 298              	.LBB553:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 21


 299              	.LBI549:
  78:dingus_dsp/multitap_delay.h ****             feedback_lvl_ = feedback_lvl;
 300              		.loc 14 78 14 view .LVU63
 301              	.LBE553:
 302              	.LBB554:
 303              	.LBB548:
 304              		.loc 14 79 27 is_stmt 0 view .LVU64
 305 005a 83ED000A 		vstr.32	s0, [r3]
 306              	.LBE548:
 307              	.LBE554:
 308              	.LBB555:
 309              	.LBB551:
 310 005e 88ED000A 		vstr.32	s0, [r8]
 311              	.LVL11:
 312              		.loc 14 79 27 view .LVU65
 313              	.LBE551:
 314              	.LBE555:
 315              	.LBE564:
  68:dingus_dsp/chorus.h ****             delaylines_[1].SetFeedbackLevel(feedback_lvl);
 316              		.loc 10 68 13 is_stmt 1 view .LVU66
 317              	.LBB565:
 318              	.LBB556:
 319              	.LBI545:
  78:dingus_dsp/multitap_delay.h ****             feedback_lvl_ = feedback_lvl;
 320              		.loc 14 78 14 view .LVU67
  78:dingus_dsp/multitap_delay.h ****             feedback_lvl_ = feedback_lvl;
 321              		.loc 14 78 14 is_stmt 0 view .LVU68
 322              	.LBE556:
 323              	.LBE565:
 324              		.loc 12 42 2 is_stmt 1 view .LVU69
 325              		.loc 12 42 35 is_stmt 0 view .LVU70
 326 0062 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 327              	.LVL12:
  43:ChorusPetal.cpp **** 	g_chorus.SetRate(g_param.rate * g_param.rate * 20.f);
 328              		.loc 12 43 18 view .LVU71
 329 0066 F3EE047A 		vmov.f32	s15, #2.0e+1
 330              	.LBB566:
 331              	.LBB567:
 332              	.LBB568:
 333              	.LBB569:
 334              		.file 15 "dingus_dsp/oscillator.h"
   1:dingus_dsp/oscillator.h **** /*
   2:dingus_dsp/oscillator.h ****   ==============================================================================
   3:dingus_dsp/oscillator.h **** 
   4:dingus_dsp/oscillator.h ****     File: oscillator.h
   5:dingus_dsp/oscillator.h ****     Author: Daniel Schwartz
   6:dingus_dsp/oscillator.h ****     Description: A basic oscillator implemented using per sample calculations.
   7:dingus_dsp/oscillator.h **** 
   8:dingus_dsp/oscillator.h ****   ==============================================================================
   9:dingus_dsp/oscillator.h **** */
  10:dingus_dsp/oscillator.h **** 
  11:dingus_dsp/oscillator.h **** #pragma once
  12:dingus_dsp/oscillator.h **** #ifndef DINGUS_OSC_H
  13:dingus_dsp/oscillator.h **** #define DINGUS_OSC_H
  14:dingus_dsp/oscillator.h **** 
  15:dingus_dsp/oscillator.h **** #include "dingus_math.h"
  16:dingus_dsp/oscillator.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 22


  17:dingus_dsp/oscillator.h **** namespace dingus_dsp 
  18:dingus_dsp/oscillator.h **** {
  19:dingus_dsp/oscillator.h **** 
  20:dingus_dsp/oscillator.h **** // The different oscillator waveforms available.
  21:dingus_dsp/oscillator.h **** enum class OscType {
  22:dingus_dsp/oscillator.h ****     SINE,
  23:dingus_dsp/oscillator.h ****     TRI,
  24:dingus_dsp/oscillator.h ****     SAW,
  25:dingus_dsp/oscillator.h ****     PULSE,
  26:dingus_dsp/oscillator.h ****     MAX
  27:dingus_dsp/oscillator.h **** };
  28:dingus_dsp/oscillator.h **** 
  29:dingus_dsp/oscillator.h **** // A basic oscillator implemented using per sample calculations.
  30:dingus_dsp/oscillator.h **** class Oscillator 
  31:dingus_dsp/oscillator.h **** {
  32:dingus_dsp/oscillator.h ****     public:
  33:dingus_dsp/oscillator.h ****         Oscillator() {}
  34:dingus_dsp/oscillator.h ****         ~Oscillator() {}
  35:dingus_dsp/oscillator.h **** 
  36:dingus_dsp/oscillator.h ****         // Initialize the oscillator for playback given the audio rate.
  37:dingus_dsp/oscillator.h ****         void Init(float sample_rate);
  38:dingus_dsp/oscillator.h **** 
  39:dingus_dsp/oscillator.h ****         // Process a single sample.
  40:dingus_dsp/oscillator.h ****         float Process();
  41:dingus_dsp/oscillator.h **** 
  42:dingus_dsp/oscillator.h ****         // Reset the phase of the oscillator.
  43:dingus_dsp/oscillator.h ****         void Reset() {
  44:dingus_dsp/oscillator.h ****             phase_ = 0; 
  45:dingus_dsp/oscillator.h ****         }
  46:dingus_dsp/oscillator.h **** 
  47:dingus_dsp/oscillator.h ****         // Set the frequency of the oscillator.
  48:dingus_dsp/oscillator.h ****         void SetFrequency(float freq) {
  49:dingus_dsp/oscillator.h ****             freq_ = freq;
  50:dingus_dsp/oscillator.h ****             UpdateDelta();
 335              		.loc 15 50 24 view .LVU72
 336 006a A8F12400 		sub	r0, r8, #36
 337              	.LBE569:
 338              	.LBE568:
 339              	.LBE567:
 340              	.LBE566:
 341              		.loc 12 43 32 view .LVU73
 342 006e 20EE008A 		vmul.f32	s16, s0, s0
  42:ChorusPetal.cpp **** 	g_chorus.SetRate(g_param.rate * g_param.rate * 20.f);
 343              		.loc 12 42 15 view .LVU74
 344 0072 84ED040A 		vstr.32	s0, [r4, #16]
 345              		.loc 12 43 2 is_stmt 1 view .LVU75
 346              		.loc 12 43 18 is_stmt 0 view .LVU76
 347 0076 28EE278A 		vmul.f32	s16, s16, s15
 348              	.LVL13:
 349              	.LBB576:
 350              	.LBI566:
  54:dingus_dsp/chorus.h ****             delaylines_[0].SetRate(rate);
 351              		.loc 10 54 14 is_stmt 1 view .LVU77
 352              	.LBE576:
  55:dingus_dsp/chorus.h ****             delaylines_[1].SetRate(rate);
 353              		.loc 10 55 13 view .LVU78
 354              	.LBB577:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 23


 355              	.LBB572:
 356              	.LBI567:
  80:dingus_dsp/multitap_delay.h ****         }
  81:dingus_dsp/multitap_delay.h **** 
  82:dingus_dsp/multitap_delay.h ****         // Sets the rate of the modulation.
  83:dingus_dsp/multitap_delay.h ****         void SetRate(float rate) {
 357              		.loc 14 83 14 view .LVU79
 358              	.LBB571:
 359              	.LBI568:
  48:dingus_dsp/oscillator.h ****             freq_ = freq;
 360              		.loc 15 48 14 view .LVU80
 361              	.LBB570:
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 362              		.loc 15 49 13 view .LVU81
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 363              		.loc 15 49 19 is_stmt 0 view .LVU82
 364 007a 08ED078A 		vstr.32	s16, [r8, #-28]
 365              		.loc 15 50 13 is_stmt 1 view .LVU83
 366              		.loc 15 50 24 is_stmt 0 view .LVU84
 367 007e FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator11UpdateDeltaEv
 368              	.LVL14:
 369              		.loc 15 50 24 view .LVU85
 370              	.LBE570:
 371              	.LBE571:
 372              	.LBE572:
 373              	.LBE577:
  56:dingus_dsp/chorus.h ****         }
 374              		.loc 10 56 13 is_stmt 1 view .LVU86
 375              	.LBB578:
 376              	.LBB573:
 377              	.LBI573:
 378              		.loc 14 83 14 view .LVU87
 379              	.LBB574:
 380              	.LBI574:
  48:dingus_dsp/oscillator.h ****             freq_ = freq;
 381              		.loc 15 48 14 view .LVU88
 382              	.LBB575:
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 383              		.loc 15 49 13 view .LVU89
 384              		.loc 15 50 24 is_stmt 0 view .LVU90
 385 0082 06F63840 		addw	r0, r6, #3128
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 386              		.loc 15 49 19 view .LVU91
 387 0086 06F54466 		add	r6, r6, #3136
 388 008a 86ED008A 		vstr.32	s16, [r6]
 389              		.loc 15 50 13 is_stmt 1 view .LVU92
 390              		.loc 15 50 24 is_stmt 0 view .LVU93
 391 008e FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator11UpdateDeltaEv
 392              	.LVL15:
 393              		.loc 15 50 24 view .LVU94
 394              	.LBE575:
 395              	.LBE574:
 396              	.LBE573:
 397              	.LBE578:
  44:ChorusPetal.cpp **** 
  45:ChorusPetal.cpp **** 	// Parameter is latched and will only update if changed significantly.
  46:ChorusPetal.cpp **** 	g_param.delay_time.SetTargetValue(hw.knob[2].Process());
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 24


 398              		.loc 12 46 2 is_stmt 1 view .LVU95
 399              		.loc 12 46 35 is_stmt 0 view .LVU96
 400 0092 05F19C00 		add	r0, r5, #156
 401 0096 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 402              	.LVL16:
 403              	.LBB579:
 404              	.LBB580:
 405              	.LBB581:
 406              	.LBB582:
 407              		.file 16 "dingus_dsp/dingus_math.h"
   1:dingus_dsp/dingus_math.h **** #pragma once
   2:dingus_dsp/dingus_math.h **** #ifndef DINGUS_MATH_H
   3:dingus_dsp/dingus_math.h **** #define DINGUS_MATH_H
   4:dingus_dsp/dingus_math.h **** 
   5:dingus_dsp/dingus_math.h **** #include <cmath>
   6:dingus_dsp/dingus_math.h **** #include <random>
   7:dingus_dsp/dingus_math.h **** 
   8:dingus_dsp/dingus_math.h **** namespace dingus_dsp
   9:dingus_dsp/dingus_math.h **** {
  10:dingus_dsp/dingus_math.h **** 
  11:dingus_dsp/dingus_math.h **** // Generally useful constant values.
  12:dingus_dsp/dingus_math.h **** template<typename FloatType>
  13:dingus_dsp/dingus_math.h **** struct MathConstants
  14:dingus_dsp/dingus_math.h **** {
  15:dingus_dsp/dingus_math.h ****     static constexpr FloatType PI = static_cast<FloatType>(3.1415927410125732421875f);
  16:dingus_dsp/dingus_math.h ****     static constexpr FloatType TWOPI = static_cast<FloatType>(2 * 3.1415927410125732421875f);
  17:dingus_dsp/dingus_math.h **** };
  18:dingus_dsp/dingus_math.h **** 
  19:dingus_dsp/dingus_math.h **** // Given a value and limits lo and hi, clamps the value between the limits.
  20:dingus_dsp/dingus_math.h **** template <typename T>
  21:dingus_dsp/dingus_math.h **** inline T Clamp(T value, T lo, T hi) {
  22:dingus_dsp/dingus_math.h ****     if (value > hi) {
  23:dingus_dsp/dingus_math.h ****         return hi;
  24:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
  25:dingus_dsp/dingus_math.h ****         return lo;
  26:dingus_dsp/dingus_math.h ****     } else {
  27:dingus_dsp/dingus_math.h ****         return value;
  28:dingus_dsp/dingus_math.h ****     }
  29:dingus_dsp/dingus_math.h **** }
  30:dingus_dsp/dingus_math.h **** 
  31:dingus_dsp/dingus_math.h **** // Applies exponential moving average algorithm given: 
  32:dingus_dsp/dingus_math.h **** // current value Y_t, previous ema value S_t-1, and a coefficient between 0-1
  33:dingus_dsp/dingus_math.h **** // Acts as a first order filter to smooth value changes.
  34:dingus_dsp/dingus_math.h **** template <typename T>
  35:dingus_dsp/dingus_math.h **** inline T ExpMovingAvg(T value, T prev_ema, float coef) {
  36:dingus_dsp/dingus_math.h ****     return coef * value + (1 - coef) * prev_ema;
  37:dingus_dsp/dingus_math.h **** }
  38:dingus_dsp/dingus_math.h **** 
  39:dingus_dsp/dingus_math.h **** // Simple way to compare two floats.
  40:dingus_dsp/dingus_math.h **** template <typename FloatType>
  41:dingus_dsp/dingus_math.h **** inline bool CompareFloat(FloatType a, FloatType b, float epsilon) {
  42:dingus_dsp/dingus_math.h ****     return fabs(a - b) < epsilon;
 408              		.loc 16 42 16 view .LVU97
 409 009a D4ED067A 		vldr.32	s15, [r4, #24]
 410              	.LBE582:
 411              	.LBE581:
  39:dingus_dsp/smooth_value.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 25


  40:dingus_dsp/smooth_value.h ****         // Given the duration in seconds and audio sample rate, sets the smoothing time.
  41:dingus_dsp/smooth_value.h ****         void Init(float duration, float sample_rate) {
  42:dingus_dsp/smooth_value.h ****             sample_rate_ = sample_rate;
  43:dingus_dsp/smooth_value.h ****             duration_ = duration * sample_rate;
  44:dingus_dsp/smooth_value.h ****             counter_ = 0;
  45:dingus_dsp/smooth_value.h ****         }
  46:dingus_dsp/smooth_value.h **** 
  47:dingus_dsp/smooth_value.h ****         // Increment the value by one sample.
  48:dingus_dsp/smooth_value.h ****         void NextValue() {
  49:dingus_dsp/smooth_value.h ****             if (counter_ > 0) {
  50:dingus_dsp/smooth_value.h ****                 curr_ += delta_;
  51:dingus_dsp/smooth_value.h ****                 --counter_;
  52:dingus_dsp/smooth_value.h ****             } 
  53:dingus_dsp/smooth_value.h ****         }
  54:dingus_dsp/smooth_value.h **** 
  55:dingus_dsp/smooth_value.h ****         // Get the current value and then increment it.
  56:dingus_dsp/smooth_value.h ****         FloatType GetNextValue() {
  57:dingus_dsp/smooth_value.h ****             FloatType prev = curr_;
  58:dingus_dsp/smooth_value.h ****             NextValue();
  59:dingus_dsp/smooth_value.h ****             return prev;
  60:dingus_dsp/smooth_value.h ****         }
  61:dingus_dsp/smooth_value.h **** 
  62:dingus_dsp/smooth_value.h ****         // Get the current value only.  Does not increment.
  63:dingus_dsp/smooth_value.h ****         FloatType GetValue() {
  64:dingus_dsp/smooth_value.h ****             return curr_;
  65:dingus_dsp/smooth_value.h ****         }
  66:dingus_dsp/smooth_value.h **** 
  67:dingus_dsp/smooth_value.h ****         // Get the current target value.  Does not increment.
  68:dingus_dsp/smooth_value.h ****         FloatType GetTarget() {
  69:dingus_dsp/smooth_value.h ****             return target_;
  70:dingus_dsp/smooth_value.h ****         }
  71:dingus_dsp/smooth_value.h **** 
  72:dingus_dsp/smooth_value.h ****         // Returns true if the current value has not reached the target.
  73:dingus_dsp/smooth_value.h ****         bool IsActive() {
  74:dingus_dsp/smooth_value.h ****             return (counter_ > 0);
  75:dingus_dsp/smooth_value.h ****         }
  76:dingus_dsp/smooth_value.h **** 
  77:dingus_dsp/smooth_value.h ****         // Set the target value.  Will not update if the old target
  78:dingus_dsp/smooth_value.h ****         // is within a difference of epsilon to the new target.   
  79:dingus_dsp/smooth_value.h ****         void SetTargetValue(FloatType target, float epsilon = 0.0001f) {
  80:dingus_dsp/smooth_value.h ****             // Latch the target so it only updates if changed.
  81:dingus_dsp/smooth_value.h ****             if (!CompareFloat(target, target_, epsilon)) {
 412              		.loc 13 81 13 view .LVU98
 413 009e 9FED237A 		vldr.32	s14, .L9+12
 414              	.LVL17:
 415              		.loc 13 81 13 view .LVU99
 416              	.LBE580:
 417              	.LBI579:
  79:dingus_dsp/smooth_value.h ****             // Latch the target so it only updates if changed.
 418              		.loc 13 79 14 is_stmt 1 view .LVU100
 419              	.LBB595:
 420              	.LBB588:
 421              	.LBI581:
  41:dingus_dsp/dingus_math.h ****     return fabs(a - b) < epsilon;
 422              		.loc 16 41 13 view .LVU101
 423              	.LBB587:
 424              	.LBB583:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 26


 425              	.LBI583:
 426              		.file 17 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
   1:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // -*- C++ -*- C forwarding header.
   2:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
   3:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** //
   5:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // software; you can redistribute it and/or modify it under the
   7:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // terms of the GNU General Public License as published by the
   8:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // any later version.
  10:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  11:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // This library is distributed in the hope that it will be useful,
  12:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // GNU General Public License for more details.
  15:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  16:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // 3.1, as published by the Free Software Foundation.
  19:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  20:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // You should have received a copy of the GNU General Public License and
  21:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // <http://www.gnu.org/licenses/>.
  24:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  25:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** /** @file include/cmath
  26:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *
  29:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  *  as macros in C).
  33:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****  */
  34:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  35:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** //
  36:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // ISO C++ 14882: 26.5  C library
  37:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** //
  38:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  39:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #pragma GCC system_header
  40:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  41:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/c++config.h>
  42:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/cpp_type_traits.h>
  43:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #include <ext/type_traits.h>
  44:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #include_next <math.h>
  46:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/std_abs.h>
  48:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  49:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef _GLIBCXX_CMATH
  50:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #define _GLIBCXX_CMATH 1
  51:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  52:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef div
  54:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef acos
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef asin
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 27


  56:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef atan
  57:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef atan2
  58:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef ceil
  59:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef cos
  60:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef cosh
  61:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef exp
  62:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef fabs
  63:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef floor
  64:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef fmod
  65:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef frexp
  66:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef ldexp
  67:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef log
  68:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef log10
  69:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef modf
  70:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef pow
  71:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sin
  72:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sinh
  73:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sqrt
  74:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef tan
  75:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #undef tanh
  76:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  77:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** extern "C++"
  78:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** {
  79:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** {
  81:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  83:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::acos;
  84:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  85:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   acos(float __x)
  88:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_acosf(__x); }
  89:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  90:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   acos(long double __x)
  92:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_acosl(__x); }
  93:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
  95:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
  96:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
  97:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
  99:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     acos(_Tp __x)
 100:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_acos(__x); }
 101:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 102:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::asin;
 103:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 104:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   asin(float __x)
 107:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_asinf(__x); }
 108:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 109:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   asin(long double __x)
 111:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_asinl(__x); }
 112:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 28


 113:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 114:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 115:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 118:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     asin(_Tp __x)
 119:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_asin(__x); }
 120:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 121:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::atan;
 122:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 123:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   atan(float __x)
 126:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atanf(__x); }
 127:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 128:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   atan(long double __x)
 130:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atanl(__x); }
 131:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 132:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 133:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 134:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 135:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 137:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     atan(_Tp __x)
 138:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_atan(__x); }
 139:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 140:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::atan2;
 141:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 142:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   atan2(float __y, float __x)
 145:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atan2f(__y, __x); }
 146:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 147:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   atan2(long double __y, long double __x)
 149:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atan2l(__y, __x); }
 150:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 151:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 152:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp, typename _Up>
 153:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 154:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     atan2(_Tp __y, _Up __x)
 156:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     {
 157:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****       return atan2(__type(__y), __type(__x));
 159:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     }
 160:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 161:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::ceil;
 162:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 163:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   ceil(float __x)
 166:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ceilf(__x); }
 167:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 168:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   ceil(long double __x)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 29


 170:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ceill(__x); }
 171:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 172:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 173:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 174:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 175:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 177:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     ceil(_Tp __x)
 178:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_ceil(__x); }
 179:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 180:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::cos;
 181:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 182:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   cos(float __x)
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_cosf(__x); }
 186:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 187:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   cos(long double __x)
 189:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_cosl(__x); }
 190:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 191:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 192:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 193:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 194:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 196:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     cos(_Tp __x)
 197:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_cos(__x); }
 198:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 199:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::cosh;
 200:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 201:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   cosh(float __x)
 204:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_coshf(__x); }
 205:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 206:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   cosh(long double __x)
 208:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_coshl(__x); }
 209:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 210:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 211:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 212:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 213:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 215:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     cosh(_Tp __x)
 216:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_cosh(__x); }
 217:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 218:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::exp;
 219:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 220:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   exp(float __x)
 223:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_expf(__x); }
 224:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 225:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   exp(long double __x)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 30


 227:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_expl(__x); }
 228:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 229:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 230:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 231:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 232:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 234:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     exp(_Tp __x)
 235:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_exp(__x); }
 236:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 237:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::fabs;
 238:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** 
 239:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   fabs(float __x)
 427              		.loc 17 241 3 view .LVU102
 428              	.LBB584:
 242:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fabsf(__x); }
 429              		.loc 17 242 5 view .LVU103
 430              		.loc 17 242 5 is_stmt 0 view .LVU104
 431              	.LBE584:
 432              	.LBE583:
 433              		.loc 16 42 16 view .LVU105
 434 00a2 70EE677A 		vsub.f32	s15, s0, s15
 435              	.LBB586:
 436              	.LBB585:
 437              		.loc 17 242 31 view .LVU106
 438 00a6 F0EEE77A 		vabs.f32	s15, s15
 439              	.LBE585:
 440              	.LBE586:
 441              	.LBE587:
 442              	.LBE588:
 443              		.loc 13 81 13 view .LVU107
 444 00aa F4EEC77A 		vcmpe.f32	s15, s14
 445 00ae F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 446 00b2 10D4     		bmi	.L6
 447              	.LVL18:
 448              	.LBB589:
 449              	.LBI589:
  79:dingus_dsp/smooth_value.h ****             // Latch the target so it only updates if changed.
 450              		.loc 13 79 14 is_stmt 1 view .LVU108
 451              	.LBB590:
 452              	.LBB591:
 453              	.LBB592:
  82:dingus_dsp/smooth_value.h ****                 target_ = target;
  83:dingus_dsp/smooth_value.h ****                 UpdateDelta();
  84:dingus_dsp/smooth_value.h ****             }
  85:dingus_dsp/smooth_value.h ****         }
  86:dingus_dsp/smooth_value.h **** 
  87:dingus_dsp/smooth_value.h ****         // Sets both the current and target value immediately with no transition.
  88:dingus_dsp/smooth_value.h ****         void SetValue(FloatType value) {
  89:dingus_dsp/smooth_value.h ****             curr_ = value;
  90:dingus_dsp/smooth_value.h ****             target_ = value;
  91:dingus_dsp/smooth_value.h ****             UpdateDelta();
  92:dingus_dsp/smooth_value.h ****         }
  93:dingus_dsp/smooth_value.h ****     
  94:dingus_dsp/smooth_value.h ****     private:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 31


  95:dingus_dsp/smooth_value.h ****         // The current value.
  96:dingus_dsp/smooth_value.h ****         FloatType curr_ {};
  97:dingus_dsp/smooth_value.h **** 
  98:dingus_dsp/smooth_value.h ****         // The target value.
  99:dingus_dsp/smooth_value.h ****         FloatType target_ {};
 100:dingus_dsp/smooth_value.h **** 
 101:dingus_dsp/smooth_value.h ****         // The amount to increment.
 102:dingus_dsp/smooth_value.h ****         FloatType delta_ {};
 103:dingus_dsp/smooth_value.h **** 
 104:dingus_dsp/smooth_value.h ****         // The duration in samples of the transition.
 105:dingus_dsp/smooth_value.h ****         float duration_ {};
 106:dingus_dsp/smooth_value.h **** 
 107:dingus_dsp/smooth_value.h ****         // A counter for the number of times to increment.
 108:dingus_dsp/smooth_value.h ****         int counter_ {};
 109:dingus_dsp/smooth_value.h **** 
 110:dingus_dsp/smooth_value.h ****         // The audio sample rate.
 111:dingus_dsp/smooth_value.h ****         float sample_rate_ {};
 112:dingus_dsp/smooth_value.h **** 
 113:dingus_dsp/smooth_value.h ****         // Update the delta based on the difference between the current and target.
 114:dingus_dsp/smooth_value.h ****         // Resets the counter to the full duration.
 115:dingus_dsp/smooth_value.h ****         void UpdateDelta() {
 116:dingus_dsp/smooth_value.h ****             delta_ = (target_ - curr_) / duration_;
 454              		.loc 13 116 31 is_stmt 0 view .LVU109
 455 00b4 94ED057A 		vldr.32	s14, [r4, #20]
 456              		.loc 13 116 42 view .LVU110
 457 00b8 D4ED087A 		vldr.32	s15, [r4, #32]
 458              	.LBE592:
 459              	.LBE591:
  82:dingus_dsp/smooth_value.h ****                 target_ = target;
 460              		.loc 13 82 25 view .LVU111
 461 00bc 84ED060A 		vstr.32	s0, [r4, #24]
 462              	.LVL19:
 463              	.LBB594:
 464              	.LBI591:
 115:dingus_dsp/smooth_value.h ****             delta_ = (target_ - curr_) / duration_;
 465              		.loc 13 115 14 is_stmt 1 view .LVU112
 466              	.LBB593:
 467              		.loc 13 116 31 is_stmt 0 view .LVU113
 468 00c0 30EE470A 		vsub.f32	s0, s0, s14
 469              	.LVL20:
 117:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 470              		.loc 13 117 24 view .LVU114
 471 00c4 BDEEE77A 		vcvt.s32.f32	s14, s15
 472 00c8 17EE103A 		vmov	r3, s14	@ int
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 473              		.loc 13 116 40 view .LVU115
 474 00cc 80EE277A 		vdiv.f32	s14, s0, s15
 475              		.loc 13 117 24 view .LVU116
 476 00d0 6362     		str	r3, [r4, #36]
 477              	.LVL21:
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 478              		.loc 13 116 20 view .LVU117
 479 00d2 84ED077A 		vstr.32	s14, [r4, #28]
 480              	.LVL22:
 481              	.L6:
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 482              		.loc 13 116 20 view .LVU118
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 32


 483              	.LBE593:
 484              	.LBE594:
 485              	.LBE590:
 486              	.LBE589:
 487              	.LBE595:
 488              	.LBE579:
  47:ChorusPetal.cpp **** 
  48:ChorusPetal.cpp **** 	// Parameter is latched and will only update if changed significantly.
  49:ChorusPetal.cpp **** 	g_param.depth.SetTargetValue(hw.knob[5].Process());
 489              		.loc 12 49 2 is_stmt 1 view .LVU119
 490              		.loc 12 49 30 is_stmt 0 view .LVU120
 491 00d6 1648     		ldr	r0, .L9+16
 492 00d8 FFF7FEFF 		bl	_ZN5daisy13AnalogControl7ProcessEv
 493              	.LVL23:
 494              	.LBB596:
 495              	.LBB597:
 496              	.LBB598:
 497              	.LBB599:
 498              		.loc 16 42 16 view .LVU121
 499 00dc D4ED0C7A 		vldr.32	s15, [r4, #48]
 500              	.LBE599:
 501              	.LBE598:
  81:dingus_dsp/smooth_value.h ****                 target_ = target;
 502              		.loc 13 81 13 view .LVU122
 503 00e0 9FED127A 		vldr.32	s14, .L9+12
 504              	.LVL24:
  81:dingus_dsp/smooth_value.h ****                 target_ = target;
 505              		.loc 13 81 13 view .LVU123
 506              	.LBE597:
 507              	.LBI596:
  79:dingus_dsp/smooth_value.h ****             // Latch the target so it only updates if changed.
 508              		.loc 13 79 14 is_stmt 1 view .LVU124
 509              	.LBB612:
 510              	.LBB605:
 511              	.LBI598:
  41:dingus_dsp/dingus_math.h ****     return fabs(a - b) < epsilon;
 512              		.loc 16 41 13 view .LVU125
 513              	.LBB604:
 514              	.LBB600:
 515              	.LBI600:
 241:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fabsf(__x); }
 516              		.loc 17 241 3 view .LVU126
 517              	.LBB601:
 518              		.loc 17 242 5 view .LVU127
 519              		.loc 17 242 5 is_stmt 0 view .LVU128
 520              	.LBE601:
 521              	.LBE600:
 522              		.loc 16 42 16 view .LVU129
 523 00e4 70EE677A 		vsub.f32	s15, s0, s15
 524              	.LBB603:
 525              	.LBB602:
 526              		.loc 17 242 31 view .LVU130
 527 00e8 F0EEE77A 		vabs.f32	s15, s15
 528              	.LBE602:
 529              	.LBE603:
 530              	.LBE604:
 531              	.LBE605:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 33


  81:dingus_dsp/smooth_value.h ****                 target_ = target;
 532              		.loc 13 81 13 view .LVU131
 533 00ec F4EEC77A 		vcmpe.f32	s15, s14
 534 00f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 535 00f4 10D4     		bmi	.L5
 536              	.LVL25:
 537              	.LBB606:
 538              	.LBI606:
  79:dingus_dsp/smooth_value.h ****             // Latch the target so it only updates if changed.
 539              		.loc 13 79 14 is_stmt 1 view .LVU132
 540              	.LBB607:
 541              	.LBB608:
 542              	.LBB609:
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 543              		.loc 13 116 31 is_stmt 0 view .LVU133
 544 00f6 94ED0B7A 		vldr.32	s14, [r4, #44]
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 545              		.loc 13 116 42 view .LVU134
 546 00fa D4ED0E7A 		vldr.32	s15, [r4, #56]
 547              	.LBE609:
 548              	.LBE608:
  82:dingus_dsp/smooth_value.h ****                 UpdateDelta();
 549              		.loc 13 82 25 view .LVU135
 550 00fe 84ED0C0A 		vstr.32	s0, [r4, #48]
 551              	.LVL26:
 552              	.LBB611:
 553              	.LBI608:
 115:dingus_dsp/smooth_value.h ****             delta_ = (target_ - curr_) / duration_;
 554              		.loc 13 115 14 is_stmt 1 view .LVU136
 555              	.LBB610:
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 556              		.loc 13 116 31 is_stmt 0 view .LVU137
 557 0102 30EE470A 		vsub.f32	s0, s0, s14
 558              	.LVL27:
 559              		.loc 13 117 24 view .LVU138
 560 0106 BDEEE77A 		vcvt.s32.f32	s14, s15
 561 010a 17EE103A 		vmov	r3, s14	@ int
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 562              		.loc 13 116 40 view .LVU139
 563 010e 80EE277A 		vdiv.f32	s14, s0, s15
 564              		.loc 13 117 24 view .LVU140
 565 0112 E363     		str	r3, [r4, #60]
 566              	.LVL28:
 116:dingus_dsp/smooth_value.h ****             counter_ = static_cast<int>(duration_);
 567              		.loc 13 116 20 view .LVU141
 568 0114 84ED0D7A 		vstr.32	s14, [r4, #52]
 569              	.L5:
 570              	.LBE610:
 571              	.LBE611:
 572              	.LBE607:
 573              	.LBE606:
 574              	.LBE612:
 575              	.LBE596:
  50:ChorusPetal.cpp **** }
 576              		.loc 12 50 1 view .LVU142
 577 0118 BDEC028B 		vldm	sp!, {d8}
 578              		.cfi_restore 80
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 34


 579              		.cfi_restore 81
 580              		.cfi_def_cfa_offset 24
 581 011c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 582              	.L10:
 583              		.align	2
 584              	.L9:
 585 0120 00000000 		.word	.LANCHOR0
 586 0124 00000000 		.word	.LANCHOR1
 587 0128 00D00500 		.word	_ZL8g_chorus+380928
 588 012c 17B7D138 		.word	953267991
 589 0130 FC000000 		.word	.LANCHOR0+252
 590 0134 28EE0200 		.word	_ZL8g_chorus+192040
 591              		.cfi_endproc
 592              	.LFE4106:
 594              		.section	.text._Z13AudioCallbackPKPKfPPfj,"ax",%progbits
 595              		.align	1
 596              		.p2align 2,,3
 597              		.global	_Z13AudioCallbackPKPKfPPfj
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv5-d16
 603              	_Z13AudioCallbackPKPKfPPfj:
 604              	.LVL29:
 605              	.LFB4107:
  51:ChorusPetal.cpp **** 
  52:ChorusPetal.cpp **** void AudioCallback(AudioHandle::InputBuffer in, 
  53:ChorusPetal.cpp **** 				   AudioHandle::OutputBuffer out, 
  54:ChorusPetal.cpp **** 				   size_t size)
  55:ChorusPetal.cpp **** {
 606              		.loc 12 55 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 24
 609              		@ frame_needed = 0, uses_anonymous_args = 0
  56:ChorusPetal.cpp **** 	// Need to spread these calls out in a way to reduce noise.
  57:ChorusPetal.cpp **** 	Controls();
 610              		.loc 12 57 2 view .LVU144
  55:ChorusPetal.cpp **** 	// Need to spread these calls out in a way to reduce noise.
 611              		.loc 12 55 1 is_stmt 0 view .LVU145
 612 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 613              		.cfi_def_cfa_offset 36
 614              		.cfi_offset 4, -36
 615              		.cfi_offset 5, -32
 616              		.cfi_offset 6, -28
 617              		.cfi_offset 7, -24
 618              		.cfi_offset 8, -20
 619              		.cfi_offset 9, -16
 620              		.cfi_offset 10, -12
 621              		.cfi_offset 11, -8
 622              		.cfi_offset 14, -4
 623 0004 1446     		mov	r4, r2
 624 0006 8046     		mov	r8, r0
 625 0008 0F46     		mov	r7, r1
 626 000a 2DED048B 		vpush.64	{d8, d9}
 627              		.cfi_def_cfa_offset 52
 628              		.cfi_offset 80, -52
 629              		.cfi_offset 81, -48
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 35


 630              		.cfi_offset 82, -44
 631              		.cfi_offset 83, -40
 632 000e 87B0     		sub	sp, sp, #28
 633              		.cfi_def_cfa_offset 80
  55:ChorusPetal.cpp **** 	// Need to spread these calls out in a way to reduce noise.
 634              		.loc 12 55 1 view .LVU146
 635 0010 0192     		str	r2, [sp, #4]
 636 0012 0290     		str	r0, [sp, #8]
 637 0014 0391     		str	r1, [sp, #12]
 638              		.loc 12 57 10 view .LVU147
 639 0016 FFF7FEFF 		bl	_Z8Controlsv
 640              	.LVL30:
  58:ChorusPetal.cpp **** 
  59:ChorusPetal.cpp **** 	for (size_t i = 0; i < size; i++)
 641              		.loc 12 59 2 is_stmt 1 view .LVU148
 642              	.LBB711:
 643              		.loc 12 59 23 view .LVU149
 644 001a 002C     		cmp	r4, #0
 645 001c 00F0E881 		beq	.L11
 646 0020 3846     		mov	r0, r7
 647 0022 D8F80020 		ldr	r2, [r8]
 648 0026 D7F800B0 		ldr	fp, [r7]
 649              		.loc 12 59 14 is_stmt 0 view .LVU150
 650 002a 0025     		movs	r5, #0
 651 002c 4368     		ldr	r3, [r0, #4]
 652 002e 1146     		mov	r1, r2
 653 0030 614E     		ldr	r6, .L39
 654 0032 5846     		mov	r0, fp
 655 0034 614C     		ldr	r4, .L39+4
 656              	.LVL31:
 657              		.loc 12 59 14 view .LVU151
 658 0036 D8F80420 		ldr	r2, [r8, #4]
 659 003a 06F53C37 		add	r7, r6, #192512
 660              	.LVL32:
 661              		.loc 12 59 14 view .LVU152
 662 003e 0093     		str	r3, [sp]
 663 0040 6DE0     		b	.L21
 664              	.LVL33:
 665              	.L38:
 666              	.LBB712:
 667              	.LBB713:
 668              	.LBB714:
 669              	.LBB715:
 670              	.LBB716:
 671              	.LBB717:
 672              	.LBB718:
  24:dingus_dsp/dingus_math.h ****         return lo;
 673              		.loc 16 24 12 view .LVU153
 674 0042 F5EEC07A 		vcmpe.f32	s15, #0
 675 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 676 004a 01D5     		bpl	.L15
 677              	.LVL34:
  25:dingus_dsp/dingus_math.h ****     } else {
 678              		.loc 16 25 16 view .LVU154
 679 004c DFED5C7A 		vldr.32	s15, .L39+8
 680              	.LVL35:
 681              	.L15:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 36


  25:dingus_dsp/dingus_math.h ****     } else {
 682              		.loc 16 25 16 view .LVU155
 683              	.LBE718:
 684              	.LBE717:
 685              	.LBB721:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 686              		.loc 14 70 34 is_stmt 1 view .LVU156
 687              	.LBB722:
 688              	.LBB723:
 689              	.LBI723:
  95:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
  96:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp 	    			      value_type;
  97:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*			      pointer;
  98:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*                       const_pointer;
  99:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type&                   	      reference;
 100:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type&             	      const_reference;
 101:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*          		      iterator;
 102:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*			      const_iterator;
 103:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::size_t                    	      size_type;
 104:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 108:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Support for zero-sized arrays mandatory.
 109:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typename _AT_Type::_Type                         _M_elems;
 111:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 112:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // No explicit construct/copy/destroy for aggregate type.
 113:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 114:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // DR 776.
 115:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       fill(const value_type& __u)
 117:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 118:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 119:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 120:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       swap(array& __other)
 121:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 124:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Iterators.
 125:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 126:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       begin() noexcept
 127:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data()); }
 128:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 129:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       begin() const noexcept
 131:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 132:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 133:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 134:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       end() noexcept
 135:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data() + _Nm); }
 136:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 137:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       end() const noexcept
 139:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 140:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 141:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 37


 142:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() noexcept
 143:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(end()); }
 144:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 145:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() const noexcept
 147:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 148:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 149:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rend() noexcept
 151:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(begin()); }
 152:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 153:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rend() const noexcept
 155:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 156:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 157:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       cbegin() const noexcept
 159:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 160:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 161:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       cend() const noexcept
 163:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 164:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 165:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       crbegin() const noexcept
 167:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 168:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 169:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       crend() const noexcept
 171:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 172:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 173:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Capacity.
 174:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 175:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       size() const noexcept { return _Nm; }
 176:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 177:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 178:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       max_size() const noexcept { return _Nm; }
 179:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 180:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX_NODISCARD constexpr bool
 181:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       empty() const noexcept { return size() == 0; }
 182:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 183:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Element access.
 184:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reference
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       operator[](size_type __n) noexcept
 690              		.loc 11 185 7 view .LVU157
 691              	.LBB724:
 692              	.LBI724:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 693              		.loc 11 55 7 view .LVU158
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 694              		.loc 11 55 7 is_stmt 0 view .LVU159
 695              	.LBE724:
 696              	.LBE723:
 697              	.LBB725:
 698              	.LBI725:
 699              		.loc 11 185 7 is_stmt 1 view .LVU160
 700              	.LBB726:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 38


 701              	.LBI726:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 702              		.loc 11 55 7 view .LVU161
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 703              		.loc 11 55 7 is_stmt 0 view .LVU162
 704              	.LBE726:
 705              	.LBE725:
  71:dingus_dsp/multitap_delay.h ****                 delay_taps_[i] = tap_time - spread;
 706              		.loc 14 71 47 view .LVU163
 707 0050 07F6544C 		addw	ip, r7, #3156
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 708              		.loc 14 72 43 view .LVU164
 709 0054 9FED5B6A 		vldr.32	s12, .L39+12
 710              	.LBE722:
 711              	.LBE721:
 712              	.LBE716:
 713              	.LBE715:
 714              	.LBE714:
 715              	.LBE713:
 716              	.LBB763:
 717              	.LBB764:
  57:dingus_dsp/smooth_value.h ****             NextValue();
 718              		.loc 13 57 23 view .LVU165
 719 0058 94ED0B7A 		vldr.32	s14, [r4, #44]
 720              	.LBE764:
 721              	.LBE763:
 722              	.LBB768:
 723              	.LBB761:
 724              	.LBB734:
 725              	.LBB731:
 726              	.LBB728:
 727              	.LBB727:
  71:dingus_dsp/multitap_delay.h ****                 delay_taps_[i] = tap_time - spread;
 728              		.loc 14 71 47 view .LVU166
 729 005c DCED006A 		vldr.32	s13, [ip]
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 730              		.loc 14 72 32 view .LVU167
 731 0060 07F5456C 		add	ip, r7, #3152
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 732              		.loc 14 72 43 view .LVU168
 733 0064 66EEE76A 		vnmul.f32	s13, s13, s15
 734 0068 E6EE867A 		vfma.f32	s15, s13, s12
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 735              		.loc 14 72 32 view .LVU169
 736 006c CCED007A 		vstr.32	s15, [ip]
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 737              		.loc 14 72 32 view .LVU170
 738              	.LBE727:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 739              		.loc 14 70 13 is_stmt 1 view .LVU171
 740              	.LVL36:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 741              		.loc 14 70 34 view .LVU172
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 742              		.loc 14 70 34 is_stmt 0 view .LVU173
 743              	.LBE728:
 744              	.LBE731:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 39


 745              	.LBE734:
 746              	.LBE761:
 747              	.LBE768:
  60:ChorusPetal.cpp **** 	{
  61:ChorusPetal.cpp **** 		g_chorus.SetDelayTime(g_param.delay_time.GetNextValue());
  62:ChorusPetal.cpp **** 		g_chorus.SetDepth(g_param.depth.GetNextValue());
 748              		.loc 12 62 3 is_stmt 1 view .LVU174
 749              	.LBB769:
 750              	.LBI763:
  56:dingus_dsp/smooth_value.h ****             FloatType prev = curr_;
 751              		.loc 13 56 19 view .LVU175
 752              	.LBB767:
 753              	.LBB765:
 754              	.LBI765:
  48:dingus_dsp/smooth_value.h ****             if (counter_ > 0) {
 755              		.loc 13 48 14 view .LVU176
 756              	.LBB766:
  49:dingus_dsp/smooth_value.h ****                 curr_ += delta_;
 757              		.loc 13 49 17 is_stmt 0 view .LVU177
 758 0070 D4F83CC0 		ldr	ip, [r4, #60]
  49:dingus_dsp/smooth_value.h ****                 curr_ += delta_;
 759              		.loc 13 49 13 view .LVU178
 760 0074 BCF1000F 		cmp	ip, #0
 761 0078 09DD     		ble	.L16
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 762              		.loc 13 50 23 view .LVU179
 763 007a D4ED0D7A 		vldr.32	s15, [r4, #52]
  51:dingus_dsp/smooth_value.h ****             } 
 764              		.loc 13 51 17 view .LVU180
 765 007e 0CF1FF3C 		add	ip, ip, #-1
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 766              		.loc 13 50 23 view .LVU181
 767 0082 77EE877A 		vadd.f32	s15, s15, s14
  51:dingus_dsp/smooth_value.h ****             } 
 768              		.loc 13 51 17 view .LVU182
 769 0086 C4F83CC0 		str	ip, [r4, #60]
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 770              		.loc 13 50 23 view .LVU183
 771 008a C4ED0B7A 		vstr.32	s15, [r4, #44]
 772              	.L16:
 773              	.LVL37:
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 774              		.loc 13 50 23 view .LVU184
 775              	.LBE766:
 776              	.LBE765:
 777              	.LBE767:
 778              	.LBE769:
 779              	.LBB770:
 780              	.LBI770:
  60:dingus_dsp/chorus.h ****             delaylines_[0].SetDepth(depth);
 781              		.loc 10 60 14 is_stmt 1 view .LVU185
 782              	.LBB771:
  61:dingus_dsp/chorus.h ****             delaylines_[1].SetDepth(depth * -1.f);
 783              		.loc 10 61 13 view .LVU186
 784              	.LBB772:
 785              	.LBI772:
  84:dingus_dsp/multitap_delay.h ****             osc_.SetFrequency(rate);
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 40


  85:dingus_dsp/multitap_delay.h ****         }
  86:dingus_dsp/multitap_delay.h **** 
  87:dingus_dsp/multitap_delay.h ****         // Sets the depth of the modulation.
  88:dingus_dsp/multitap_delay.h ****         void SetDepth(float depth) {
 786              		.loc 14 88 14 view .LVU187
 787              	.LBB773:
 788              	.LBI773:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 789              		.loc 16 21 10 view .LVU188
 790              	.LBB774:
  22:dingus_dsp/dingus_math.h ****         return hi;
 791              		.loc 16 22 5 is_stmt 0 view .LVU189
 792 008e F7EE007A 		vmov.f32	s15, #1.0e+0
 793 0092 B4EEE77A 		vcmpe.f32	s14, s15
 794 0096 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 795 009a 09DC     		bgt	.L17
  24:dingus_dsp/dingus_math.h ****         return lo;
 796              		.loc 16 24 12 view .LVU190
 797 009c FFEE006A 		vmov.f32	s13, #-1.0e+0
 798 00a0 B4EEE67A 		vcmpe.f32	s14, s13
 799 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 800 00a8 00F1A781 		bmi	.L18
  27:dingus_dsp/dingus_math.h ****     }
 801              		.loc 16 27 16 view .LVU191
 802 00ac F0EE477A 		vmov.f32	s15, s14
 803              	.L17:
 804              	.LVL38:
  27:dingus_dsp/dingus_math.h ****     }
 805              		.loc 16 27 16 view .LVU192
 806              	.LBE774:
 807              	.LBE773:
 808              	.LBB775:
 809              	.LBI775:
  51:dingus_dsp/oscillator.h ****         }
  52:dingus_dsp/oscillator.h **** 
  53:dingus_dsp/oscillator.h ****         // Set the amplitude of the oscillator.
  54:dingus_dsp/oscillator.h ****         void SetAmplitude(float amp) {
 810              		.loc 15 54 14 is_stmt 1 view .LVU193
 811              	.LBB776:
  55:dingus_dsp/oscillator.h ****             amp_ = amp;
 812              		.loc 15 55 13 view .LVU194
 813              	.LBE776:
 814              	.LBE775:
 815              	.LBE772:
 816              	.LBB781:
 817              	.LBB782:
 818              	.LBB783:
  22:dingus_dsp/dingus_math.h ****         return hi;
 819              		.loc 16 22 5 is_stmt 0 view .LVU195
 820 00b0 FFEE006A 		vmov.f32	s13, #-1.0e+0
 821              	.LBE783:
 822              	.LBE782:
 823              	.LBE781:
 824              	.LBB793:
 825              	.LBB779:
 826              	.LBB777:
 827              		.loc 15 55 18 view .LVU196
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 41


 828 00b4 06F6086C 		addw	ip, r6, #3592
 829 00b8 CCED007A 		vstr.32	s15, [ip]
 830              	.LVL39:
 831              		.loc 15 55 18 view .LVU197
 832              	.LBE777:
 833              	.LBE779:
 834              	.LBE793:
  62:dingus_dsp/chorus.h ****         }
 835              		.loc 10 62 13 is_stmt 1 view .LVU198
 836              	.LBB794:
 837              	.LBI781:
 838              		.loc 14 88 14 view .LVU199
 839              	.LBB786:
 840              	.LBI782:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 841              		.loc 16 21 10 view .LVU200
 842              	.LBB784:
  23:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
 843              		.loc 16 23 16 is_stmt 0 view .LVU201
 844 00bc F7EE007A 		vmov.f32	s15, #1.0e+0
  22:dingus_dsp/dingus_math.h ****         return hi;
 845              		.loc 16 22 5 view .LVU202
 846 00c0 B4EEE67A 		vcmpe.f32	s14, s13
 847 00c4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 848 00c8 08D4     		bmi	.L19
  24:dingus_dsp/dingus_math.h ****         return lo;
 849              		.loc 16 24 12 view .LVU203
 850 00ca B4EEE77A 		vcmpe.f32	s14, s15
 851 00ce F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 852              	.LBE784:
 853              	.LBE786:
 854              	.LBE794:
  62:dingus_dsp/chorus.h ****         }
 855              		.loc 10 62 36 view .LVU204
 856 00d2 D4BF     		ite	le
 857 00d4 F1EE477A 		vnegle.f32	s15, s14
 858              	.LBB795:
 859              	.LBB787:
 860              	.LBB785:
  25:dingus_dsp/dingus_math.h ****     } else {
 861              		.loc 16 25 16 view .LVU205
 862 00d8 F0EE667A 		vmovgt.f32	s15, s13
 863              	.LVL40:
 864              	.L19:
  25:dingus_dsp/dingus_math.h ****     } else {
 865              		.loc 16 25 16 view .LVU206
 866              	.LBE785:
 867              	.LBE787:
 868              	.LBB788:
 869              	.LBI788:
  54:dingus_dsp/oscillator.h ****             amp_ = amp;
 870              		.loc 15 54 14 is_stmt 1 view .LVU207
 871              	.LBB789:
 872              		.loc 15 55 13 view .LVU208
 873              		.loc 15 55 18 is_stmt 0 view .LVU209
 874 00dc 07F63C4C 		addw	ip, r7, #3132
 875              	.LBE789:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 42


 876              	.LBE788:
 877              	.LBE795:
 878              	.LBE771:
 879              	.LBE770:
  63:ChorusPetal.cpp **** 
  64:ChorusPetal.cpp **** 		out[0][i] = in[0][i];
 880              		.loc 12 64 22 view .LVU210
 881 00e0 01EB8508 		add	r8, r1, r5, lsl #2
 882              		.loc 12 64 13 view .LVU211
 883 00e4 00EB850E 		add	lr, r0, r5, lsl #2
  65:ChorusPetal.cpp **** 		out[1][i] = in[1][i];
 884              		.loc 12 65 13 view .LVU212
 885 00e8 009B     		ldr	r3, [sp]
 886              	.LBB801:
 887              	.LBB799:
 888              	.LBB796:
 889              	.LBB791:
 890              	.LBB790:
 891              		.loc 15 55 18 view .LVU213
 892 00ea CCED007A 		vstr.32	s15, [ip]
 893              	.LVL41:
 894              		.loc 15 55 18 view .LVU214
 895              	.LBE790:
 896              	.LBE791:
 897              	.LBE796:
 898              	.LBE799:
 899              	.LBE801:
  64:ChorusPetal.cpp **** 		out[1][i] = in[1][i];
 900              		.loc 12 64 3 is_stmt 1 view .LVU215
 901              		.loc 12 65 22 is_stmt 0 view .LVU216
 902 00ee 02EB850C 		add	ip, r2, r5, lsl #2
  64:ChorusPetal.cpp **** 		out[1][i] = in[1][i];
 903              		.loc 12 64 22 view .LVU217
 904 00f2 D8F800A0 		ldr	r10, [r8]	@ float
 905              		.loc 12 65 13 view .LVU218
 906 00f6 03EB8509 		add	r9, r3, r5, lsl #2
 907 00fa 4FEA850B 		lsl	fp, r5, #2
  64:ChorusPetal.cpp **** 		out[1][i] = in[1][i];
 908              		.loc 12 64 13 view .LVU219
 909 00fe CEF800A0 		str	r10, [lr]	@ float
 910              		.loc 12 65 3 is_stmt 1 view .LVU220
 911              		.loc 12 65 22 is_stmt 0 view .LVU221
 912 0102 DCF800C0 		ldr	ip, [ip]	@ float
 913              		.loc 12 65 13 view .LVU222
 914 0106 C9F800C0 		str	ip, [r9]	@ float
  66:ChorusPetal.cpp **** 
  67:ChorusPetal.cpp **** 		if (g_param.effectOn) 
 915              		.loc 12 67 3 is_stmt 1 view .LVU223
 916              	.LBB802:
 917 010a 94F800C0 		ldrb	ip, [r4]	@ zero_extendqisi2
 918 010e BCF1000F 		cmp	ip, #0
 919 0112 5FD1     		bne	.L37
 920              		.loc 12 67 3 is_stmt 0 view .LVU224
 921              	.LBE802:
 922              	.LBE712:
  59:ChorusPetal.cpp **** 	{
 923              		.loc 12 59 2 is_stmt 1 discriminator 2 view .LVU225
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 43


 924 0114 0135     		adds	r5, r5, #1
 925              	.LVL42:
  59:ChorusPetal.cpp **** 	{
 926              		.loc 12 59 23 discriminator 2 view .LVU226
 927 0116 019B     		ldr	r3, [sp, #4]
 928 0118 AB42     		cmp	r3, r5
 929 011a 00F06981 		beq	.L11
 930              	.LVL43:
 931              	.L21:
 932              	.LBB1018:
  61:ChorusPetal.cpp **** 		g_chorus.SetDepth(g_param.depth.GetNextValue());
 933              		.loc 12 61 3 view .LVU227
 934              	.LBB1006:
 935              	.LBI1006:
  56:dingus_dsp/smooth_value.h ****             FloatType prev = curr_;
 936              		.loc 13 56 19 view .LVU228
 937              	.LBB1007:
 938              	.LBB1008:
 939              	.LBB1009:
  49:dingus_dsp/smooth_value.h ****                 curr_ += delta_;
 940              		.loc 13 49 17 is_stmt 0 view .LVU229
 941 011e D4F824C0 		ldr	ip, [r4, #36]
 942              	.LBE1009:
 943              	.LBE1008:
  57:dingus_dsp/smooth_value.h ****             NextValue();
 944              		.loc 13 57 23 view .LVU230
 945 0122 94ED057A 		vldr.32	s14, [r4, #20]
 946              	.LVL44:
 947              	.LBB1011:
 948              	.LBI1008:
  48:dingus_dsp/smooth_value.h ****             if (counter_ > 0) {
 949              		.loc 13 48 14 is_stmt 1 view .LVU231
 950              	.LBB1010:
  49:dingus_dsp/smooth_value.h ****                 curr_ += delta_;
 951              		.loc 13 49 13 is_stmt 0 view .LVU232
 952 0126 BCF1000F 		cmp	ip, #0
 953 012a 09DD     		ble	.L13
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 954              		.loc 13 50 23 view .LVU233
 955 012c D4ED077A 		vldr.32	s15, [r4, #28]
  51:dingus_dsp/smooth_value.h ****             } 
 956              		.loc 13 51 17 view .LVU234
 957 0130 0CF1FF3C 		add	ip, ip, #-1
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 958              		.loc 13 50 23 view .LVU235
 959 0134 77EE877A 		vadd.f32	s15, s15, s14
  51:dingus_dsp/smooth_value.h ****             } 
 960              		.loc 13 51 17 view .LVU236
 961 0138 C4F824C0 		str	ip, [r4, #36]
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 962              		.loc 13 50 23 view .LVU237
 963 013c C4ED057A 		vstr.32	s15, [r4, #20]
 964              	.L13:
 965              	.LVL45:
  50:dingus_dsp/smooth_value.h ****                 --counter_;
 966              		.loc 13 50 23 view .LVU238
 967              	.LBE1010:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 44


 968              	.LBE1011:
 969              	.LBE1007:
 970              	.LBE1006:
 971              	.LBB1012:
 972              	.LBI713:
  47:dingus_dsp/chorus.h ****             delay_time = .005f + delay_time * 0.025f;
 973              		.loc 10 47 14 is_stmt 1 view .LVU239
 974              	.LBB762:
  48:dingus_dsp/chorus.h ****             delaylines_[0].SetDelayTime(delay_time);
 975              		.loc 10 48 13 view .LVU240
  48:dingus_dsp/chorus.h ****             delaylines_[0].SetDelayTime(delay_time);
 976              		.loc 10 48 24 is_stmt 0 view .LVU241
 977 0140 9FED216A 		vldr.32	s12, .L39+16
 978              	.LBB735:
 979              	.LBB736:
  62:dingus_dsp/multitap_delay.h **** 
 980              		.loc 14 62 39 view .LVU242
 981 0144 06F5636C 		add	ip, r6, #3632
 982              	.LBE736:
 983              	.LBE735:
  48:dingus_dsp/chorus.h ****             delaylines_[0].SetDelayTime(delay_time);
 984              		.loc 10 48 24 view .LVU243
 985 0148 DFED207A 		vldr.32	s15, .L39+20
 986              	.LBB755:
 987              	.LBB751:
 988              	.LBB737:
 989              	.LBB738:
  22:dingus_dsp/dingus_math.h ****         return hi;
 990              		.loc 16 22 5 view .LVU244
 991 014c DFED206A 		vldr.32	s13, .L39+24
 992              	.LBE738:
 993              	.LBE737:
 994              	.LBE751:
 995              	.LBE755:
  48:dingus_dsp/chorus.h ****             delaylines_[0].SetDelayTime(delay_time);
 996              		.loc 10 48 24 view .LVU245
 997 0150 E7EE067A 		vfma.f32	s15, s14, s12
 998              	.LVL46:
  49:dingus_dsp/chorus.h ****             delaylines_[1].SetDelayTime(delay_time);
 999              		.loc 10 49 13 is_stmt 1 view .LVU246
 1000              	.LBB756:
 1001              	.LBI735:
  61:dingus_dsp/multitap_delay.h ****             delay_time = delay_time * sample_rate_;
 1002              		.loc 14 61 14 view .LVU247
 1003              	.LBB752:
  62:dingus_dsp/multitap_delay.h **** 
 1004              		.loc 14 62 24 is_stmt 0 view .LVU248
 1005 0154 9CED007A 		vldr.32	s14, [ip]
 1006 0158 27EE877A 		vmul.f32	s14, s15, s14
 1007              	.LVL47:
 1008              	.LBB741:
 1009              	.LBI737:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 1010              		.loc 16 21 10 is_stmt 1 view .LVU249
 1011              	.LBB739:
  22:dingus_dsp/dingus_math.h ****         return hi;
 1012              		.loc 16 22 5 is_stmt 0 view .LVU250
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 45


 1013 015c B4EEE67A 		vcmpe.f32	s14, s13
 1014 0160 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1015 0164 25DC     		bgt	.L22
  24:dingus_dsp/dingus_math.h ****         return lo;
 1016              		.loc 16 24 12 view .LVU251
 1017 0166 B5EEC07A 		vcmpe.f32	s14, #0
 1018 016a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1019 016e 01D5     		bpl	.L14
 1020              	.LVL48:
  25:dingus_dsp/dingus_math.h ****     } else {
 1021              		.loc 16 25 16 view .LVU252
 1022 0170 9FED137A 		vldr.32	s14, .L39+8
 1023              	.LVL49:
 1024              	.L14:
  25:dingus_dsp/dingus_math.h ****     } else {
 1025              		.loc 16 25 16 view .LVU253
 1026              	.LBE739:
 1027              	.LBE741:
 1028              	.LBB742:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 1029              		.loc 14 70 34 is_stmt 1 view .LVU254
 1030              	.LBB743:
 1031              	.LBB744:
 1032              	.LBI744:
 1033              		.loc 11 185 7 view .LVU255
 1034              	.LBB745:
 1035              	.LBI745:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1036              		.loc 11 55 7 view .LVU256
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1037              		.loc 11 55 7 is_stmt 0 view .LVU257
 1038              	.LBE745:
 1039              	.LBE744:
 1040              	.LBB746:
 1041              	.LBI746:
 1042              		.loc 11 185 7 is_stmt 1 view .LVU258
 1043              	.LBB747:
 1044              	.LBI747:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1045              		.loc 11 55 7 view .LVU259
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1046              		.loc 11 55 7 is_stmt 0 view .LVU260
 1047              	.LBE747:
 1048              	.LBE746:
  71:dingus_dsp/multitap_delay.h ****                 delay_taps_[i] = tap_time - spread;
 1049              		.loc 14 71 47 view .LVU261
 1050 0174 06F5626C 		add	ip, r6, #3616
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 1051              		.loc 14 72 43 view .LVU262
 1052 0178 DFED125A 		vldr.32	s11, .L39+12
 1053              	.LBE743:
 1054              	.LBE742:
 1055              	.LBE752:
 1056              	.LBE756:
 1057              	.LBB757:
 1058              	.LBB732:
 1059              	.LBB729:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 46


 1060              	.LBB719:
  22:dingus_dsp/dingus_math.h ****         return hi;
 1061              		.loc 16 22 5 view .LVU263
 1062 017c 9FED146A 		vldr.32	s12, .L39+24
 1063              	.LBE719:
 1064              	.LBE729:
 1065              	.LBE732:
 1066              	.LBE757:
 1067              	.LBB758:
 1068              	.LBB753:
 1069              	.LBB749:
 1070              	.LBB748:
  71:dingus_dsp/multitap_delay.h ****                 delay_taps_[i] = tap_time - spread;
 1071              		.loc 14 71 47 view .LVU264
 1072 0180 DCED006A 		vldr.32	s13, [ip]
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 1073              		.loc 14 72 32 view .LVU265
 1074 0184 06F61C6C 		addw	ip, r6, #3612
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 1075              		.loc 14 72 43 view .LVU266
 1076 0188 66EEC76A 		vnmul.f32	s13, s13, s14
 1077 018c A6EEA57A 		vfma.f32	s14, s13, s11
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 1078              		.loc 14 72 32 view .LVU267
 1079 0190 8CED007A 		vstr.32	s14, [ip]
  72:dingus_dsp/multitap_delay.h ****                 tap_time += tap_spacing;
 1080              		.loc 14 72 32 view .LVU268
 1081              	.LBE748:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 1082              		.loc 14 70 13 is_stmt 1 view .LVU269
 1083              	.LVL50:
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 1084              		.loc 14 70 34 view .LVU270
  70:dingus_dsp/multitap_delay.h ****                 float spread = tap_spread_[i] * tap_spacing * 0.1f;
 1085              		.loc 14 70 34 is_stmt 0 view .LVU271
 1086              	.LBE749:
 1087              	.LBE753:
 1088              	.LBE758:
  50:dingus_dsp/chorus.h ****         }
 1089              		.loc 10 50 13 is_stmt 1 view .LVU272
 1090              	.LBB759:
 1091              	.LBI715:
  61:dingus_dsp/multitap_delay.h ****             delay_time = delay_time * sample_rate_;
 1092              		.loc 14 61 14 view .LVU273
 1093              	.LBB733:
  62:dingus_dsp/multitap_delay.h **** 
 1094              		.loc 14 62 39 is_stmt 0 view .LVU274
 1095 0194 07F6644C 		addw	ip, r7, #3172
  62:dingus_dsp/multitap_delay.h **** 
 1096              		.loc 14 62 24 view .LVU275
 1097 0198 9CED007A 		vldr.32	s14, [ip]
 1098 019c 67EE877A 		vmul.f32	s15, s15, s14
 1099              	.LVL51:
 1100              	.LBB730:
 1101              	.LBI717:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 1102              		.loc 16 21 10 is_stmt 1 view .LVU276
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 47


 1103              	.LBB720:
  22:dingus_dsp/dingus_math.h ****         return hi;
 1104              		.loc 16 22 5 is_stmt 0 view .LVU277
 1105 01a0 F4EEC67A 		vcmpe.f32	s15, s12
 1106 01a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1107 01a8 7FF74BAF 		ble	.L38
 1108              	.LVL52:
  23:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
 1109              		.loc 16 23 16 view .LVU278
 1110 01ac F0EE467A 		vmov.f32	s15, s12
 1111 01b0 4EE7     		b	.L15
 1112              	.LVL53:
 1113              	.L22:
  23:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
 1114              		.loc 16 23 16 view .LVU279
 1115              	.LBE720:
 1116              	.LBE730:
 1117              	.LBE733:
 1118              	.LBE759:
 1119              	.LBB760:
 1120              	.LBB754:
 1121              	.LBB750:
 1122              	.LBB740:
 1123 01b2 B0EE667A 		vmov.f32	s14, s13
 1124 01b6 DDE7     		b	.L14
 1125              	.L40:
 1126              		.align	2
 1127              	.L39:
 1128 01b8 00E00200 		.word	_ZL8g_chorus+188416
 1129 01bc 00000000 		.word	.LANCHOR1
 1130 01c0 00000000 		.word	0
 1131 01c4 CDCCCC3D 		.word	1036831949
 1132 01c8 CDCCCC3C 		.word	1020054733
 1133 01cc 0AD7A33B 		.word	1000593162
 1134 01d0 00803B47 		.word	1195081728
 1135              	.LVL54:
 1136              	.L37:
  23:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
 1137              		.loc 16 23 16 view .LVU280
 1138              	.LBE740:
 1139              	.LBE750:
 1140              	.LBE754:
 1141              	.LBE760:
 1142              	.LBE762:
 1143              	.LBE1012:
 1144              	.LBB1013:
 1145              	.LBB803:
  68:ChorusPetal.cpp **** 		{
  69:ChorusPetal.cpp **** 			float processed_l = g_chorus.Process(in[0][i], 0);
 1146              		.loc 12 69 4 is_stmt 1 view .LVU281
 1147              	.LBB804:
 1148              	.LBI804:
  29:dingus_dsp/chorus.h ****             float output = delaylines_[channel].Process(input);
 1149              		.loc 10 29 15 view .LVU282
 1150              	.LBB805:
  30:dingus_dsp/chorus.h ****             return output;
 1151              		.loc 10 30 13 view .LVU283
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 48


 1152              	.LBB806:
 1153              	.LBI806:
  35:dingus_dsp/multitap_delay.h ****             float output = 0.f;
 1154              		.loc 14 35 15 view .LVU284
 1155              	.LBB807:
  37:dingus_dsp/multitap_delay.h ****             delay_line_.Write(input + feedback);
 1156              		.loc 14 37 30 is_stmt 0 view .LVU285
 1157 01d4 06F62C63 		addw	r3, r6, #3628
  38:dingus_dsp/multitap_delay.h **** 
 1158              		.loc 14 38 30 view .LVU286
 1159 01d8 D8ED007A 		vldr.32	s15, [r8]
 1160              	.LBB808:
 1161              	.LBB809:
 1162              		.file 18 "dingus_dsp/delayline.h"
   1:dingus_dsp/delayline.h **** /*
   2:dingus_dsp/delayline.h ****   ==============================================================================
   3:dingus_dsp/delayline.h **** 
   4:dingus_dsp/delayline.h ****     File: delayline.h
   5:dingus_dsp/delayline.h ****     Author: Daniel Schwartz
   6:dingus_dsp/delayline.h ****     Description: A simple fractional delay line using linear interpolation.
   7:dingus_dsp/delayline.h **** 
   8:dingus_dsp/delayline.h ****   ==============================================================================
   9:dingus_dsp/delayline.h **** */
  10:dingus_dsp/delayline.h **** 
  11:dingus_dsp/delayline.h **** #pragma once
  12:dingus_dsp/delayline.h **** #ifndef DINGUS_DELAYLINE_H
  13:dingus_dsp/delayline.h **** #define DINGUS_DELAYLINE_H
  14:dingus_dsp/delayline.h **** 
  15:dingus_dsp/delayline.h **** #include <array>
  16:dingus_dsp/delayline.h **** 
  17:dingus_dsp/delayline.h **** namespace dingus_dsp
  18:dingus_dsp/delayline.h **** {
  19:dingus_dsp/delayline.h **** 
  20:dingus_dsp/delayline.h **** // Takes a float sample type and the max delay time (in samples) which 
  21:dingus_dsp/delayline.h **** // determines the size of the buffer.
  22:dingus_dsp/delayline.h **** template <typename SampleType, size_t max_delay>
  23:dingus_dsp/delayline.h **** class DelayLine 
  24:dingus_dsp/delayline.h **** {
  25:dingus_dsp/delayline.h ****     public:
  26:dingus_dsp/delayline.h ****         DelayLine() {
  27:dingus_dsp/delayline.h ****             Clear();
  28:dingus_dsp/delayline.h ****         }
  29:dingus_dsp/delayline.h **** 
  30:dingus_dsp/delayline.h ****         ~DelayLine() {}
  31:dingus_dsp/delayline.h **** 
  32:dingus_dsp/delayline.h ****         // Returns the buffer size.
  33:dingus_dsp/delayline.h ****         size_t Size() {
  34:dingus_dsp/delayline.h ****             return max_delay;
  35:dingus_dsp/delayline.h ****         }
  36:dingus_dsp/delayline.h **** 
  37:dingus_dsp/delayline.h ****         // Clears the contents of the buffer and resets the position.
  38:dingus_dsp/delayline.h ****         void Clear() {
  39:dingus_dsp/delayline.h ****             buffer_.fill(SampleType(0));
  40:dingus_dsp/delayline.h ****             pos_ = 0;
  41:dingus_dsp/delayline.h ****         }
  42:dingus_dsp/delayline.h **** 
  43:dingus_dsp/delayline.h ****         // Writes the given value to the buffer.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 49


  44:dingus_dsp/delayline.h ****         inline void Write(SampleType value) {
  45:dingus_dsp/delayline.h ****             buffer_[pos_] = value;
 1163              		.loc 18 45 20 view .LVU287
 1164 01dc D6F8002E 		ldr	r2, [r6, #3584]
  46:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1165              		.loc 18 46 38 view .LVU288
 1166 01e0 4BF67F3A 		movw	r10, #47999
 1167              	.LBE809:
 1168              	.LBE808:
  38:dingus_dsp/multitap_delay.h **** 
 1169              		.loc 14 38 30 view .LVU289
 1170 01e4 D3ED006A 		vldr.32	s13, [r3]
 1171              	.LBB818:
 1172              	.LBB812:
 1173              		.loc 18 46 43 view .LVU290
 1174 01e8 4BF68039 		movw	r9, #48000
 1175              	.LBE812:
 1176              	.LBE818:
  38:dingus_dsp/multitap_delay.h **** 
 1177              		.loc 14 38 30 view .LVU291
 1178 01ec 0093     		str	r3, [sp]
  37:dingus_dsp/multitap_delay.h ****             delay_line_.Write(input + feedback);
 1179              		.loc 14 37 45 view .LVU292
 1180 01ee 06F62863 		addw	r3, r6, #3624
 1181              	.LBB819:
 1182              	.LBB813:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1183              		.loc 18 45 27 view .LVU293
 1184 01f2 8449     		ldr	r1, .L41
 1185              	.LBE813:
 1186              	.LBE819:
 1187              	.LBB820:
 1188              	.LBB821:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1189              		.loc 14 45 43 view .LVU294
 1190 01f4 F6EE009A 		vmov.f32	s19, #5.0e-1
 1191              	.LBE821:
 1192              	.LBE820:
  38:dingus_dsp/multitap_delay.h **** 
 1193              		.loc 14 38 30 view .LVU295
 1194 01f8 93ED007A 		vldr.32	s14, [r3]
 1195              	.LBB855:
 1196              	.LBB814:
 1197              		.loc 18 46 38 view .LVU296
 1198 01fc 02EB0A03 		add	r3, r2, r10
 1199              		.loc 18 46 43 view .LVU297
 1200 0200 DFF81082 		ldr	r8, .L41+16
 1201              	.LVL55:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1202              		.loc 18 45 27 view .LVU298
 1203 0204 01EB8202 		add	r2, r1, r2, lsl #2
 1204              	.LBE814:
 1205              	.LBE855:
  38:dingus_dsp/multitap_delay.h **** 
 1206              		.loc 14 38 30 view .LVU299
 1207 0208 E6EE877A 		vfma.f32	s15, s13, s14
 1208              	.LVL56:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 50


 1209              	.LBB856:
 1210              	.LBI808:
  44:dingus_dsp/delayline.h ****             buffer_[pos_] = value;
 1211              		.loc 18 44 21 is_stmt 1 view .LVU300
 1212              	.LBB815:
 1213              	.LBB810:
 1214              	.LBI810:
 1215              		.loc 11 185 7 view .LVU301
 1216              	.LBB811:
 1217              	.LBI811:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1218              		.loc 11 55 7 view .LVU302
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1219              		.loc 11 55 7 is_stmt 0 view .LVU303
 1220              	.LBE811:
 1221              	.LBE810:
 1222              	.LBE815:
 1223              	.LBE856:
 1224              	.LBB857:
 1225              	.LBB846:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1226              		.loc 14 45 24 view .LVU304
 1227 020c 9FED7E9A 		vldr.32	s18, .L41+4
 1228              	.LBB822:
 1229              	.LBB823:
  47:dingus_dsp/delayline.h ****         }
  48:dingus_dsp/delayline.h **** 
  49:dingus_dsp/delayline.h ****         // Reads from the buffer given a delay time in samples.
  50:dingus_dsp/delayline.h ****         // Performs linear interpolation on fractional times.
  51:dingus_dsp/delayline.h ****         inline SampleType Read(SampleType delay) const {
  52:dingus_dsp/delayline.h ****             SampleType delay_pos = static_cast<SampleType>(pos_) + delay + SampleType(1);
 1230              		.loc 18 52 24 view .LVU305
 1231 0210 F7EE008A 		vmov.f32	s17, #1.0e+0
 1232              	.LBE823:
 1233              	.LBE822:
 1234              	.LBE846:
 1235              	.LBE857:
 1236              	.LBE807:
 1237              	.LBE806:
 1238              	.LBE805:
 1239              	.LBE804:
 1240              	.LBE803:
 1241              	.LBE1013:
 1242              	.LBE1018:
  59:ChorusPetal.cpp **** 	{
 1243              		.loc 12 59 2 view .LVU306
 1244 0214 0135     		adds	r5, r5, #1
 1245              	.LVL57:
 1246              	.LBB1019:
 1247              	.LBB1014:
 1248              	.LBB1003:
 1249              	.LBB889:
 1250              	.LBB882:
 1251              	.LBB875:
 1252              	.LBB868:
 1253              	.LBB858:
 1254              	.LBB816:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 51


  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1255              		.loc 18 45 27 view .LVU307
 1256 0216 C2ED007A 		vstr.32	s15, [r2]
 1257              	.LVL58:
  46:dingus_dsp/delayline.h ****         }
 1258              		.loc 18 46 43 view .LVU308
 1259 021a A8FB0302 		umull	r0, r2, r8, r3
 1260              	.LBE816:
 1261              	.LBE858:
  41:dingus_dsp/multitap_delay.h **** 
 1262              		.loc 14 41 43 view .LVU309
 1263 021e 7B48     		ldr	r0, .L41+8
 1264              	.LBB859:
 1265              	.LBB817:
  46:dingus_dsp/delayline.h ****         }
 1266              		.loc 18 46 43 view .LVU310
 1267 0220 920A     		lsrs	r2, r2, #10
 1268 0222 09FB1233 		mls	r3, r9, r2, r3
  46:dingus_dsp/delayline.h ****         }
 1269              		.loc 18 46 18 view .LVU311
 1270 0226 C6F8003E 		str	r3, [r6, #3584]
 1271              	.LVL59:
  46:dingus_dsp/delayline.h ****         }
 1272              		.loc 18 46 18 view .LVU312
 1273              	.LBE817:
 1274              	.LBE859:
  41:dingus_dsp/multitap_delay.h **** 
 1275              		.loc 14 41 43 view .LVU313
 1276 022a FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator7ProcessEv
 1277              	.LVL60:
 1278              	.LBB860:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1279              		.loc 14 43 13 is_stmt 1 view .LVU314
 1280              	.LBB847:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1281              		.loc 14 43 24 is_stmt 0 view .LVU315
 1282 022e 06F61C63 		addw	r3, r6, #3612
 1283              	.LBB837:
 1284              	.LBB828:
 1285              		.loc 18 52 36 view .LVU316
 1286 0232 D6F8002E 		ldr	r2, [r6, #3584]
 1287              	.LBE828:
 1288              	.LBE837:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1289              		.loc 14 43 24 view .LVU317
 1290 0236 D3ED007A 		vldr.32	s15, [r3]
 1291              	.LVL61:
  44:dingus_dsp/multitap_delay.h ****                 output += delay_line_.Read(tap + offset) * gain;
 1292              		.loc 14 44 36 view .LVU318
 1293 023a 20EE270A 		vmul.f32	s0, s0, s15
 1294              	.LVL62:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1295              		.loc 14 45 43 view .LVU319
 1296 023e E0EE297A 		vfma.f32	s15, s0, s19
 1297              	.LVL63:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1298              		.loc 14 45 43 view .LVU320
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 52


 1299 0242 B0EE677A 		vmov.f32	s14, s15
 1300              	.LVL64:
 1301              	.LBB838:
 1302              	.LBI822:
  51:dingus_dsp/delayline.h ****             SampleType delay_pos = static_cast<SampleType>(pos_) + delay + SampleType(1);
 1303              		.loc 18 51 27 is_stmt 1 view .LVU321
 1304              	.LBB829:
 1305              		.loc 18 52 36 is_stmt 0 view .LVU322
 1306 0246 07EE902A 		vmov	s15, r2	@ int
 1307              	.LBE829:
 1308              	.LBE838:
 1309              	.LBE847:
 1310              	.LBE860:
 1311              	.LBE868:
 1312              	.LBE875:
 1313              	.LBE882:
 1314              	.LBE889:
  70:ChorusPetal.cpp **** 			float processed_r = g_chorus.Process(in[1][i], 1);
 1315              		.loc 12 70 40 view .LVU323
 1316 024a 029A     		ldr	r2, [sp, #8]
 1317              	.LBB890:
 1318              	.LBB883:
 1319              	.LBB876:
 1320              	.LBB869:
 1321              	.LBB861:
 1322              	.LBB848:
 1323              	.LBB839:
 1324              	.LBB830:
 1325              		.loc 18 52 36 view .LVU324
 1326 024c F8EE677A 		vcvt.f32.u32	s15, s15
 1327              	.LBE830:
 1328              	.LBE839:
 1329              	.LBE848:
 1330              	.LBE861:
 1331              	.LBE869:
 1332              	.LBE876:
 1333              	.LBE883:
 1334              	.LBE890:
 1335              		.loc 12 70 40 view .LVU325
 1336 0250 5168     		ldr	r1, [r2, #4]
 1337              	.LBB891:
 1338              	.LBB892:
 1339              	.LBB893:
 1340              	.LBB894:
 1341              	.LBB895:
 1342              	.LBB896:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1343              		.loc 18 45 20 view .LVU326
 1344 0252 D7F8342C 		ldr	r2, [r7, #3124]
 1345              	.LBE896:
 1346              	.LBE895:
 1347              	.LBE894:
 1348              	.LBE893:
 1349              	.LBE892:
 1350              	.LBE891:
 1351              	.LBB985:
 1352              	.LBB884:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 53


 1353              	.LBB877:
 1354              	.LBB870:
 1355              	.LBB862:
 1356              	.LBB849:
 1357              	.LBB840:
 1358              	.LBB831:
 1359              		.loc 18 52 66 view .LVU327
 1360 0256 77EE877A 		vadd.f32	s15, s15, s14
 1361              	.LBE831:
 1362              	.LBE840:
 1363              	.LBE849:
 1364              	.LBE862:
 1365              	.LBE870:
 1366              	.LBE877:
 1367              	.LBE884:
 1368              	.LBE985:
 1369              		.loc 12 70 40 view .LVU328
 1370 025a 01EB0B03 		add	r3, r1, fp
 1371              	.LVL65:
 1372              	.LBB986:
 1373              	.LBB885:
 1374              	.LBB878:
 1375              	.LBB871:
 1376              	.LBB863:
 1377              	.LBB850:
 1378              	.LBB841:
 1379              	.LBB832:
  53:dingus_dsp/delayline.h **** 
  54:dingus_dsp/delayline.h ****             size_t a = static_cast<size_t>(delay_pos);
  55:dingus_dsp/delayline.h ****             size_t b = (a + 1);
  56:dingus_dsp/delayline.h **** 
  57:dingus_dsp/delayline.h ****             SampleType frac = delay_pos - static_cast<SampleType>(a);
  58:dingus_dsp/delayline.h **** 
  59:dingus_dsp/delayline.h ****             SampleType a_value = buffer_[a % max_delay];
 1380              		.loc 18 59 24 view .LVU329
 1381 025e 6949     		ldr	r1, .L41
 1382              	.LBE832:
 1383              	.LBE841:
 1384              	.LBE850:
 1385              	.LBE863:
 1386              	.LBE871:
 1387              	.LBE878:
 1388              	.LBE885:
 1389              	.LBE986:
 1390              	.LBB987:
 1391              	.LBB972:
 1392              	.LBB959:
 1393              	.LBB946:
 1394              	.LBB902:
 1395              	.LBB899:
  46:dingus_dsp/delayline.h ****         }
 1396              		.loc 18 46 38 view .LVU330
 1397 0260 9244     		add	r10, r10, r2
 1398              	.LBE899:
 1399              	.LBE902:
 1400              	.LBE946:
 1401              	.LBE959:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 54


 1402              	.LBE972:
 1403              	.LBE987:
 1404              		.loc 12 70 40 view .LVU331
 1405 0262 0493     		str	r3, [sp, #16]
 1406              	.LBB988:
 1407              	.LBB886:
 1408              	.LBB879:
 1409              	.LBB872:
 1410              	.LBB864:
 1411              	.LBB851:
 1412              	.LBB842:
 1413              	.LBB833:
  52:dingus_dsp/delayline.h **** 
 1414              		.loc 18 52 24 view .LVU332
 1415 0264 77EEA87A 		vadd.f32	s15, s15, s17
 1416              	.LVL66:
  54:dingus_dsp/delayline.h ****             size_t b = (a + 1);
 1417              		.loc 18 54 20 view .LVU333
 1418 0268 BCEEE77A 		vcvt.u32.f32	s14, s15
 1419              	.LVL67:
  54:dingus_dsp/delayline.h ****             size_t b = (a + 1);
 1420              		.loc 18 54 20 view .LVU334
 1421 026c 17EE103A 		vmov	r3, s14	@ int
 1422              	.LVL68:
 1423              	.LBB824:
 1424              	.LBI824:
 186:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 187:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 188:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr const_reference
 189:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       operator[](size_type __n) const noexcept
 1425              		.loc 11 189 7 is_stmt 1 view .LVU335
 1426              	.LBB825:
 1427              	.LBI825:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1428              		.loc 11 55 7 view .LVU336
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1429              		.loc 11 55 7 is_stmt 0 view .LVU337
 1430              	.LBE825:
 1431              	.LBE824:
  57:dingus_dsp/delayline.h **** 
 1432              		.loc 18 57 43 view .LVU338
 1433 0270 B8EE477A 		vcvt.f32.u32	s14, s14
 1434              		.loc 18 59 41 view .LVU339
 1435 0274 A8FB03EC 		umull	lr, ip, r8, r3
  55:dingus_dsp/delayline.h **** 
 1436              		.loc 18 55 20 view .LVU340
 1437 0278 581C     		adds	r0, r3, #1
 1438              	.LVL69:
  57:dingus_dsp/delayline.h **** 
 1439              		.loc 18 57 24 view .LVU341
 1440 027a 37EEC77A 		vsub.f32	s14, s15, s14
 1441              	.LVL70:
 1442              		.loc 18 59 41 view .LVU342
 1443 027e 4FEA9C2C 		lsr	ip, ip, #10
 1444 0282 09FB1C33 		mls	r3, r9, ip, r3
 1445              	.LVL71:
 1446              		.loc 18 59 24 view .LVU343
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 55


 1447 0286 01EB8303 		add	r3, r1, r3, lsl #2
 1448 028a D3ED007A 		vldr.32	s15, [r3]
 1449              	.LVL72:
 1450              	.LBB826:
 1451              	.LBI826:
 1452              		.loc 11 189 7 is_stmt 1 view .LVU344
 1453              	.LBB827:
 1454              	.LBI827:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1455              		.loc 11 55 7 view .LVU345
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1456              		.loc 11 55 7 is_stmt 0 view .LVU346
 1457              	.LBE827:
 1458              	.LBE826:
  60:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1459              		.loc 18 60 41 view .LVU347
 1460 028e A8FB00C3 		umull	ip, r3, r8, r0
 1461 0292 9B0A     		lsrs	r3, r3, #10
 1462 0294 09FB1303 		mls	r3, r9, r3, r0
 1463              	.LBE833:
 1464              	.LBE842:
 1465              	.LBE851:
 1466              	.LBE864:
 1467              	.LBE872:
 1468              	.LBE879:
 1469              	.LBE886:
 1470              	.LBE988:
 1471              	.LBB989:
 1472              	.LBB973:
 1473              	.LBB960:
 1474              	.LBB947:
  41:dingus_dsp/multitap_delay.h **** 
 1475              		.loc 14 41 43 view .LVU348
 1476 0298 5D48     		ldr	r0, .L41+12
 1477              	.LVL73:
  41:dingus_dsp/multitap_delay.h **** 
 1478              		.loc 14 41 43 view .LVU349
 1479              	.LBE947:
 1480              	.LBE960:
 1481              	.LBE973:
 1482              	.LBE989:
 1483              	.LBB990:
 1484              	.LBB887:
 1485              	.LBB880:
 1486              	.LBB873:
 1487              	.LBB865:
 1488              	.LBB852:
 1489              	.LBB843:
 1490              	.LBB834:
 1491              		.loc 18 60 24 view .LVU350
 1492 029a 01EB8303 		add	r3, r1, r3, lsl #2
 1493              	.LBE834:
 1494              	.LBE843:
 1495              	.LBE852:
 1496              	.LBE865:
  49:dingus_dsp/multitap_delay.h **** 
 1497              		.loc 14 49 26 view .LVU351
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 56


 1498 029e 0099     		ldr	r1, [sp]
 1499              	.LBB866:
 1500              	.LBB853:
 1501              	.LBB844:
 1502              	.LBB835:
  61:dingus_dsp/delayline.h **** 
  62:dingus_dsp/delayline.h ****             return a_value + frac * (b_value - a_value);
 1503              		.loc 18 62 46 view .LVU352
 1504 02a0 D3ED006A 		vldr.32	s13, [r3]
 1505              	.LBE835:
 1506              	.LBE844:
 1507              	.LBE853:
 1508              	.LBE866:
 1509              	.LBE873:
 1510              	.LBE880:
 1511              	.LBE887:
 1512              	.LBE990:
 1513              	.LBB991:
 1514              	.LBB974:
 1515              	.LBB961:
 1516              	.LBB948:
  38:dingus_dsp/multitap_delay.h **** 
 1517              		.loc 14 38 30 view .LVU353
 1518 02a4 049B     		ldr	r3, [sp, #16]
 1519              	.LBE948:
 1520              	.LBE961:
 1521              	.LBE974:
 1522              	.LBE991:
 1523              	.LBB992:
 1524              	.LBB888:
 1525              	.LBB881:
 1526              	.LBB874:
 1527              	.LBB867:
 1528              	.LBB854:
 1529              	.LBB845:
 1530              	.LBB836:
 1531              		.loc 18 62 46 view .LVU354
 1532 02a6 76EEE76A 		vsub.f32	s13, s13, s15
 1533              		.loc 18 62 55 view .LVU355
 1534 02aa E7EE267A 		vfma.f32	s15, s14, s13
 1535              	.LVL74:
 1536              		.loc 18 62 55 view .LVU356
 1537              	.LBE836:
 1538              	.LBE845:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1539              		.loc 14 45 24 view .LVU357
 1540 02ae 37EE898A 		vadd.f32	s16, s15, s18
 1541              	.LVL75:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1542              		.loc 14 45 24 view .LVU358
 1543              	.LBE854:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1544              		.loc 14 43 13 is_stmt 1 view .LVU359
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1545              		.loc 14 43 13 view .LVU360
 1546              	.LBE867:
  49:dingus_dsp/multitap_delay.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 57


 1547              		.loc 14 49 26 is_stmt 0 view .LVU361
 1548 02b2 81ED008A 		vstr.32	s16, [r1]
 1549              	.LVL76:
  49:dingus_dsp/multitap_delay.h **** 
 1550              		.loc 14 49 26 view .LVU362
 1551              	.LBE874:
 1552              	.LBE881:
  31:dingus_dsp/chorus.h ****         }
 1553              		.loc 10 31 13 is_stmt 1 view .LVU363
  31:dingus_dsp/chorus.h ****         }
 1554              		.loc 10 31 13 is_stmt 0 view .LVU364
 1555              	.LBE888:
 1556              	.LBE992:
 1557              		.loc 12 70 4 is_stmt 1 view .LVU365
 1558              	.LBB993:
 1559              	.LBI891:
  29:dingus_dsp/chorus.h ****             float output = delaylines_[channel].Process(input);
 1560              		.loc 10 29 15 view .LVU366
 1561              	.LBB975:
  30:dingus_dsp/chorus.h ****             return output;
 1562              		.loc 10 30 13 view .LVU367
 1563              	.LBB962:
 1564              	.LBI893:
  35:dingus_dsp/multitap_delay.h ****             float output = 0.f;
 1565              		.loc 14 35 15 view .LVU368
 1566              	.LBB949:
  37:dingus_dsp/multitap_delay.h ****             delay_line_.Write(input + feedback);
 1567              		.loc 14 37 30 is_stmt 0 view .LVU369
 1568 02b6 07F54661 		add	r1, r7, #3168
  38:dingus_dsp/multitap_delay.h **** 
 1569              		.loc 14 38 30 view .LVU370
 1570 02ba D3ED007A 		vldr.32	s15, [r3]
  37:dingus_dsp/multitap_delay.h ****             delay_line_.Write(input + feedback);
 1571              		.loc 14 37 45 view .LVU371
 1572 02be 07F65C43 		addw	r3, r7, #3164
  38:dingus_dsp/multitap_delay.h **** 
 1573              		.loc 14 38 30 view .LVU372
 1574 02c2 D1ED006A 		vldr.32	s13, [r1]
 1575 02c6 93ED007A 		vldr.32	s14, [r3]
 1576 02ca 0491     		str	r1, [sp, #16]
 1577              	.LBB903:
 1578              	.LBB900:
  46:dingus_dsp/delayline.h ****         }
 1579              		.loc 18 46 43 view .LVU373
 1580 02cc A8FB0A13 		umull	r1, r3, r8, r10
 1581              	.LBE900:
 1582              	.LBE903:
  38:dingus_dsp/multitap_delay.h **** 
 1583              		.loc 14 38 30 view .LVU374
 1584 02d0 E6EE877A 		vfma.f32	s15, s13, s14
 1585              	.LVL77:
 1586              	.LBB904:
 1587              	.LBI895:
  44:dingus_dsp/delayline.h ****             buffer_[pos_] = value;
 1588              		.loc 18 44 21 is_stmt 1 view .LVU375
 1589              	.LBB901:
 1590              	.LBB897:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 58


 1591              	.LBI897:
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 1592              		.loc 11 185 7 view .LVU376
 1593              	.LBB898:
 1594              	.LBI898:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1595              		.loc 11 55 7 view .LVU377
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1596              		.loc 11 55 7 is_stmt 0 view .LVU378
 1597              	.LBE898:
 1598              	.LBE897:
  46:dingus_dsp/delayline.h ****         }
 1599              		.loc 18 46 43 view .LVU379
 1600 02d4 9B0A     		lsrs	r3, r3, #10
 1601 02d6 09FB13A3 		mls	r3, r9, r3, r10
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 1602              		.loc 18 45 27 view .LVU380
 1603 02da 06F6346A 		addw	r10, r6, #3636
 1604 02de 0AEB8202 		add	r2, r10, r2, lsl #2
 1605 02e2 C2ED007A 		vstr.32	s15, [r2]
 1606              	.LVL78:
  46:dingus_dsp/delayline.h ****         }
 1607              		.loc 18 46 18 view .LVU381
 1608 02e6 C7F8343C 		str	r3, [r7, #3124]
 1609              	.LVL79:
  46:dingus_dsp/delayline.h ****         }
 1610              		.loc 18 46 18 view .LVU382
 1611              	.LBE901:
 1612              	.LBE904:
  41:dingus_dsp/multitap_delay.h **** 
 1613              		.loc 14 41 43 view .LVU383
 1614 02ea FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator7ProcessEv
 1615              	.LVL80:
 1616              	.LBB905:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1617              		.loc 14 43 13 is_stmt 1 view .LVU384
 1618              	.LBB906:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1619              		.loc 14 43 24 is_stmt 0 view .LVU385
 1620 02ee 07F54563 		add	r3, r7, #3152
 1621              	.LBB907:
 1622              	.LBB908:
  52:dingus_dsp/delayline.h **** 
 1623              		.loc 18 52 36 view .LVU386
 1624 02f2 D7F8341C 		ldr	r1, [r7, #3124]
 1625              	.LBE908:
 1626              	.LBE907:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1627              		.loc 14 43 24 view .LVU387
 1628 02f6 93ED007A 		vldr.32	s14, [r3]
 1629              	.LVL81:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1630              		.loc 14 43 24 view .LVU388
 1631              	.LBE906:
 1632              	.LBE905:
 1633              	.LBE949:
 1634              	.LBE962:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 59


 1635              	.LBE975:
 1636              	.LBE993:
  71:ChorusPetal.cpp **** 
  72:ChorusPetal.cpp **** 			out[0][i] = in[0][i] * (1.f - g_param.mix) + (processed_l - processed_r) * g_param.mix;
 1637              		.loc 12 72 23 view .LVU389
 1638 02fa 029B     		ldr	r3, [sp, #8]
 1639              	.LBB994:
 1640              	.LBB976:
 1641              	.LBB963:
 1642              	.LBB950:
 1643              	.LBB937:
 1644              	.LBB928:
  44:dingus_dsp/multitap_delay.h ****                 output += delay_line_.Read(tap + offset) * gain;
 1645              		.loc 14 44 36 view .LVU390
 1646 02fc 20EE070A 		vmul.f32	s0, s0, s14
 1647              	.LVL82:
  44:dingus_dsp/multitap_delay.h ****                 output += delay_line_.Read(tap + offset) * gain;
 1648              		.loc 14 44 36 view .LVU391
 1649              	.LBE928:
 1650              	.LBE937:
 1651              	.LBE950:
 1652              	.LBE963:
 1653              	.LBE976:
 1654              	.LBE994:
 1655              		.loc 12 72 12 view .LVU392
 1656 0300 039A     		ldr	r2, [sp, #12]
 1657              	.LBB995:
 1658              	.LBB977:
 1659              	.LBB964:
 1660              	.LBB951:
 1661              	.LBB938:
 1662              	.LBB929:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1663              		.loc 14 45 43 view .LVU393
 1664 0302 F0EE477A 		vmov.f32	s15, s14
 1665              	.LBB920:
 1666              	.LBB913:
  52:dingus_dsp/delayline.h **** 
 1667              		.loc 18 52 36 view .LVU394
 1668 0306 07EE101A 		vmov	s14, r1	@ int
 1669              	.LVL83:
  52:dingus_dsp/delayline.h **** 
 1670              		.loc 18 52 36 view .LVU395
 1671              	.LBE913:
 1672              	.LBE920:
 1673              	.LBE929:
 1674              	.LBE938:
 1675              	.LBE951:
 1676              	.LBE964:
 1677              	.LBE977:
 1678              	.LBE995:
 1679              		.loc 12 72 23 view .LVU396
 1680 030a 1968     		ldr	r1, [r3]
 1681              	.LBB996:
 1682              	.LBB978:
 1683              	.LBB965:
 1684              	.LBB952:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 60


 1685              	.LBB939:
 1686              	.LBB930:
 1687              	.LBB921:
 1688              	.LBB914:
  52:dingus_dsp/delayline.h **** 
 1689              		.loc 18 52 36 view .LVU397
 1690 030c B8EE477A 		vcvt.f32.u32	s14, s14
 1691              	.LBE914:
 1692              	.LBE921:
 1693              	.LBE930:
 1694              	.LBE939:
 1695              	.LBE952:
 1696              	.LBE965:
 1697              	.LBE978:
 1698              	.LBE996:
 1699              		.loc 12 72 12 view .LVU398
 1700 0310 1068     		ldr	r0, [r2]
 1701              	.LBB997:
 1702              	.LBB979:
 1703              	.LBB966:
 1704              	.LBB953:
 1705              	.LBB940:
 1706              	.LBB931:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1707              		.loc 14 45 43 view .LVU399
 1708 0312 E0EE297A 		vfma.f32	s15, s0, s19
 1709              	.LVL84:
 1710              	.LBB922:
 1711              	.LBI907:
  51:dingus_dsp/delayline.h ****             SampleType delay_pos = static_cast<SampleType>(pos_) + delay + SampleType(1);
 1712              		.loc 18 51 27 is_stmt 1 view .LVU400
 1713              	.LBE922:
 1714              	.LBE931:
 1715              	.LBE940:
 1716              	.LBE953:
 1717              	.LBE966:
 1718              	.LBE979:
 1719              	.LBE997:
 1720              		.loc 12 72 23 is_stmt 0 view .LVU401
 1721 0316 01EB0B0C 		add	ip, r1, fp
  73:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1722              		.loc 12 73 23 view .LVU402
 1723 031a 5A68     		ldr	r2, [r3, #4]
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1724              		.loc 12 72 23 view .LVU403
 1725 031c CDF814C0 		str	ip, [sp, #20]
 1726              		.loc 12 73 12 view .LVU404
 1727 0320 039B     		ldr	r3, [sp, #12]
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1728              		.loc 12 72 42 view .LVU405
 1729 0322 94ED016A 		vldr.32	s12, [r4, #4]
 1730              		.loc 12 73 12 view .LVU406
 1731 0326 5B68     		ldr	r3, [r3, #4]
 1732              	.LBB998:
 1733              	.LBB980:
 1734              	.LBB967:
 1735              	.LBB954:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 61


 1736              	.LBB941:
 1737              	.LBB932:
 1738              	.LBB923:
 1739              	.LBB915:
  52:dingus_dsp/delayline.h **** 
 1740              		.loc 18 52 66 view .LVU407
 1741 0328 37EE277A 		vadd.f32	s14, s14, s15
 1742              	.LBE915:
 1743              	.LBE923:
 1744              	.LBE932:
 1745              	.LBE941:
 1746              	.LBE954:
 1747              	.LBE967:
 1748              	.LBE980:
 1749              	.LBE998:
 1750              		.loc 12 73 12 view .LVU408
 1751 032c 0093     		str	r3, [sp]
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1752              		.loc 12 72 32 view .LVU409
 1753 032e 78EEC65A 		vsub.f32	s11, s17, s12
 1754              	.LBB999:
 1755              	.LBB981:
 1756              	.LBB968:
 1757              	.LBB955:
 1758              	.LBB942:
 1759              	.LBB933:
 1760              	.LBB924:
 1761              	.LBB916:
  52:dingus_dsp/delayline.h **** 
 1762              		.loc 18 52 24 view .LVU410
 1763 0332 37EE287A 		vadd.f32	s14, s14, s17
 1764              	.LVL85:
  54:dingus_dsp/delayline.h ****             size_t b = (a + 1);
 1765              		.loc 18 54 20 view .LVU411
 1766 0336 FCEEC77A 		vcvt.u32.f32	s15, s14
 1767              	.LVL86:
 1768              	.LBB909:
 1769              	.LBI909:
 1770              		.loc 11 189 7 is_stmt 1 view .LVU412
 1771              	.LBB910:
 1772              	.LBI910:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1773              		.loc 11 55 7 view .LVU413
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1774              		.loc 11 55 7 is_stmt 0 view .LVU414
 1775              	.LBE910:
 1776              	.LBE909:
  55:dingus_dsp/delayline.h **** 
 1777              		.loc 18 55 20 view .LVU415
 1778 033a 17EE90CA 		vmov	ip, s15	@ int
  57:dingus_dsp/delayline.h **** 
 1779              		.loc 18 57 43 view .LVU416
 1780 033e F8EE676A 		vcvt.f32.u32	s13, s15
  55:dingus_dsp/delayline.h **** 
 1781              		.loc 18 55 20 view .LVU417
 1782 0342 0CF1010E 		add	lr, ip, #1
 1783              	.LVL87:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 62


  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1784              		.loc 18 59 41 view .LVU418
 1785 0346 A8FB0C3C 		umull	r3, ip, r8, ip
  57:dingus_dsp/delayline.h **** 
 1786              		.loc 18 57 24 view .LVU419
 1787 034a 37EE667A 		vsub.f32	s14, s14, s13
 1788              	.LVL88:
  60:dingus_dsp/delayline.h **** 
 1789              		.loc 18 60 41 view .LVU420
 1790 034e A8FB0E38 		umull	r3, r8, r8, lr
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1791              		.loc 18 59 41 view .LVU421
 1792 0352 4FEA9C2C 		lsr	ip, ip, #10
 1793 0356 17EE903A 		vmov	r3, s15	@ int
  60:dingus_dsp/delayline.h **** 
 1794              		.loc 18 60 41 view .LVU422
 1795 035a 4FEA9828 		lsr	r8, r8, #10
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1796              		.loc 18 59 41 view .LVU423
 1797 035e 09FB1C3C 		mls	ip, r9, ip, r3
 1798              	.LBE916:
 1799              	.LBE924:
 1800              	.LBE933:
 1801              	.LBE942:
  49:dingus_dsp/multitap_delay.h **** 
 1802              		.loc 14 49 26 view .LVU424
 1803 0362 049B     		ldr	r3, [sp, #16]
 1804              	.LBB943:
 1805              	.LBB934:
 1806              	.LBB925:
 1807              	.LBB917:
  60:dingus_dsp/delayline.h **** 
 1808              		.loc 18 60 41 view .LVU425
 1809 0364 09FB18E8 		mls	r8, r9, r8, lr
 1810              	.LBE917:
 1811              	.LBE925:
 1812              	.LBE934:
 1813              	.LBE943:
 1814              	.LBE955:
 1815              	.LBE968:
 1816              	.LBE981:
 1817              	.LBE999:
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1818              		.loc 12 72 12 view .LVU426
 1819 0368 00EB0B0E 		add	lr, r0, fp
 1820              	.LVL89:
 1821              	.LBB1000:
 1822              	.LBB982:
 1823              	.LBB969:
 1824              	.LBB956:
 1825              	.LBB944:
 1826              	.LBB935:
 1827              	.LBB926:
 1828              	.LBB918:
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1829              		.loc 18 59 24 view .LVU427
 1830 036c 0AEB8C0C 		add	ip, r10, ip, lsl #2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 63


  60:dingus_dsp/delayline.h **** 
 1831              		.loc 18 60 24 view .LVU428
 1832 0370 0AEB8808 		add	r8, r10, r8, lsl #2
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 1833              		.loc 18 59 24 view .LVU429
 1834 0374 DCED007A 		vldr.32	s15, [ip]
 1835              	.LVL90:
 1836              	.LBB911:
 1837              	.LBI911:
 1838              		.loc 11 189 7 is_stmt 1 view .LVU430
 1839              	.LBB912:
 1840              	.LBI912:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1841              		.loc 11 55 7 view .LVU431
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 1842              		.loc 11 55 7 is_stmt 0 view .LVU432
 1843              	.LBE912:
 1844              	.LBE911:
 1845              	.LBE918:
 1846              	.LBE926:
 1847              	.LBE935:
 1848              	.LBE944:
 1849              	.LBE956:
 1850              	.LBE969:
 1851              	.LBE982:
 1852              	.LBE1000:
 1853              		.loc 12 73 23 view .LVU433
 1854 0378 02EB0B0C 		add	ip, r2, fp
 1855              	.LBB1001:
 1856              	.LBB983:
 1857              	.LBB970:
 1858              	.LBB957:
 1859              	.LBB945:
 1860              	.LBB936:
 1861              	.LBB927:
 1862              	.LBB919:
 1863              		.loc 18 62 46 view .LVU434
 1864 037c D8ED006A 		vldr.32	s13, [r8]
 1865 0380 76EEE76A 		vsub.f32	s13, s13, s15
 1866              		.loc 18 62 55 view .LVU435
 1867 0384 E6EE877A 		vfma.f32	s15, s13, s14
 1868              	.LVL91:
 1869              		.loc 18 62 55 view .LVU436
 1870              	.LBE919:
 1871              	.LBE927:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1872              		.loc 14 45 24 view .LVU437
 1873 0388 77EE897A 		vadd.f32	s15, s15, s18
 1874              	.LVL92:
  45:dingus_dsp/multitap_delay.h ****                 gain = gain - decay_;
 1875              		.loc 14 45 24 view .LVU438
 1876              	.LBE936:
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1877              		.loc 14 43 13 is_stmt 1 view .LVU439
  43:dingus_dsp/multitap_delay.h ****                 float offset = tap * mod_value * 0.5f;
 1878              		.loc 14 43 13 view .LVU440
 1879              	.LBE945:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 64


 1880              	.LBE957:
 1881              	.LBE970:
 1882              	.LBE983:
 1883              	.LBE1001:
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1884              		.loc 12 72 62 is_stmt 0 view .LVU441
 1885 038c 38EE677A 		vsub.f32	s14, s16, s15
 1886              	.LBB1002:
 1887              	.LBB984:
 1888              	.LBB971:
 1889              	.LBB958:
  49:dingus_dsp/multitap_delay.h **** 
 1890              		.loc 14 49 26 view .LVU442
 1891 0390 C3ED007A 		vstr.32	s15, [r3]
 1892              	.LVL93:
  49:dingus_dsp/multitap_delay.h **** 
 1893              		.loc 14 49 26 view .LVU443
 1894              	.LBE958:
 1895              	.LBE971:
  31:dingus_dsp/chorus.h ****         }
 1896              		.loc 10 31 13 is_stmt 1 view .LVU444
  31:dingus_dsp/chorus.h ****         }
 1897              		.loc 10 31 13 is_stmt 0 view .LVU445
 1898              	.LBE984:
 1899              	.LBE1002:
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1900              		.loc 12 72 4 is_stmt 1 view .LVU446
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1901              		.loc 12 72 47 is_stmt 0 view .LVU447
 1902 0394 059B     		ldr	r3, [sp, #20]
 1903              		.loc 12 73 62 view .LVU448
 1904 0396 77EEC87A 		vsub.f32	s15, s15, s16
 1905              	.LVL94:
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1906              		.loc 12 72 77 view .LVU449
 1907 039a 27EE067A 		vmul.f32	s14, s14, s12
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1908              		.loc 12 72 47 view .LVU450
 1909 039e D3ED006A 		vldr.32	s13, [r3]
 1910              		.loc 12 73 12 view .LVU451
 1911 03a2 009B     		ldr	r3, [sp]
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1912              		.loc 12 72 47 view .LVU452
 1913 03a4 A6EEA57A 		vfma.f32	s14, s13, s11
  72:ChorusPetal.cpp **** 			out[1][i] = in[1][i] * (1.f - g_param.mix) + (processed_r - processed_l) * g_param.mix;
 1914              		.loc 12 72 14 view .LVU453
 1915 03a8 8EED007A 		vstr.32	s14, [lr]
 1916              	.LVL95:
 1917              		.loc 12 73 4 is_stmt 1 view .LVU454
 1918              		.loc 12 73 42 is_stmt 0 view .LVU455
 1919 03ac 94ED017A 		vldr.32	s14, [r4, #4]
 1920              		.loc 12 73 32 view .LVU456
 1921 03b0 78EEC78A 		vsub.f32	s17, s17, s14
 1922              		.loc 12 73 77 view .LVU457
 1923 03b4 67EE877A 		vmul.f32	s15, s15, s14
 1924              		.loc 12 73 47 view .LVU458
 1925 03b8 9CED007A 		vldr.32	s14, [ip]
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 65


 1926              		.loc 12 73 12 view .LVU459
 1927 03bc 03EB0B0C 		add	ip, r3, fp
 1928              	.LBE1003:
 1929              	.LBE1014:
 1930              	.LBE1019:
  59:ChorusPetal.cpp **** 	{
 1931              		.loc 12 59 23 view .LVU460
 1932 03c0 019B     		ldr	r3, [sp, #4]
 1933              	.LBB1020:
 1934              	.LBB1015:
 1935              	.LBB1004:
 1936              		.loc 12 73 47 view .LVU461
 1937 03c2 E7EE287A 		vfma.f32	s15, s14, s17
 1938              	.LBE1004:
 1939              	.LBE1015:
 1940              	.LBE1020:
  59:ChorusPetal.cpp **** 	{
 1941              		.loc 12 59 23 view .LVU462
 1942 03c6 AB42     		cmp	r3, r5
 1943              	.LBB1021:
 1944              	.LBB1016:
 1945              	.LBB1005:
 1946              		.loc 12 73 14 view .LVU463
 1947 03c8 CCED007A 		vstr.32	s15, [ip]
  74:ChorusPetal.cpp **** 
  75:ChorusPetal.cpp **** 			out[0][i] *= g_param.level;
 1948              		.loc 12 75 4 is_stmt 1 view .LVU464
 1949              		.loc 12 75 14 is_stmt 0 view .LVU465
 1950 03cc 94ED027A 		vldr.32	s14, [r4, #8]
 1951 03d0 DEED007A 		vldr.32	s15, [lr]
 1952 03d4 67EE877A 		vmul.f32	s15, s15, s14
 1953 03d8 CEED007A 		vstr.32	s15, [lr]
  76:ChorusPetal.cpp **** 			out[1][i] *= g_param.level;
 1954              		.loc 12 76 4 is_stmt 1 view .LVU466
 1955              		.loc 12 76 14 is_stmt 0 view .LVU467
 1956 03dc DCED007A 		vldr.32	s15, [ip]
 1957 03e0 94ED027A 		vldr.32	s14, [r4, #8]
 1958 03e4 67EE877A 		vmul.f32	s15, s15, s14
 1959 03e8 CCED007A 		vstr.32	s15, [ip]
 1960              	.LBE1005:
 1961              	.LBE1016:
 1962              	.LBE1021:
  59:ChorusPetal.cpp **** 	{
 1963              		.loc 12 59 2 is_stmt 1 view .LVU468
 1964              	.LVL96:
  59:ChorusPetal.cpp **** 	{
 1965              		.loc 12 59 23 view .LVU469
 1966 03ec 7FF497AE 		bne	.L21
 1967              	.LVL97:
 1968              	.L11:
  59:ChorusPetal.cpp **** 	{
 1969              		.loc 12 59 23 is_stmt 0 view .LVU470
 1970              	.LBE711:
  77:ChorusPetal.cpp **** 		} 
  78:ChorusPetal.cpp **** 	}
  79:ChorusPetal.cpp **** }
 1971              		.loc 12 79 1 view .LVU471
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 66


 1972 03f0 07B0     		add	sp, sp, #28
 1973              		.cfi_remember_state
 1974              		.cfi_def_cfa_offset 52
 1975              		@ sp needed
 1976 03f2 BDEC048B 		vldm	sp!, {d8-d9}
 1977              		.cfi_restore 82
 1978              		.cfi_restore 83
 1979              		.cfi_restore 80
 1980              		.cfi_restore 81
 1981              		.cfi_def_cfa_offset 36
 1982 03f6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1983              	.LVL98:
 1984              	.L18:
 1985              		.cfi_restore_state
 1986              	.LBB1023:
 1987              	.LBB1022:
 1988              	.LBB1017:
 1989              	.LBB800:
 1990              	.LBB797:
 1991              	.LBB780:
  54:dingus_dsp/oscillator.h ****             amp_ = amp;
 1992              		.loc 15 54 14 is_stmt 1 view .LVU472
 1993              	.LBB778:
 1994              		.loc 15 55 13 view .LVU473
 1995              		.loc 15 55 18 is_stmt 0 view .LVU474
 1996 03fa 06F6086C 		addw	ip, r6, #3592
 1997 03fe CCED006A 		vstr.32	s13, [ip]
 1998              	.LVL99:
 1999              		.loc 15 55 18 view .LVU475
 2000              	.LBE778:
 2001              	.LBE780:
 2002              	.LBE797:
  62:dingus_dsp/chorus.h ****         }
 2003              		.loc 10 62 13 is_stmt 1 view .LVU476
 2004              	.LBB798:
 2005              		.loc 14 88 14 view .LVU477
 2006              	.LBB792:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 2007              		.loc 16 21 10 view .LVU478
 2008 0402 6BE6     		b	.L19
 2009              	.L42:
 2010              		.align	2
 2011              	.L41:
 2012 0404 00000000 		.word	_ZL8g_chorus
 2013 0408 00000000 		.word	0
 2014 040c 04EE0200 		.word	_ZL8g_chorus+192004
 2015 0410 38DC0500 		.word	_ZL8g_chorus+384056
 2016 0414 F1197605 		.word	91625969
 2017              	.LBE792:
 2018              	.LBE798:
 2019              	.LBE800:
 2020              	.LBE1017:
 2021              	.LBE1022:
 2022              	.LBE1023:
 2023              		.cfi_endproc
 2024              	.LFE4107:
 2026              		.section	.text.startup.main,"ax",%progbits
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 67


 2027              		.align	1
 2028              		.p2align 2,,3
 2029              		.global	main
 2030              		.syntax unified
 2031              		.thumb
 2032              		.thumb_func
 2033              		.fpu fpv5-d16
 2035              	main:
 2036              	.LFB4108:
  80:ChorusPetal.cpp **** 
  81:ChorusPetal.cpp **** int main(void)
  82:ChorusPetal.cpp **** {
 2037              		.loc 12 82 1 view -0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
  83:ChorusPetal.cpp **** 	// Default initialized to 24-bit 48kHz with block size of 48
  84:ChorusPetal.cpp **** 	hw.Init();
 2041              		.loc 12 84 2 view .LVU480
  82:ChorusPetal.cpp **** 	// Default initialized to 24-bit 48kHz with block size of 48
 2042              		.loc 12 82 1 is_stmt 0 view .LVU481
 2043 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2044              		.cfi_def_cfa_offset 24
 2045              		.cfi_offset 4, -24
 2046              		.cfi_offset 5, -20
 2047              		.cfi_offset 6, -16
 2048              		.cfi_offset 7, -12
 2049              		.cfi_offset 8, -8
 2050              		.cfi_offset 14, -4
 2051              	.LBB1079:
 2052              	.LBB1080:
  23:dingus_dsp/chorus.h ****             delaylines_[0].Init(sample_rate);
 2053              		.loc 10 23 26 view .LVU482
 2054 0004 434D     		ldr	r5, .L46
 2055              	.LBE1080:
 2056              	.LBE1079:
 2057              		.loc 12 84 9 view .LVU483
 2058 0006 0021     		movs	r1, #0
 2059 0008 4348     		ldr	r0, .L46+4
 2060              	.LBB1207:
 2061              	.LBB1198:
 2062              	.LBB1081:
 2063              	.LBB1082:
 2064              	.LBB1083:
 2065              	.LBB1084:
 2066              	.LBB1085:
 2067              	.LBB1086:
 2068              	.LBB1087:
 2069              	.LBB1088:
 2070              	.LBB1089:
 2071              		.file 19 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
   1:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
   3:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** //
   5:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 68


   7:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // any later version.
  10:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  11:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  16:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  20:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  25:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /*
  26:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  27:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  30:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  38:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  39:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  42:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  50:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  51:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  56:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  59:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 69


  64:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  73:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <type_traits>
  74:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  75:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus > 201703L
  76:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <compare>
  77:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  78:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  79:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** {
  81:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  83:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /*
  84:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    */
  87:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline int
  90:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
  92:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  93:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  95:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
  97:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
  98:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return 0;
 102:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 103:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       else
 104:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 105:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 107:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 108:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 109:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _BoolType>
 113:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap
 114:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 115:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 117:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 119:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    _ValueType1;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 70


 121:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__a = *__b;
 123:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__b = __tmp;
 124:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 125:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 126:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 127:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 128:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap<true>
 129:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 130:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 132:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 134:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  swap(*__a, *__b);
 135:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 136:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 137:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif // C++03
 138:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 139:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 140:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 143:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 144:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 145:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 146:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  iterators themselves.
 148:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 149:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 152:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 154:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 155:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 157:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 159:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 160:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 161:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType1;
 163:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType2;
 165:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 166:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType2>)
 168:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType1>)
 170:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 171:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType1;
 173:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType2;
 175:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 71


 178:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 179:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 180:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // 187. iter_swap underspecified
 182:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       swap(*__a, *__b);
 183:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 184:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 186:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 187:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 194:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The ranges must not overlap.
 197:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 198:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _ForwardIterator2
 201:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 204:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 205:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 207:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 209:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 211:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first2;
 214:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 215:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 216:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 217:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 218:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 223:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 226:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 227:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 228:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 230:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 232:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 233:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 72


 235:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__b < __a)
 236:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 237:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 238:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 239:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 240:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 241:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 242:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 246:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 247:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 250:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 251:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 252:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 254:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 256:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 257:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__a < __b)
 260:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 261:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 262:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 263:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 264:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 265:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 266:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 272:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 275:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 278:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 280:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__b, __a))
 282:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 283:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 284:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 285:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 286:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 287:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 288:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 73


 292:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 293:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 294:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 297:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 300:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 302:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__a, __b))
 304:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 305:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 306:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 307:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 308:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 311:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 313:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 314:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __it; }
 316:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 317:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _From, typename _To>
 321:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _From
 323:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 326:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 328:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 330:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __res; }
 332:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 333:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // a for loop with an explicit count.
 338:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 339:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move
 341:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 342:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 343:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 345:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 347:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = *__first;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 74


 349:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 350:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 351:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 352:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 353:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 354:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 355:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 357:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 358:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 360:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 362:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 364:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 365:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 366:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 367:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 368:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 369:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 370:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 372:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 373:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 375:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 377:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 380:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = *__first;
 381:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 382:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 383:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
 384:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 385:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 386:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 387:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 388:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 389:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 390:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 392:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 393:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 395:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 397:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 400:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 401:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 402:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 403:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
 404:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 405:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 75


 406:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 407:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 408:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 409:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 410:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 412:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 413:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 415:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 417:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 418:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 424:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
 426:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result + _Num;
 428:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 429:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 430:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 431:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT>
 434:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct char_traits;
 435:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 436:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class istreambuf_iterator;
 438:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 439:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class ostreambuf_iterator;
 441:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 442:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 448:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 454:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				    _CharT*>::__type
 457:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 460:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 76


 463:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 465:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 468:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 471:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 474:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 475:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 477:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct _Deque_iterator;
 479:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 480:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 482:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 483:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 485:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _OI);
 488:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 489:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 490:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 496:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 502:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 505:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 508:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 511:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 513:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 514:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 516:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 517:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 518:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 519:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 77


 520:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 522:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  _OI);
 525:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 526:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 527:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II, _II,
 530:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 532:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 533:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 540:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 541:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 544:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 545:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 546:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 547:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 548:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 554:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 556:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 557:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 558:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 560:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 562:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 563:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 568:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 571:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 572:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 573:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 574:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 78


 577:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 578:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 579:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 580:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 581:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 587:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 589:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 590:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 591:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 593:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 595:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 596:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 601:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 604:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 605:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 607:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 609:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 610:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward
 612:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 613:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 616:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 618:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
 619:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 620:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 621:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 622:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 623:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 624:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 625:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 626:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 628:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 631:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 633:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 79


 634:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 636:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 637:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 638:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 639:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 640:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 641:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 643:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 646:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 648:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 650:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 652:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 653:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 654:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 655:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 656:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 657:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 658:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 660:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 663:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 665:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 667:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 670:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 671:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 672:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 673:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 674:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 675:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 677:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 678:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 680:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 682:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 683:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 689:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 80


 691:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result - _Num;
 693:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 694:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 695:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 696:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 699:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 701:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 704:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 707:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __last,
 711:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __result);
 712:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 713:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 714:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 717:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 720:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 721:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 723:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _OI);
 726:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 727:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 728:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(
 731:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 735:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 742:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 745:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 747:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 81


 748:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   std::__niter_base(__result)));
 751:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 752:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 753:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 754:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 756:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 757:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_OI);
 760:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 761:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 762:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 767:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 768:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 772:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 776:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 777:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
 783:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 784:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 790:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 791:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 794:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 797:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 799:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 800:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 82


 805:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 807:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 810:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 811:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 812:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 813:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
 819:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 820:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 826:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 827:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 830:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 833:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 835:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 836:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 843:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       std::__miter_base(__last),
 845:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       __result);
 846:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 847:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 848:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 850:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 852:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 853:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 856:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 859:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 860:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 861:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 83


 862:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 863:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 864:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 867:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 870:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 871:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2072              		.loc 19 873 11 view .LVU484
 2073 000a 4FF00008 		mov	r8, #0
 2074              	.LBE1089:
 2075              	.LBE1088:
 2076              	.LBE1087:
 2077              	.LBE1086:
 2078              	.LBE1085:
 2079              	.LBE1084:
 2080              	.LBE1083:
  23:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
 2081              		.loc 14 23 26 view .LVU485
 2082 000e A5F53C34 		sub	r4, r5, #192512
 2083              	.LBB1109:
 2084              	.LBB1110:
  56:dingus_dsp/oscillator.h ****         }
  57:dingus_dsp/oscillator.h **** 
  58:dingus_dsp/oscillator.h ****         // Set the waveform type of the oscillator.
  59:dingus_dsp/oscillator.h ****         void SetType(OscType type) {
  60:dingus_dsp/oscillator.h ****             osc_type_ = (type < OscType::MAX) ? type : OscType::SINE;
 2085              		.loc 15 60 23 view .LVU486
 2086 0012 0E46     		mov	r6, r1
 2087              	.LBE1110:
 2088              	.LBE1109:
  27:dingus_dsp/multitap_delay.h **** 
 2089              		.loc 14 27 20 view .LVU487
 2090 0014 4FF07E57 		mov	r7, #1065353216
 2091              	.LBE1082:
 2092              	.LBE1081:
 2093              	.LBE1198:
 2094              	.LBE1207:
  82:ChorusPetal.cpp **** 	// Default initialized to 24-bit 48kHz with block size of 48
 2095              		.loc 12 82 1 view .LVU488
 2096 0018 2DED028B 		vpush.64	{d8}
 2097              		.cfi_def_cfa_offset 32
 2098              		.cfi_offset 80, -32
 2099              		.cfi_offset 81, -28
 2100              		.loc 12 84 9 view .LVU489
 2101 001c FFF7FEFF 		bl	_ZN5daisy10DaisyPetal4InitEb
 2102              	.LVL100:
  85:ChorusPetal.cpp **** 	//hw.SetAudioBlockSize(8);
  86:ChorusPetal.cpp **** 
  87:ChorusPetal.cpp **** 	float sample_rate = hw.AudioSampleRate();
 2103              		.loc 12 87 2 is_stmt 1 view .LVU490
 2104              		.loc 12 87 40 is_stmt 0 view .LVU491
 2105 0020 3D48     		ldr	r0, .L46+4
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 84


 2106 0022 FFF7FEFF 		bl	_ZN5daisy10DaisyPetal15AudioSampleRateEv
 2107              	.LVL101:
 2108              	.LBB1208:
 2109              	.LBB1199:
 2110              	.LBB1137:
 2111              	.LBB1131:
  23:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
 2112              		.loc 14 23 26 view .LVU492
 2113 0026 04F56362 		add	r2, r4, #3632
 2114              	.LBE1131:
 2115              	.LBE1137:
  23:dingus_dsp/chorus.h ****             delaylines_[0].Init(sample_rate);
 2116              		.loc 10 23 26 view .LVU493
 2117 002a 05F66843 		addw	r3, r5, #3176
 2118              	.LBB1138:
 2119              	.LBB1132:
  24:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
 2120              		.loc 14 24 22 view .LVU494
 2121 002e 04F60460 		addw	r0, r4, #3588
  23:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
 2122              		.loc 14 23 26 view .LVU495
 2123 0032 82ED000A 		vstr.32	s0, [r2]
 2124              	.LBE1132:
 2125              	.LBE1138:
 2126              	.LBE1199:
 2127              	.LBE1208:
 2128              		.loc 12 87 40 view .LVU496
 2129 0036 B0EE408A 		vmov.f32	s16, s0
 2130              	.LVL102:
  88:ChorusPetal.cpp **** 	g_chorus.Init(sample_rate);
 2131              		.loc 12 88 2 is_stmt 1 view .LVU497
 2132              	.LBB1209:
 2133              	.LBI1079:
  22:dingus_dsp/chorus.h ****             sample_rate_ = sample_rate;
 2134              		.loc 10 22 14 view .LVU498
 2135              	.LBB1200:
  23:dingus_dsp/chorus.h ****             delaylines_[0].Init(sample_rate);
 2136              		.loc 10 23 13 view .LVU499
  23:dingus_dsp/chorus.h ****             delaylines_[0].Init(sample_rate);
 2137              		.loc 10 23 26 is_stmt 0 view .LVU500
 2138 003a 83ED000A 		vstr.32	s0, [r3]
  24:dingus_dsp/chorus.h ****             delaylines_[1].Init(sample_rate);
 2139              		.loc 10 24 13 is_stmt 1 view .LVU501
 2140              	.LVL103:
 2141              	.LBB1139:
 2142              	.LBI1081:
  22:dingus_dsp/multitap_delay.h ****             sample_rate_ = sample_rate;
 2143              		.loc 14 22 14 view .LVU502
 2144              	.LBB1133:
  24:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
 2145              		.loc 14 24 22 is_stmt 0 view .LVU503
 2146 003e FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator4InitEf
 2147              	.LVL104:
 2148              	.LBB1113:
 2149              	.LBI1109:
  59:dingus_dsp/oscillator.h ****             osc_type_ = (type < OscType::MAX) ? type : OscType::SINE;
 2150              		.loc 15 59 14 is_stmt 1 view .LVU504
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 85


 2151              	.LBB1111:
 2152              		.loc 15 60 13 view .LVU505
 2153              	.LBE1111:
 2154              	.LBE1113:
 2155              	.LBB1114:
 2156              	.LBB1105:
 2157              	.LBB1102:
 2158              	.LBB1099:
 2159              	.LBB1096:
 2160              	.LBB1093:
 2161              	.LBB1090:
 2162              		.loc 19 873 11 is_stmt 0 view .LVU506
 2163 0042 04F61C63 		addw	r3, r4, #3612
 2164              	.LBE1090:
 2165              	.LBE1093:
 2166              	.LBE1096:
 2167              	.LBE1099:
 2168              	.LBE1102:
 2169              	.LBE1105:
 2170              	.LBE1114:
 2171              	.LBB1115:
 2172              	.LBB1112:
 2173              		.loc 15 60 23 view .LVU507
 2174 0046 C4F8046E 		str	r6, [r4, #3588]
 2175              	.LVL105:
 2176              		.loc 15 60 23 view .LVU508
 2177              	.LBE1112:
 2178              	.LBE1115:
 2179              	.LBB1116:
 2180              	.LBI1083:
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 2181              		.loc 11 116 7 is_stmt 1 view .LVU509
 2182              	.LBB1106:
 2183              	.LBI1084:
 874:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 875:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 876:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 878:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 880:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 883:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __c;
 884:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 886:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 887:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__first = __tmp;
 889:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return;
 890:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 891:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 892:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 895:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 896:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 86


 897:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 899:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 902:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 904:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 906:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _VTp&);
 909:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 910:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 916:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 918:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const _Tp&);
 921:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 922:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 923:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 929:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 930:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 934:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 937:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 939:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 940:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator>)
 942:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 944:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 946:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 947:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 87


 954:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 961:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 967:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 973:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 979:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 985:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 986:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(float __n) { return __n; }
 988:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(double __n) { return __n; }
 990:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long double __n) { return __n; }
 992:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__float128 __n) { return __n; }
 995:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 996:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 997:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
1000:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1003:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
1005:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1006:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1007:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1008:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 88


1011:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1014:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
1015:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
1017:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1018:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1019:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1020:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp>
1022:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag);
1026:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1027:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1030:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::output_iterator_tag)
1032:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1033:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1034:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1036:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1038:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1039:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1042:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag)
1044:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1045:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1046:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1048:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1050:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1051:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1057:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1058:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1060:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__n <= 0)
1061:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __first;
1062:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1063:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1065:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first + __n;
1067:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 89


1068:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1069:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
1070:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An output iterator.
1073:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The iterator at first+n.
1076:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1077:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1081:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
1083:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
1089:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 2184              		.loc 19 1089 5 view .LVU510
 2185              		.loc 19 1089 5 is_stmt 0 view .LVU511
 2186              	.LBE1106:
 2187              	.LBE1116:
 2188              	.LBE1133:
 2189              	.LBE1139:
 2190              	.LBE1200:
 2191              	.LBE1209:
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 2192              		.loc 19 951 37 is_stmt 1 view .LVU512
 2193              	.LBB1210:
 2194              	.LBB1201:
 2195              	.LBB1140:
 2196              	.LBB1134:
 2197              	.LBB1117:
 2198              	.LBB1107:
 2199              	.LBB1103:
 2200              	.LBI1085:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2201              		.loc 19 1054 5 view .LVU513
 2202              	.LBB1100:
 2203              	.LBI1086:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2204              		.loc 19 1054 5 view .LVU514
 2205              	.LBB1097:
 2206              	.LBI1087:
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 2207              		.loc 19 913 5 view .LVU515
 2208              	.LBB1094:
 2209              	.LBI1088:
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 2210              		.loc 19 868 5 view .LVU516
 2211              	.LBB1091:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2212              		.loc 19 872 22 view .LVU517
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 90


 2213              	.LBE1091:
 2214              	.LBE1094:
 2215              	.LBE1097:
 2216              	.LBE1100:
 2217              	.LBE1103:
 2218              	.LBE1107:
 2219              	.LBE1117:
  30:dingus_dsp/multitap_delay.h ****             CalculateSpread();
 2220              		.loc 14 30 18 is_stmt 0 view .LVU518
 2221 004a 40F29A20 		movw	r0, #666
 2222              	.LBB1118:
 2223              	.LBB1119:
  89:dingus_dsp/multitap_delay.h ****             osc_.SetAmplitude(Clamp<float>(depth, -1.f, 1.f));
  90:dingus_dsp/multitap_delay.h ****         }
  91:dingus_dsp/multitap_delay.h **** 
  92:dingus_dsp/multitap_delay.h ****         // Returns the maximum delay time in samples.
  93:dingus_dsp/multitap_delay.h ****         // Only allow for a maximum delay of half the buffer size.
  94:dingus_dsp/multitap_delay.h ****         // This prevents a modulated time beyond the length of the buffer.
  95:dingus_dsp/multitap_delay.h ****         size_t GetMaxDelay() { return max_delay / 2; };
  96:dingus_dsp/multitap_delay.h **** 
  97:dingus_dsp/multitap_delay.h ****     private:
  98:dingus_dsp/multitap_delay.h ****         // The delay buffer.
  99:dingus_dsp/multitap_delay.h ****         DelayLine<float, max_delay> delay_line_;
 100:dingus_dsp/multitap_delay.h **** 
 101:dingus_dsp/multitap_delay.h ****         // The modulation lfo.
 102:dingus_dsp/multitap_delay.h ****         Oscillator osc_;
 103:dingus_dsp/multitap_delay.h **** 
 104:dingus_dsp/multitap_delay.h ****         // The delay time for each tap.
 105:dingus_dsp/multitap_delay.h ****         std::array<float, num_taps> delay_taps_;
 106:dingus_dsp/multitap_delay.h **** 
 107:dingus_dsp/multitap_delay.h ****         // A random spread value calculated for each tap.
 108:dingus_dsp/multitap_delay.h ****         std::array<float, num_taps> tap_spread_;
 109:dingus_dsp/multitap_delay.h **** 
 110:dingus_dsp/multitap_delay.h ****         // The amount by which gain is reduced for each tap.
 111:dingus_dsp/multitap_delay.h ****         float decay_ {};
 112:dingus_dsp/multitap_delay.h **** 
 113:dingus_dsp/multitap_delay.h ****         // The amount of feedback.
 114:dingus_dsp/multitap_delay.h ****         float feedback_lvl_ {};
 115:dingus_dsp/multitap_delay.h **** 
 116:dingus_dsp/multitap_delay.h ****         // The previous output value.
 117:dingus_dsp/multitap_delay.h ****         float prev_output_ {};
 118:dingus_dsp/multitap_delay.h **** 
 119:dingus_dsp/multitap_delay.h ****         // The audio sample rate.
 120:dingus_dsp/multitap_delay.h ****         float sample_rate_ {};
 121:dingus_dsp/multitap_delay.h **** 
 122:dingus_dsp/multitap_delay.h ****         // Calculates a random spread value for each tap.
 123:dingus_dsp/multitap_delay.h ****         // This is done at initialization and the value is seeded with a constant.
 124:dingus_dsp/multitap_delay.h ****         // Thus the spread values will be random but persistent.
 125:dingus_dsp/multitap_delay.h ****         void CalculateSpread() {
 126:dingus_dsp/multitap_delay.h ****             for (size_t i = 0; i < num_taps; i++) {
 127:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2224              		.loc 14 127 62 view .LVU519
 2225 004e DFED338A 		vldr.32	s17, .L46+8
 2226              	.LBE1119:
 2227              	.LBE1118:
 2228              	.LBB1126:
 2229              	.LBB1108:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 91


 2230              	.LBB1104:
 2231              	.LBB1101:
 2232              	.LBB1098:
 2233              	.LBB1095:
 2234              	.LBB1092:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2235              		.loc 19 873 11 view .LVU520
 2236 0052 C3F80080 		str	r8, [r3]	@ float
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2237              		.loc 19 872 7 is_stmt 1 view .LVU521
 2238              	.LVL106:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2239              		.loc 19 872 22 view .LVU522
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2240              		.loc 19 872 22 is_stmt 0 view .LVU523
 2241              	.LBE1092:
 2242              	.LBE1095:
 2243              	.LBE1098:
 2244              	.LBE1101:
 2245              	.LBE1104:
 2246              	.LBE1108:
 2247              	.LBE1126:
  27:dingus_dsp/multitap_delay.h **** 
 2248              		.loc 14 27 20 view .LVU524
 2249 0056 04F62463 		addw	r3, r4, #3620
 2250              	.LBB1127:
 2251              	.LBB1122:
 2252              		.loc 14 127 32 view .LVU525
 2253 005a 04F56264 		add	r4, r4, #3616
 2254              	.LBE1122:
 2255              	.LBE1127:
  27:dingus_dsp/multitap_delay.h **** 
 2256              		.loc 14 27 20 view .LVU526
 2257 005e 1F60     		str	r7, [r3]	@ float
  30:dingus_dsp/multitap_delay.h ****             CalculateSpread();
 2258              		.loc 14 30 18 view .LVU527
 2259 0060 FFF7FEFF 		bl	srand
 2260              	.LVL107:
 2261              	.LBB1128:
 2262              	.LBI1118:
 125:dingus_dsp/multitap_delay.h ****             for (size_t i = 0; i < num_taps; i++) {
 2263              		.loc 14 125 14 is_stmt 1 view .LVU528
 2264              	.LBB1123:
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2265              		.loc 14 126 34 view .LVU529
 2266              		.loc 14 127 58 is_stmt 0 view .LVU530
 2267 0064 FFF7FEFF 		bl	rand
 2268              	.LVL108:
 2269              	.LBB1120:
 2270              	.LBI1120:
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 2271              		.loc 11 185 7 is_stmt 1 view .LVU531
 2272              	.LBB1121:
 2273              	.LBI1121:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 2274              		.loc 11 55 7 view .LVU532
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 92


 2275              		.loc 11 55 7 is_stmt 0 view .LVU533
 2276              	.LBE1121:
 2277              	.LBE1120:
 2278              		.loc 14 127 35 view .LVU534
 2279 0068 07EE900A 		vmov	s15, r0	@ int
 2280              	.LBE1123:
 2281              	.LBE1128:
 2282              	.LBE1134:
 2283              	.LBE1140:
 2284              	.LBB1141:
 2285              	.LBB1142:
  23:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
 2286              		.loc 14 23 26 view .LVU535
 2287 006c 05F66443 		addw	r3, r5, #3172
  24:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
 2288              		.loc 14 24 22 view .LVU536
 2289 0070 B0EE480A 		vmov.f32	s0, s16
 2290              	.LBE1142:
 2291              	.LBE1141:
 2292              	.LBB1189:
 2293              	.LBB1135:
 2294              	.LBB1129:
 2295              	.LBB1124:
 2296              		.loc 14 127 35 view .LVU537
 2297 0074 F8EEE77A 		vcvt.f32.s32	s15, s15
 2298              	.LBE1124:
 2299              	.LBE1129:
 2300              	.LBE1135:
 2301              	.LBE1189:
 2302              	.LBB1190:
 2303              	.LBB1182:
  24:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
 2304              		.loc 14 24 22 view .LVU538
 2305 0078 05F63840 		addw	r0, r5, #3128
  23:dingus_dsp/multitap_delay.h ****             osc_.Init(sample_rate_);
 2306              		.loc 14 23 26 view .LVU539
 2307 007c 83ED008A 		vstr.32	s16, [r3]
 2308              	.LBE1182:
 2309              	.LBE1190:
 2310              	.LBB1191:
 2311              	.LBB1136:
 2312              	.LBB1130:
 2313              	.LBB1125:
 2314              		.loc 14 127 62 view .LVU540
 2315 0080 67EEA87A 		vmul.f32	s15, s15, s17
 2316              		.loc 14 127 32 view .LVU541
 2317 0084 C4ED007A 		vstr.32	s15, [r4]
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2318              		.loc 14 126 13 is_stmt 1 view .LVU542
 2319              	.LVL109:
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2320              		.loc 14 126 34 view .LVU543
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2321              		.loc 14 126 34 is_stmt 0 view .LVU544
 2322              	.LBE1125:
 2323              	.LBE1130:
 2324              	.LBE1136:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 93


 2325              	.LBE1191:
  25:dingus_dsp/chorus.h ****         }
 2326              		.loc 10 25 13 is_stmt 1 view .LVU545
 2327              	.LBB1192:
 2328              	.LBI1141:
  22:dingus_dsp/multitap_delay.h ****             sample_rate_ = sample_rate;
 2329              		.loc 14 22 14 view .LVU546
 2330              	.LBB1183:
  24:dingus_dsp/multitap_delay.h ****             osc_.SetType(OscType::SINE);
 2331              		.loc 14 24 22 is_stmt 0 view .LVU547
 2332 0088 FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator4InitEf
 2333              	.LVL110:
 2334              	.LBB1143:
 2335              	.LBI1143:
  59:dingus_dsp/oscillator.h ****             osc_type_ = (type < OscType::MAX) ? type : OscType::SINE;
 2336              		.loc 15 59 14 is_stmt 1 view .LVU548
 2337              	.LBB1144:
 2338              		.loc 15 60 13 view .LVU549
 2339              	.LBE1144:
 2340              	.LBE1143:
 2341              	.LBB1146:
 2342              	.LBB1147:
 2343              	.LBB1148:
 2344              	.LBB1149:
 2345              	.LBB1150:
 2346              	.LBB1151:
 2347              	.LBB1152:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2348              		.loc 19 873 11 is_stmt 0 view .LVU550
 2349 008c 05F54563 		add	r3, r5, #3152
 2350              	.LBE1152:
 2351              	.LBE1151:
 2352              	.LBE1150:
 2353              	.LBE1149:
 2354              	.LBE1148:
 2355              	.LBE1147:
 2356              	.LBE1146:
 2357              	.LBB1166:
 2358              	.LBB1145:
 2359              		.loc 15 60 23 view .LVU551
 2360 0090 C5F8386C 		str	r6, [r5, #3128]
 2361              	.LVL111:
 2362              		.loc 15 60 23 view .LVU552
 2363              	.LBE1145:
 2364              	.LBE1166:
 2365              	.LBB1167:
 2366              	.LBI1146:
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 2367              		.loc 11 116 7 is_stmt 1 view .LVU553
 2368              	.LBB1163:
 2369              	.LBI1147:
 2370              		.loc 19 1089 5 view .LVU554
 2371              		.loc 19 1089 5 is_stmt 0 view .LVU555
 2372              	.LBE1163:
 2373              	.LBE1167:
 2374              	.LBE1183:
 2375              	.LBE1192:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 94


 2376              	.LBE1201:
 2377              	.LBE1210:
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 2378              		.loc 19 951 37 is_stmt 1 view .LVU556
 2379              	.LBB1211:
 2380              	.LBB1202:
 2381              	.LBB1193:
 2382              	.LBB1184:
 2383              	.LBB1168:
 2384              	.LBB1164:
 2385              	.LBB1161:
 2386              	.LBI1148:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2387              		.loc 19 1054 5 view .LVU557
 2388              	.LBB1159:
 2389              	.LBI1149:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2390              		.loc 19 1054 5 view .LVU558
 2391              	.LBB1157:
 2392              	.LBI1150:
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 2393              		.loc 19 913 5 view .LVU559
 2394              	.LBB1155:
 2395              	.LBI1151:
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 2396              		.loc 19 868 5 view .LVU560
 2397              	.LBB1153:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2398              		.loc 19 872 22 view .LVU561
 2399              	.LBE1153:
 2400              	.LBE1155:
 2401              	.LBE1157:
 2402              	.LBE1159:
 2403              	.LBE1161:
 2404              	.LBE1164:
 2405              	.LBE1168:
  30:dingus_dsp/multitap_delay.h ****             CalculateSpread();
 2406              		.loc 14 30 18 is_stmt 0 view .LVU562
 2407 0094 40F29A20 		movw	r0, #666
 2408              	.LBB1169:
 2409              	.LBB1165:
 2410              	.LBB1162:
 2411              	.LBB1160:
 2412              	.LBB1158:
 2413              	.LBB1156:
 2414              	.LBB1154:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2415              		.loc 19 873 11 view .LVU563
 2416 0098 C3F80080 		str	r8, [r3]	@ float
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2417              		.loc 19 872 7 is_stmt 1 view .LVU564
 2418              	.LVL112:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2419              		.loc 19 872 22 view .LVU565
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2420              		.loc 19 872 22 is_stmt 0 view .LVU566
 2421              	.LBE1154:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 95


 2422              	.LBE1156:
 2423              	.LBE1158:
 2424              	.LBE1160:
 2425              	.LBE1162:
 2426              	.LBE1165:
 2427              	.LBE1169:
  27:dingus_dsp/multitap_delay.h **** 
 2428              		.loc 14 27 20 view .LVU567
 2429 009c 05F65843 		addw	r3, r5, #3160
 2430              	.LBE1184:
 2431              	.LBE1193:
 2432              	.LBE1202:
 2433              	.LBE1211:
 2434              	.LBB1212:
 2435              	.LBB1213:
 2436              	.LBB1214:
  42:dingus_dsp/smooth_value.h ****             duration_ = duration * sample_rate;
 2437              		.loc 13 42 26 view .LVU568
 2438 00a0 1F4C     		ldr	r4, .L46+12
 2439              	.LBE1214:
 2440              	.LBE1213:
 2441              	.LBE1212:
 2442              	.LBB1227:
 2443              	.LBB1203:
 2444              	.LBB1194:
 2445              	.LBB1185:
 2446              	.LBB1170:
 2447              	.LBB1171:
 2448              		.loc 14 127 32 view .LVU569
 2449 00a2 05F65445 		addw	r5, r5, #3156
 2450              	.LBE1171:
 2451              	.LBE1170:
  27:dingus_dsp/multitap_delay.h **** 
 2452              		.loc 14 27 20 view .LVU570
 2453 00a6 1F60     		str	r7, [r3]	@ float
  30:dingus_dsp/multitap_delay.h ****             CalculateSpread();
 2454              		.loc 14 30 18 view .LVU571
 2455 00a8 FFF7FEFF 		bl	srand
 2456              	.LVL113:
 2457              	.LBB1178:
 2458              	.LBI1170:
 125:dingus_dsp/multitap_delay.h ****             for (size_t i = 0; i < num_taps; i++) {
 2459              		.loc 14 125 14 is_stmt 1 view .LVU572
 2460              	.LBB1174:
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2461              		.loc 14 126 34 view .LVU573
 2462              		.loc 14 127 58 is_stmt 0 view .LVU574
 2463 00ac FFF7FEFF 		bl	rand
 2464              	.LVL114:
 2465              	.LBB1172:
 2466              	.LBI1172:
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 2467              		.loc 11 185 7 is_stmt 1 view .LVU575
 2468              	.LBB1173:
 2469              	.LBI1173:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 2470              		.loc 11 55 7 view .LVU576
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 96


  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 2471              		.loc 11 55 7 is_stmt 0 view .LVU577
 2472              	.LBE1173:
 2473              	.LBE1172:
 2474              		.loc 14 127 35 view .LVU578
 2475 00b0 07EE900A 		vmov	s15, r0	@ int
 2476              	.LBE1174:
 2477              	.LBE1178:
 2478              	.LBE1185:
 2479              	.LBE1194:
 2480              	.LBE1203:
 2481              	.LBE1227:
 2482              	.LBB1228:
 2483              	.LBB1218:
 2484              	.LBB1215:
  43:dingus_dsp/smooth_value.h ****             counter_ = 0;
 2485              		.loc 13 43 34 view .LVU579
 2486 00b4 9FED1B7A 		vldr.32	s14, .L46+16
 2487              	.LBE1215:
 2488              	.LBE1218:
 2489              	.LBE1228:
 2490              	.LBB1229:
 2491              	.LBB1204:
 2492              	.LBB1195:
 2493              	.LBB1186:
 2494              	.LBB1179:
 2495              	.LBB1175:
 2496              		.loc 14 127 35 view .LVU580
 2497 00b8 F8EEE77A 		vcvt.f32.s32	s15, s15
 2498              	.LBE1175:
 2499              	.LBE1179:
 2500              	.LBE1186:
 2501              	.LBE1195:
 2502              	.LBE1204:
 2503              	.LBE1229:
  89:ChorusPetal.cpp **** 	g_param.Init(sample_rate);
  90:ChorusPetal.cpp **** 
  91:ChorusPetal.cpp **** 	hw.StartAdc();
 2504              		.loc 12 91 13 view .LVU581
 2505 00bc 1648     		ldr	r0, .L46+4
 2506              	.LBB1230:
 2507              	.LBB1219:
 2508              	.LBB1216:
  43:dingus_dsp/smooth_value.h ****             counter_ = 0;
 2509              		.loc 13 43 34 view .LVU582
 2510 00be 28EE077A 		vmul.f32	s14, s16, s14
  42:dingus_dsp/smooth_value.h ****             duration_ = duration * sample_rate;
 2511              		.loc 13 42 26 view .LVU583
 2512 00c2 84ED0A8A 		vstr.32	s16, [r4, #40]
  44:dingus_dsp/smooth_value.h ****         }
 2513              		.loc 13 44 22 view .LVU584
 2514 00c6 6662     		str	r6, [r4, #36]
 2515              	.LBE1216:
 2516              	.LBE1219:
 2517              	.LBE1230:
 2518              	.LBB1231:
 2519              	.LBB1205:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 97


 2520              	.LBB1196:
 2521              	.LBB1187:
 2522              	.LBB1180:
 2523              	.LBB1176:
 2524              		.loc 14 127 62 view .LVU585
 2525 00c8 67EEA87A 		vmul.f32	s15, s15, s17
 2526              	.LBE1176:
 2527              	.LBE1180:
 2528              	.LBE1187:
 2529              	.LBE1196:
 2530              	.LBE1205:
 2531              	.LBE1231:
 2532              	.LBB1232:
 2533              	.LBB1220:
 2534              	.LBB1221:
  42:dingus_dsp/smooth_value.h ****             duration_ = duration * sample_rate;
 2535              		.loc 13 42 26 view .LVU586
 2536 00cc 84ED108A 		vstr.32	s16, [r4, #64]
 2537              	.LBE1221:
 2538              	.LBE1220:
 2539              	.LBB1223:
 2540              	.LBB1217:
  43:dingus_dsp/smooth_value.h ****             counter_ = 0;
 2541              		.loc 13 43 23 view .LVU587
 2542 00d0 84ED087A 		vstr.32	s14, [r4, #32]
 2543              	.LBE1217:
 2544              	.LBE1223:
 2545              	.LBB1224:
 2546              	.LBB1222:
 2547 00d4 84ED0E7A 		vstr.32	s14, [r4, #56]
  44:dingus_dsp/smooth_value.h ****         }
 2548              		.loc 13 44 22 view .LVU588
 2549 00d8 E663     		str	r6, [r4, #60]
 2550              	.LBE1222:
 2551              	.LBE1224:
 2552              	.LBE1232:
 2553              	.LBB1233:
 2554              	.LBB1206:
 2555              	.LBB1197:
 2556              	.LBB1188:
 2557              	.LBB1181:
 2558              	.LBB1177:
 2559              		.loc 14 127 32 view .LVU589
 2560 00da C5ED007A 		vstr.32	s15, [r5]
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2561              		.loc 14 126 13 is_stmt 1 view .LVU590
 2562              	.LVL115:
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2563              		.loc 14 126 34 view .LVU591
 126:dingus_dsp/multitap_delay.h ****                 tap_spread_[i] = (static_cast<float>(rand()) / RAND_MAX);
 2564              		.loc 14 126 34 is_stmt 0 view .LVU592
 2565              	.LBE1177:
 2566              	.LBE1181:
 2567              	.LBE1188:
 2568              	.LBE1197:
 2569              	.LBE1206:
 2570              	.LBE1233:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 98


  89:ChorusPetal.cpp **** 
 2571              		.loc 12 89 2 is_stmt 1 view .LVU593
 2572              	.LBB1234:
 2573              	.LBI1212:
  14:ChorusPetal.cpp **** 		delay_time.Init(0.01f, sample_rate);
 2574              		.loc 12 14 7 view .LVU594
 2575              	.LBE1234:
  15:ChorusPetal.cpp **** 		depth.Init(0.01f, sample_rate);
 2576              		.loc 12 15 3 view .LVU595
 2577              	.LBB1235:
 2578              	.LBB1225:
 2579              	.LBI1213:
  41:dingus_dsp/smooth_value.h ****             sample_rate_ = sample_rate;
 2580              		.loc 13 41 14 view .LVU596
  41:dingus_dsp/smooth_value.h ****             sample_rate_ = sample_rate;
 2581              		.loc 13 41 14 is_stmt 0 view .LVU597
 2582              	.LBE1225:
 2583              	.LBE1235:
  16:ChorusPetal.cpp **** 	}
 2584              		.loc 12 16 3 is_stmt 1 view .LVU598
 2585              	.LBB1236:
 2586              	.LBB1226:
 2587              	.LBI1220:
  41:dingus_dsp/smooth_value.h ****             sample_rate_ = sample_rate;
 2588              		.loc 13 41 14 view .LVU599
  41:dingus_dsp/smooth_value.h ****             sample_rate_ = sample_rate;
 2589              		.loc 13 41 14 is_stmt 0 view .LVU600
 2590              	.LBE1226:
 2591              	.LBE1236:
 2592              		.loc 12 91 2 is_stmt 1 view .LVU601
 2593              		.loc 12 91 13 is_stmt 0 view .LVU602
 2594 00de FFF7FEFF 		bl	_ZN5daisy10DaisyPetal8StartAdcEv
 2595              	.LVL116:
  92:ChorusPetal.cpp **** 	hw.StartAudio(AudioCallback);
 2596              		.loc 12 92 2 is_stmt 1 view .LVU603
 2597              		.loc 12 92 15 is_stmt 0 view .LVU604
 2598 00e2 1149     		ldr	r1, .L46+20
 2599 00e4 0C48     		ldr	r0, .L46+4
 2600 00e6 FFF7FEFF 		bl	_ZN5daisy10DaisyPetal10StartAudioEPFvPKPKfPPfjE
 2601              	.LVL117:
 2602              	.L44:
  93:ChorusPetal.cpp **** 
  94:ChorusPetal.cpp **** 	while(1) 
 2603              		.loc 12 94 2 is_stmt 1 discriminator 1 view .LVU605
  95:ChorusPetal.cpp **** 	{
  96:ChorusPetal.cpp **** 		hw.DelayMs(6);
 2604              		.loc 12 96 3 discriminator 1 view .LVU606
 2605              		.loc 12 96 13 is_stmt 0 discriminator 1 view .LVU607
 2606 00ea 0621     		movs	r1, #6
 2607 00ec 0A48     		ldr	r0, .L46+4
 2608 00ee FFF7FEFF 		bl	_ZN5daisy10DaisyPetal7DelayMsEj
 2609              	.LVL118:
  97:ChorusPetal.cpp **** 		hw.ClearLeds();
 2610              		.loc 12 97 3 is_stmt 1 discriminator 1 view .LVU608
 2611              		.loc 12 97 15 is_stmt 0 discriminator 1 view .LVU609
 2612 00f2 0948     		ldr	r0, .L46+4
 2613 00f4 FFF7FEFF 		bl	_ZN5daisy10DaisyPetal9ClearLedsEv
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 99


 2614              	.LVL119:
  98:ChorusPetal.cpp **** 
  99:ChorusPetal.cpp **** 		hw.SetFootswitchLed((DaisyPetal::FootswitchLed)0, (float)g_param.effectOn);
 2615              		.loc 12 99 3 is_stmt 1 discriminator 1 view .LVU610
 2616              		.loc 12 99 22 is_stmt 0 discriminator 1 view .LVU611
 2617 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2618 00fa 0021     		movs	r1, #0
 2619 00fc 0648     		ldr	r0, .L46+4
 2620 00fe 00EE103A 		vmov	s0, r3	@ int
 2621 0102 B8EE400A 		vcvt.f32.u32	s0, s0
 2622 0106 FFF7FEFF 		bl	_ZN5daisy10DaisyPetal16SetFootswitchLedENS0_13FootswitchLedEf
 2623              	.LVL120:
 100:ChorusPetal.cpp **** 
 101:ChorusPetal.cpp **** 		hw.UpdateLeds();
 2624              		.loc 12 101 3 is_stmt 1 discriminator 1 view .LVU612
 2625              		.loc 12 101 16 is_stmt 0 discriminator 1 view .LVU613
 2626 010a 0348     		ldr	r0, .L46+4
 2627 010c FFF7FEFF 		bl	_ZN5daisy10DaisyPetal10UpdateLedsEv
 2628              	.LVL121:
  94:ChorusPetal.cpp **** 	{
 2629              		.loc 12 94 2 is_stmt 1 discriminator 1 view .LVU614
 2630 0110 EBE7     		b	.L44
 2631              	.L47:
 2632 0112 00BF     		.align	2
 2633              	.L46:
 2634 0114 00D00500 		.word	_ZL8g_chorus+380928
 2635 0118 00000000 		.word	.LANCHOR0
 2636 011c 00000030 		.word	805306368
 2637 0120 00000000 		.word	.LANCHOR1
 2638 0124 0AD7233C 		.word	1008981770
 2639 0128 00000000 		.word	_Z13AudioCallbackPKPKfPPfj
 2640              		.cfi_endproc
 2641              	.LFE4108:
 2643              		.section	.text.startup._GLOBAL__sub_I_hw,"ax",%progbits
 2644              		.align	1
 2645              		.p2align 2,,3
 2646              		.syntax unified
 2647              		.thumb
 2648              		.thumb_func
 2649              		.fpu fpv5-d16
 2651              	_GLOBAL__sub_I_hw:
 2652              	.LFB4732:
 102:ChorusPetal.cpp **** 	}
 103:ChorusPetal.cpp **** }
 2653              		.loc 12 103 1 view -0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 0
 2656              		@ frame_needed = 0, uses_anonymous_args = 0
 2657              	.LBB1312:
 2658              	.LBI1312:
 2659              		.loc 12 103 1 view .LVU616
 2660              	.LVL122:
 2661              	.LBB1313:
 2662              	.LBB1314:
 2663              	.LBI1314:
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
 2664              		.loc 1 66 5 view .LVU617
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 100


 2665              	.LBB1315:
 2666              	.LBB1316:
 2667              	.LBI1316:
  21:../../DaisyExamples/libdaisy/src/daisy_seed.h ****     ~DaisySeed() {}
 2668              		.loc 5 21 5 view .LVU618
 2669              	.LBB1317:
 2670              	.LBB1318:
 2671              	.LBI1318:
  62:../../DaisyExamples/libdaisy/src/hid/audio.h ****     ~AudioHandle() {}
 2672              		.loc 9 62 5 view .LVU619
 2673              	.LBE1318:
 2674              	.LBE1317:
 2675              	.LBE1316:
 2676              	.LBE1315:
 2677              	.LBE1314:
 2678              	.LBE1313:
 2679              	.LBE1312:
 2680              		.loc 12 103 1 is_stmt 0 view .LVU620
 2681 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2682              		.cfi_def_cfa_offset 24
 2683              		.cfi_offset 4, -24
 2684              		.cfi_offset 5, -20
 2685              		.cfi_offset 6, -16
 2686              		.cfi_offset 7, -12
 2687              		.cfi_offset 8, -8
 2688              		.cfi_offset 14, -4
 2689              	.LBB1431:
 2690              	.LBB1426:
 2691              	.LBB1349:
 2692              	.LBB1346:
 2693              	.LBB1333:
 2694              	.LBB1331:
 2695              	.LBB1323:
 2696              	.LBB1319:
 2697              	.LBB1320:
  62:../../DaisyExamples/libdaisy/src/hid/audio.h ****     ~AudioHandle() {}
 2698              		.loc 9 62 35 view .LVU621
 2699 0004 0023     		movs	r3, #0
 2700 0006 2D4D     		ldr	r5, .L52
 2701              	.LBE1320:
 2702              	.LBE1319:
 2703              	.LBE1323:
 2704              	.LBE1331:
 2705              	.LBE1333:
 2706              	.LBB1334:
 2707              	.LBB1335:
 2708              		.file 20 "../../DaisyExamples/libdaisy/src/dev/leddriver.h"
   1:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #ifndef SA_LED_DRIVER_H
   3:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #define SA_LED_DRIVER_H /**< & */
   4:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** 
   5:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #ifdef __cplusplus
   6:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** 
   7:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #include <stdint.h>
   8:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #include "per/i2c.h"
   9:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** #include "per/gpio.h"
  10:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 101


  11:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** namespace daisy
  12:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** {
  13:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** /** LED driver for one or multiple PCA9685 12bit PWM chips connected to
  14:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * a single I2C peripheral.
  15:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * It includes gamma correction from 8bit brightness values but it 
  16:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * can also be supplied with raw 12bit values.
  17:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * This driver uses two buffers - one for drawing, one for transmitting.
  18:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * Multiple LedDriverPca9685 instances can be used at the same time.
  19:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * \param numDrivers    The number of PCA9685 driver attached to the I2C
  20:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      peripheral.
  21:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  * \param persistentBufferContents If set to true, the current draw buffer 
  22:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      contents will be copied to the next draw buffer 
  23:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      during SwapBuffersAndTransmit(). Use this, if you plan
  24:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      to write single leds at a time. 
  25:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      If you will alway update all leds before calling 
  26:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      SwapBuffersAndTransmit(), you can set this to false
  27:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  *                      and safe some cycles.
  28:../../DaisyExamples/libdaisy/src/dev/leddriver.h ****  */
  29:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** template <int numDrivers, bool persistentBufferContents = true>
  30:../../DaisyExamples/libdaisy/src/dev/leddriver.h **** class LedDriverPca9685
 2709              		.loc 20 30 7 view .LVU622
 2710 0008 4FF40072 		mov	r2, #512
 2711 000c 2C49     		ldr	r1, .L52+4
 2712 000e 05F2D240 		addw	r0, r5, #1234
 2713              	.LBE1335:
 2714              	.LBE1334:
 2715              	.LBB1340:
 2716              	.LBB1332:
 2717              	.LBB1324:
 2718              	.LBB1322:
 2719              	.LBB1321:
  62:../../DaisyExamples/libdaisy/src/hid/audio.h ****     ~AudioHandle() {}
 2720              		.loc 9 62 35 view .LVU623
 2721 0012 6B61     		str	r3, [r5, #20]
 2722              	.LVL123:
  62:../../DaisyExamples/libdaisy/src/hid/audio.h ****     ~AudioHandle() {}
 2723              		.loc 9 62 35 view .LVU624
 2724              	.LBE1321:
 2725              	.LBE1322:
 2726              	.LBE1324:
 2727              	.LBB1325:
 2728              	.LBI1325:
  84:../../DaisyExamples/libdaisy/src/per/adc.h ****     ~AdcHandle() {}
 2729              		.loc 8 84 5 is_stmt 1 view .LVU625
  84:../../DaisyExamples/libdaisy/src/per/adc.h ****     ~AdcHandle() {}
 2730              		.loc 8 84 5 is_stmt 0 view .LVU626
 2731              	.LBE1325:
 2732              	.LBB1326:
 2733              	.LBI1326:
 2734              		.file 21 "../../DaisyExamples/libdaisy/src/per/dac.h"
   1:../../DaisyExamples/libdaisy/src/per/dac.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/per/dac.h **** #ifndef DSY_DAC_H
   3:../../DaisyExamples/libdaisy/src/per/dac.h **** #define DSY_DAC_H
   4:../../DaisyExamples/libdaisy/src/per/dac.h **** 
   5:../../DaisyExamples/libdaisy/src/per/dac.h **** #include "daisy_core.h"
   6:../../DaisyExamples/libdaisy/src/per/dac.h **** 
   7:../../DaisyExamples/libdaisy/src/per/dac.h **** namespace daisy
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 102


   8:../../DaisyExamples/libdaisy/src/per/dac.h **** {
   9:../../DaisyExamples/libdaisy/src/per/dac.h **** /** DAC handle for Built-in DAC Peripheral 
  10:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** 
  11:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** For now only Normal Mode is supported,
  12:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** Sample and hold mode provides reduced power consumption, but requires a bit more setup.
  13:../../DaisyExamples/libdaisy/src/per/dac.h ****  **
  14:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** For now connecting the DAC through other internal periphearls is also not supported.
  15:../../DaisyExamples/libdaisy/src/per/dac.h ****  **
  16:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** Since the DAC channels have dedicated pins we don't need to pass in a pin config like with
  17:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** other modules. However, it is still important to not try to use the DAC pins for anything else.
  18:../../DaisyExamples/libdaisy/src/per/dac.h ****  ** DAC Channel 1 is on PA4, and DAC Channel 2 is on PA5
  19:../../DaisyExamples/libdaisy/src/per/dac.h ****  ***/
  20:../../DaisyExamples/libdaisy/src/per/dac.h **** class DacHandle
  21:../../DaisyExamples/libdaisy/src/per/dac.h **** {
  22:../../DaisyExamples/libdaisy/src/per/dac.h ****   public:
  23:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Return Values for the DacHandle class */
  24:../../DaisyExamples/libdaisy/src/per/dac.h ****     enum class Result
  25:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  26:../../DaisyExamples/libdaisy/src/per/dac.h ****         OK,
  27:../../DaisyExamples/libdaisy/src/per/dac.h ****         ERR,
  28:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  29:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  30:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Selects which channel(s) will be configured for use. */
  31:../../DaisyExamples/libdaisy/src/per/dac.h ****     enum class Channel
  32:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  33:../../DaisyExamples/libdaisy/src/per/dac.h ****         ONE,
  34:../../DaisyExamples/libdaisy/src/per/dac.h ****         TWO,
  35:../../DaisyExamples/libdaisy/src/per/dac.h ****         BOTH,
  36:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  37:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  38:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Sets the Mode for the DAC channels.
  39:../../DaisyExamples/libdaisy/src/per/dac.h ****      **
  40:../../DaisyExamples/libdaisy/src/per/dac.h ****      ** Polling mode uses the blocking mode to transmit a single value at a time.
  41:../../DaisyExamples/libdaisy/src/per/dac.h ****      **
  42:../../DaisyExamples/libdaisy/src/per/dac.h ****      ** DMA mode uses a buffer, and periodically transmits it triggering a 
  43:../../DaisyExamples/libdaisy/src/per/dac.h ****      ** callback to fill the buffer when it is ready for more samples.
  44:../../DaisyExamples/libdaisy/src/per/dac.h ****      ***/
  45:../../DaisyExamples/libdaisy/src/per/dac.h ****     enum class Mode
  46:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  47:../../DaisyExamples/libdaisy/src/per/dac.h ****         POLLING,
  48:../../DaisyExamples/libdaisy/src/per/dac.h ****         DMA,
  49:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  50:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  51:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Sets the number of bits per sample transmitted out of the DAC.
  52:../../DaisyExamples/libdaisy/src/per/dac.h ****      ** The output range will be: 0V - VDDA
  53:../../DaisyExamples/libdaisy/src/per/dac.h ****      ** The resolution will be roughly: bitdepth / (VDDA - 0V) 
  54:../../DaisyExamples/libdaisy/src/per/dac.h ****      ***/
  55:../../DaisyExamples/libdaisy/src/per/dac.h ****     enum class BitDepth
  56:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  57:../../DaisyExamples/libdaisy/src/per/dac.h ****         BITS_8,
  58:../../DaisyExamples/libdaisy/src/per/dac.h ****         BITS_12
  59:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  60:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  61:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Sets whether the DAC output is buffered for higher drive ability. */
  62:../../DaisyExamples/libdaisy/src/per/dac.h ****     enum class BufferState
  63:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  64:../../DaisyExamples/libdaisy/src/per/dac.h ****         ENABLED,
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 103


  65:../../DaisyExamples/libdaisy/src/per/dac.h ****         DISABLED,
  66:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  67:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  68:../../DaisyExamples/libdaisy/src/per/dac.h ****     /** Configuration structure for initializing the DAC structure. */
  69:../../DaisyExamples/libdaisy/src/per/dac.h ****     struct Config
  70:../../DaisyExamples/libdaisy/src/per/dac.h ****     {
  71:../../DaisyExamples/libdaisy/src/per/dac.h ****         /** Target Samplerate in Hz used to configure the internal 
  72:../../DaisyExamples/libdaisy/src/per/dac.h ****          ** timebase for DMA mode. Does nothing in POLLING mode.
  73:../../DaisyExamples/libdaisy/src/per/dac.h ****          ** If the value is 0 at Init time this will default to 48000Hz 
  74:../../DaisyExamples/libdaisy/src/per/dac.h ****          ** otherwise the driver will attempt meet the target.*/
  75:../../DaisyExamples/libdaisy/src/per/dac.h ****         uint32_t target_samplerate;
  76:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  77:../../DaisyExamples/libdaisy/src/per/dac.h ****         Channel     chn;
  78:../../DaisyExamples/libdaisy/src/per/dac.h ****         Mode        mode;
  79:../../DaisyExamples/libdaisy/src/per/dac.h ****         BitDepth    bitdepth;
  80:../../DaisyExamples/libdaisy/src/per/dac.h ****         BufferState buff_state;
  81:../../DaisyExamples/libdaisy/src/per/dac.h ****     };
  82:../../DaisyExamples/libdaisy/src/per/dac.h **** 
  83:../../DaisyExamples/libdaisy/src/per/dac.h ****     DacHandle() : pimpl_(nullptr) {}
 2735              		.loc 21 83 5 is_stmt 1 view .LVU627
 2736              	.LBB1327:
 2737              	.LBB1328:
 2738              		.loc 21 83 33 is_stmt 0 view .LVU628
 2739 0014 2B62     		str	r3, [r5, #32]
 2740              	.LVL124:
 2741              		.loc 21 83 33 view .LVU629
 2742              	.LBE1328:
 2743              	.LBE1327:
 2744              	.LBE1326:
 2745              	.LBB1329:
 2746              	.LBI1329:
  40:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
 2747              		.loc 7 40 5 is_stmt 1 view .LVU630
  40:../../DaisyExamples/libdaisy/src/hid/usb.h **** 
 2748              		.loc 7 40 5 is_stmt 0 view .LVU631
 2749              	.LBE1329:
 2750              	.LBB1330:
 2751              	.LBI1330:
  56:../../DaisyExamples/libdaisy/src/sys/system.h ****     ~System() {}
 2752              		.loc 6 56 5 is_stmt 1 view .LVU632
  56:../../DaisyExamples/libdaisy/src/sys/system.h ****     ~System() {}
 2753              		.loc 6 56 5 is_stmt 0 view .LVU633
 2754              	.LBE1330:
 2755              	.LBE1332:
 2756              	.LBE1340:
 2757              	.LBB1341:
 2758              	.LBI1341:
  20:../../DaisyExamples/libdaisy/src/hid/encoder.h ****     ~Encoder() {}
 2759              		.loc 3 20 5 is_stmt 1 view .LVU634
 2760              	.LBB1342:
 2761              	.LBB1343:
 2762              	.LBI1343:
  40:../../DaisyExamples/libdaisy/src/hid/switch.h ****     ~Switch() {}
 2763              		.loc 4 40 5 view .LVU635
  40:../../DaisyExamples/libdaisy/src/hid/switch.h ****     ~Switch() {}
 2764              		.loc 4 40 5 is_stmt 0 view .LVU636
 2765              	.LBE1343:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 104


 2766              	.LBE1342:
 2767              	.LBE1341:
 2768              	.LBE1346:
 2769              	.LBE1349:
 2770              	.LBE1426:
 2771              	.LBE1431:
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
 2772              		.loc 1 66 18 is_stmt 1 view .LVU637
 2773              	.LBB1432:
 2774              	.LBB1427:
 2775              	.LBB1350:
 2776              	.LBB1347:
 2777              	.LBB1344:
 2778              	.LBI1344:
  21:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     /** destructor */
 2779              		.loc 2 21 5 view .LVU638
  21:../../DaisyExamples/libdaisy/src/hid/ctrl.h ****     /** destructor */
 2780              		.loc 2 21 5 is_stmt 0 view .LVU639
 2781              	.LBE1344:
 2782              	.LBE1347:
 2783              	.LBE1350:
 2784              	.LBE1427:
 2785              	.LBE1432:
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
 2786              		.loc 1 66 18 is_stmt 1 view .LVU640
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
 2787              		.loc 1 66 18 view .LVU641
  66:../../DaisyExamples/libdaisy/src/daisy_petal.h ****     /** Destructor */
 2788              		.loc 1 66 18 view .LVU642
 2789              	.LBB1433:
 2790              	.LBB1428:
 2791              	.LBB1351:
 2792              	.LBB1348:
 2793              	.LBB1345:
 2794              	.LBI1334:
 2795              		.loc 20 30 7 view .LVU643
 2796              	.LBB1339:
 2797              	.LBB1336:
 2798              	.LBI1336:
 2799              		.file 22 "../../DaisyExamples/libdaisy/src/per/i2c.h"
   1:../../DaisyExamples/libdaisy/src/per/i2c.h **** #pragma once
   2:../../DaisyExamples/libdaisy/src/per/i2c.h **** #include "daisy_core.h"
   3:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
   4:../../DaisyExamples/libdaisy/src/per/i2c.h **** namespace daisy
   5:../../DaisyExamples/libdaisy/src/per/i2c.h **** {
   6:../../DaisyExamples/libdaisy/src/per/i2c.h **** /** A handle for interacting with an I2C peripheral. This is a dumb
   7:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *  gateway that internally points to one of the four I2C peripherals
   8:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *  after it was initialised. It can then be copied and passed around.
   9:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *  Use an I2CHandle like this:
  10:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *  
  11:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      // setup the configuration
  12:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      I2CHandle::Config i2c_conf;
  13:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c_conf.periph = I2CHandle::Config::Peripheral::I2C_1;
  14:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c_conf.speed  = I2CHandle::Config::Speed::I2C_400KHZ;
  15:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c_conf.mode   = I2CHandle::Config::Mode::Master;
  16:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c_conf.pin_config.scl  = {DSY_GPIOB, 8};
  17:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c_conf.pin_config.sda  = {DSY_GPIOB, 9};
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 105


  18:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      // initialise the peripheral
  19:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      I2CHandle i2c;
  20:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c.Init(i2c_conf);
  21:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      // now i2c points to the corresponding peripheral and can be used.
  22:../../DaisyExamples/libdaisy/src/per/i2c.h ****  *      i2c.TransmitBlocking( ... );
  23:../../DaisyExamples/libdaisy/src/per/i2c.h ****  */
  24:../../DaisyExamples/libdaisy/src/per/i2c.h **** class I2CHandle
  25:../../DaisyExamples/libdaisy/src/per/i2c.h **** {
  26:../../DaisyExamples/libdaisy/src/per/i2c.h ****   public:
  27:../../DaisyExamples/libdaisy/src/per/i2c.h ****     /** Contains settings for initialising an I2C interface. */
  28:../../DaisyExamples/libdaisy/src/per/i2c.h ****     struct Config
  29:../../DaisyExamples/libdaisy/src/per/i2c.h ****     {
  30:../../DaisyExamples/libdaisy/src/per/i2c.h ****         /** Specifies whether the interface will operate in master or slave mode. */
  31:../../DaisyExamples/libdaisy/src/per/i2c.h ****         enum class Mode
  32:../../DaisyExamples/libdaisy/src/per/i2c.h ****         {
  33:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_MASTER,
  34:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_SLAVE,
  35:../../DaisyExamples/libdaisy/src/per/i2c.h ****         };
  36:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  37:../../DaisyExamples/libdaisy/src/per/i2c.h ****         /** Specifices the internal peripheral to use (these are mapped to different pins on the ha
  38:../../DaisyExamples/libdaisy/src/per/i2c.h ****         enum class Peripheral
  39:../../DaisyExamples/libdaisy/src/per/i2c.h ****         {
  40:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_1 = 0, /**< & */
  41:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_2,     /**< & */
  42:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_3,     /**< & */
  43:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_4,     /**< & */
  44:../../DaisyExamples/libdaisy/src/per/i2c.h ****         };
  45:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  46:../../DaisyExamples/libdaisy/src/per/i2c.h ****         /** Rate at which the clock/data will be sent/received. The device being used will have max
  47:../../DaisyExamples/libdaisy/src/per/i2c.h ****          *  1MHZ Mode is currently 886kHz
  48:../../DaisyExamples/libdaisy/src/per/i2c.h ****          */
  49:../../DaisyExamples/libdaisy/src/per/i2c.h ****         enum class Speed
  50:../../DaisyExamples/libdaisy/src/per/i2c.h ****         {
  51:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_100KHZ, /**< & */
  52:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_400KHZ, /**< & */
  53:../../DaisyExamples/libdaisy/src/per/i2c.h ****             I2C_1MHZ,   /**< & */
  54:../../DaisyExamples/libdaisy/src/per/i2c.h ****         };
  55:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  56:../../DaisyExamples/libdaisy/src/per/i2c.h ****         Peripheral periph; /**< & */
  57:../../DaisyExamples/libdaisy/src/per/i2c.h ****         struct
  58:../../DaisyExamples/libdaisy/src/per/i2c.h ****         {
  59:../../DaisyExamples/libdaisy/src/per/i2c.h ****             dsy_gpio_pin scl; /**< & */
  60:../../DaisyExamples/libdaisy/src/per/i2c.h ****             dsy_gpio_pin sda; /**< & */
  61:../../DaisyExamples/libdaisy/src/per/i2c.h ****         } pin_config;         /**< & */
  62:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  63:../../DaisyExamples/libdaisy/src/per/i2c.h ****         Speed speed; /**< & */
  64:../../DaisyExamples/libdaisy/src/per/i2c.h ****         Mode  mode;  /**< & */
  65:../../DaisyExamples/libdaisy/src/per/i2c.h ****         // 0x10 is chosen as a default to avoid conflicts with reserved addresses
  66:../../DaisyExamples/libdaisy/src/per/i2c.h ****         uint8_t address = 0x10; /**< & */
  67:../../DaisyExamples/libdaisy/src/per/i2c.h ****     };
  68:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  69:../../DaisyExamples/libdaisy/src/per/i2c.h ****     /** Return values for I2C functions. */
  70:../../DaisyExamples/libdaisy/src/per/i2c.h ****     enum class Result
  71:../../DaisyExamples/libdaisy/src/per/i2c.h ****     {
  72:../../DaisyExamples/libdaisy/src/per/i2c.h ****         OK, /**< & */
  73:../../DaisyExamples/libdaisy/src/per/i2c.h ****         ERR /**< & */
  74:../../DaisyExamples/libdaisy/src/per/i2c.h ****     };
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 106


  75:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  76:../../DaisyExamples/libdaisy/src/per/i2c.h ****     enum class Direction
  77:../../DaisyExamples/libdaisy/src/per/i2c.h ****     {
  78:../../DaisyExamples/libdaisy/src/per/i2c.h ****         TRANSMIT, /**< & */
  79:../../DaisyExamples/libdaisy/src/per/i2c.h ****         RECEIVE,  /**< & */
  80:../../DaisyExamples/libdaisy/src/per/i2c.h ****     };
  81:../../DaisyExamples/libdaisy/src/per/i2c.h **** 
  82:../../DaisyExamples/libdaisy/src/per/i2c.h ****     I2CHandle() : pimpl_(nullptr) {}
 2800              		.loc 22 82 5 view .LVU644
 2801              	.LBB1337:
 2802              	.LBB1338:
 2803              		.loc 22 82 33 is_stmt 0 view .LVU645
 2804 0016 C5F8BC34 		str	r3, [r5, #1212]
 2805              	.LVL125:
 2806              		.loc 22 82 33 view .LVU646
 2807              	.LBE1338:
 2808              	.LBE1337:
 2809              	.LBE1336:
 2810              		.loc 20 30 7 view .LVU647
 2811 001a FFF7FEFF 		bl	memcpy
 2812              	.LVL126:
 2813              		.loc 20 30 7 view .LVU648
 2814              	.LBE1339:
 2815              	.LBE1345:
 2816              	.LBE1348:
 2817              	.LBE1351:
  29:ChorusPetal.cpp **** static dingus_dsp::Chorus g_chorus;
 2818              		.loc 12 29 12 view .LVU649
 2819 001e 294A     		ldr	r2, .L52+8
 2820 0020 2949     		ldr	r1, .L52+12
 2821 0022 2846     		mov	r0, r5
 2822 0024 294C     		ldr	r4, .L52+16
 2823 0026 DFF8C880 		ldr	r8, .L52+52
 2824 002a FFF7FEFF 		bl	__aeabi_atexit
 2825              	.LVL127:
 2826              	.LBB1352:
 2827              	.LBI1352:
  17:dingus_dsp/chorus.h **** 
 2828              		.loc 10 17 9 is_stmt 1 view .LVU650
 2829              	.LBB1353:
 2830              	.LBB1354:
 2831              	.LBB1355:
 2832              	.LBI1355:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 2833              		.loc 11 94 12 view .LVU651
 2834              	.LBB1356:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 2835              		.loc 11 94 12 view .LVU652
 2836              	.L49:
 2837              	.LBB1357:
 2838              	.LBI1357:
  18:dingus_dsp/multitap_delay.h ****         ~MultitapDelay() {}
 2839              		.loc 14 18 9 view .LVU653
 2840              	.LBB1358:
 2841              	.LBB1359:
 2842              	.LBI1359:
  26:dingus_dsp/delayline.h ****             Clear();
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 107


 2843              		.loc 18 26 9 view .LVU654
 2844              	.LBB1360:
 2845              	.LBI1360:
  38:dingus_dsp/delayline.h ****             buffer_.fill(SampleType(0));
 2846              		.loc 18 38 14 view .LVU655
 2847              	.LBB1361:
 2848              	.LBB1362:
 2849              	.LBI1362:
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 2850              		.loc 11 116 7 view .LVU656
 2851              	.LBB1363:
 2852              	.LBI1363:
 2853              		.loc 19 1089 5 view .LVU657
 2854              		.loc 19 1089 5 is_stmt 0 view .LVU658
 2855              	.LBE1363:
 2856              	.LBE1362:
 2857              	.LBE1361:
 2858              	.LBE1360:
 2859              	.LBE1359:
 2860              	.LBE1358:
 2861              	.LBE1357:
 2862              	.LBE1356:
 2863              	.LBE1355:
 2864              	.LBE1354:
 2865              	.LBE1353:
 2866              	.LBE1352:
 2867              	.LBE1428:
 2868              	.LBE1433:
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 2869              		.loc 19 951 37 is_stmt 1 view .LVU659
 2870              	.LBB1434:
 2871              	.LBB1429:
 2872              	.LBB1412:
 2873              	.LBB1410:
 2874              	.LBB1408:
 2875              	.LBB1407:
 2876              	.LBB1406:
 2877              	.LBB1404:
 2878              	.LBB1402:
 2879              	.LBB1391:
 2880              	.LBB1388:
 2881              	.LBB1385:
 2882              	.LBB1382:
 2883              	.LBB1379:
 2884              	.LBB1364:
 2885              	.LBI1364:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2886              		.loc 19 1054 5 view .LVU660
 2887              	.LBB1365:
 2888              	.LBI1365:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 2889              		.loc 19 1054 5 view .LVU661
 2890              	.LBB1366:
 2891              	.LBI1366:
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 2892              		.loc 19 913 5 view .LVU662
 2893              	.LBB1367:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 108


 2894              	.LBI1367:
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 2895              		.loc 19 868 5 view .LVU663
 2896              	.LBB1368:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 2897              		.loc 19 872 22 view .LVU664
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2898              		.loc 19 873 11 is_stmt 0 view .LVU665
 2899 002e 2848     		ldr	r0, .L52+20
 2900 0030 0021     		movs	r1, #0
 2901 0032 284A     		ldr	r2, .L52+24
 2902              	.LBE1368:
 2903              	.LBE1367:
 2904              	.LBE1366:
 2905              	.LBE1365:
 2906              	.LBE1364:
 2907              	.LBE1379:
 2908              	.LBE1382:
 2909              	.LBE1385:
 2910              	.LBE1388:
 2911              	.LBE1391:
 2912              	.LBB1392:
 2913              	.LBB1393:
  33:dingus_dsp/oscillator.h ****         ~Oscillator() {}
 2914              		.loc 15 33 22 view .LVU666
 2915 0034 0025     		movs	r5, #0
 2916              	.LBE1393:
 2917              	.LBE1392:
 2918              	.LBB1397:
 2919              	.LBB1389:
 2920              	.LBB1386:
 2921              	.LBB1383:
 2922              	.LBB1380:
 2923              	.LBB1377:
 2924              	.LBB1375:
 2925              	.LBB1373:
 2926              	.LBB1371:
 2927              	.LBB1369:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2928              		.loc 19 873 11 view .LVU667
 2929 0036 2044     		add	r0, r0, r4
 2930              	.LVL128:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2931              		.loc 19 873 11 view .LVU668
 2932              	.LBE1369:
 2933              	.LBE1371:
 2934              	.LBE1373:
 2935              	.LBE1375:
 2936              	.LBE1377:
 2937              	.LBE1380:
 2938              	.LBE1383:
 2939              	.LBE1386:
 2940              	.LBE1389:
 2941              	.LBE1397:
 2942              	.LBB1398:
 2943              	.LBB1394:
  33:dingus_dsp/oscillator.h ****         ~Oscillator() {}
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 109


 2944              		.loc 15 33 22 view .LVU669
 2945 0038 4FF07E57 		mov	r7, #1065353216
 2946              	.LBE1394:
 2947              	.LBE1398:
 2948              	.LBB1399:
 2949              	.LBB1390:
 2950              	.LBB1387:
 2951              	.LBB1384:
 2952              	.LBB1381:
 2953              	.LBB1378:
 2954              	.LBB1376:
 2955              	.LBB1374:
 2956              	.LBB1372:
 2957              	.LBB1370:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2958              		.loc 19 873 11 view .LVU670
 2959 003c FFF7FEFF 		bl	memset
 2960              	.LVL129:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 2961              		.loc 19 873 11 view .LVU671
 2962              	.LBE1370:
 2963              	.LBE1372:
 2964              	.LBE1374:
 2965              	.LBE1376:
 2966              	.LBE1378:
 2967              	.LBE1381:
 2968              	.LBE1384:
  40:dingus_dsp/delayline.h ****         }
 2969              		.loc 18 40 18 view .LVU672
 2970 0040 0026     		movs	r6, #0
 2971              	.LBE1387:
 2972              	.LBE1390:
 2973              	.LBE1399:
 2974              	.LBB1400:
 2975              	.LBB1395:
  33:dingus_dsp/oscillator.h ****         ~Oscillator() {}
 2976              		.loc 15 33 22 view .LVU673
 2977 0042 254B     		ldr	r3, .L52+28
 2978 0044 44F82C7C 		str	r7, [r4, #-44]	@ float
 2979 0048 44F8283C 		str	r3, [r4, #-40]	@ float
 2980 004c 44F8245C 		str	r5, [r4, #-36]	@ float
 2981 0050 44F8205C 		str	r5, [r4, #-32]	@ float
 2982 0054 44F81C5C 		str	r5, [r4, #-28]	@ float
 2983              	.LBE1395:
 2984              	.LBE1400:
  18:dingus_dsp/multitap_delay.h ****         ~MultitapDelay() {}
 2985              		.loc 14 18 25 view .LVU674
 2986 0058 44F8105C 		str	r5, [r4, #-16]	@ float
 2987 005c 44F80C5C 		str	r5, [r4, #-12]	@ float
 2988 0060 44F8085C 		str	r5, [r4, #-8]	@ float
 2989 0064 44F8045C 		str	r5, [r4, #-4]	@ float
 2990              	.LVL130:
  18:dingus_dsp/multitap_delay.h ****         ~MultitapDelay() {}
 2991              		.loc 14 18 25 view .LVU675
 2992              	.LBE1402:
 2993              	.LBE1404:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 110


 2994              		.loc 11 94 12 is_stmt 1 view .LVU676
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 2995              		.loc 11 94 12 view .LVU677
 2996              	.LBB1405:
 2997              	.LBB1403:
 2998              	.LBB1401:
 2999              	.LBB1396:
  33:dingus_dsp/oscillator.h ****         ~Oscillator() {}
 3000              		.loc 15 33 22 is_stmt 0 view .LVU678
 3001 0068 44E90D66 		strd	r6, r6, [r4, #-52]
 3002              	.LBE1396:
 3003              	.LBE1401:
 3004              	.LBE1403:
 3005              	.LBE1405:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 3006              		.loc 11 94 12 view .LVU679
 3007 006c 04F53B34 		add	r4, r4, #191488
 3008              	.LVL131:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 3009              		.loc 11 94 12 view .LVU680
 3010 0070 04F50D74 		add	r4, r4, #564
 3011              	.LVL132:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 3012              		.loc 11 94 12 view .LVU681
 3013 0074 4445     		cmp	r4, r8
 3014 0076 DAD1     		bne	.L49
 3015              	.LVL133:
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
 3016              		.loc 11 94 12 view .LVU682
 3017              	.LBE1406:
 3018              	.LBE1407:
  17:dingus_dsp/chorus.h **** 
 3019              		.loc 10 17 18 view .LVU683
 3020 0078 184B     		ldr	r3, .L52+32
 3021              	.LBE1408:
 3022              	.LBE1410:
 3023              	.LBE1412:
  30:ChorusPetal.cpp **** static GlobalParameters g_param;
 3024              		.loc 12 30 27 view .LVU684
 3025 007a 124A     		ldr	r2, .L52+8
 3026              	.LBB1413:
 3027              	.LBB1411:
 3028              	.LBB1409:
  17:dingus_dsp/chorus.h **** 
 3029              		.loc 10 17 18 view .LVU685
 3030 007c 1D60     		str	r5, [r3]	@ float
 3031              	.LVL134:
  17:dingus_dsp/chorus.h **** 
 3032              		.loc 10 17 18 view .LVU686
 3033              	.LBE1409:
 3034              	.LBE1411:
 3035              	.LBE1413:
  30:ChorusPetal.cpp **** static GlobalParameters g_param;
 3036              		.loc 12 30 27 view .LVU687
 3037 007e 1849     		ldr	r1, .L52+36
 3038 0080 1848     		ldr	r0, .L52+40
 3039 0082 FFF7FEFF 		bl	__aeabi_atexit
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 111


 3040              	.LVL135:
 3041              	.LBB1414:
 3042              	.LBI1414:
  12:ChorusPetal.cpp **** {
 3043              		.loc 12 12 8 is_stmt 1 view .LVU688
 3044              	.LBB1415:
 3045 0086 1848     		ldr	r0, .L52+44
 3046 0088 4FF07C53 		mov	r3, #1056964608
 3047              	.LBE1415:
 3048              	.LBE1414:
  31:ChorusPetal.cpp **** 
 3049              		.loc 12 31 25 is_stmt 0 view .LVU689
 3050 008c 0D4A     		ldr	r2, .L52+8
 3051              	.LBB1424:
 3052              	.LBB1422:
  12:ChorusPetal.cpp **** {
 3053              		.loc 12 12 8 view .LVU690
 3054 008e 0670     		strb	r6, [r0]
 3055 0090 8760     		str	r7, [r0, #8]	@ float
 3056 0092 C560     		str	r5, [r0, #12]	@ float
 3057 0094 0761     		str	r7, [r0, #16]	@ float
 3058              	.LVL136:
 3059              	.LBB1416:
 3060              	.LBI1416:
  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3061              		.loc 13 27 9 is_stmt 1 view .LVU691
 3062              	.LBB1417:
 3063              	.LBB1418:
  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3064              		.loc 13 27 23 is_stmt 0 view .LVU692
 3065 0096 4561     		str	r5, [r0, #20]	@ float
 3066 0098 8561     		str	r5, [r0, #24]	@ float
 3067 009a C561     		str	r5, [r0, #28]	@ float
 3068 009c 0562     		str	r5, [r0, #32]	@ float
 3069 009e 4662     		str	r6, [r0, #36]
 3070 00a0 8562     		str	r5, [r0, #40]	@ float
 3071              	.LVL137:
  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3072              		.loc 13 27 23 view .LVU693
 3073              	.LBE1418:
 3074              	.LBE1417:
 3075              	.LBE1416:
 3076              	.LBB1419:
 3077              	.LBI1419:
  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3078              		.loc 13 27 9 is_stmt 1 view .LVU694
 3079              	.LBB1420:
 3080              	.LBB1421:
  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3081              		.loc 13 27 23 is_stmt 0 view .LVU695
 3082 00a2 C562     		str	r5, [r0, #44]	@ float
 3083 00a4 0563     		str	r5, [r0, #48]	@ float
 3084 00a6 4563     		str	r5, [r0, #52]	@ float
 3085 00a8 8563     		str	r5, [r0, #56]	@ float
 3086 00aa C663     		str	r6, [r0, #60]
 3087 00ac 0564     		str	r5, [r0, #64]	@ float
 3088              	.LVL138:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 112


  27:dingus_dsp/smooth_value.h ****             curr_ = 0;
 3089              		.loc 13 27 23 view .LVU696
 3090              	.LBE1421:
 3091              	.LBE1420:
 3092              	.LBE1419:
 3093              	.LBE1422:
 3094              	.LBE1424:
  31:ChorusPetal.cpp **** 
 3095              		.loc 12 31 25 view .LVU697
 3096 00ae 0F49     		ldr	r1, .L52+48
 3097              	.LBB1425:
 3098              	.LBB1423:
  12:ChorusPetal.cpp **** {
 3099              		.loc 12 12 8 view .LVU698
 3100 00b0 4360     		str	r3, [r0, #4]	@ float
 3101              	.LBE1423:
 3102              	.LBE1425:
 3103              	.LBE1429:
 3104              	.LBE1434:
 3105              		.loc 12 103 1 view .LVU699
 3106 00b2 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3107              		.cfi_restore 14
 3108              		.cfi_restore 8
 3109              		.cfi_restore 7
 3110              		.cfi_restore 6
 3111              		.cfi_restore 5
 3112              		.cfi_restore 4
 3113              		.cfi_def_cfa_offset 0
 3114              	.LVL139:
 3115              	.LBB1435:
 3116              	.LBB1430:
  31:ChorusPetal.cpp **** 
 3117              		.loc 12 31 25 view .LVU700
 3118 00b6 FFF7FEBF 		b	__aeabi_atexit
 3119              	.LVL140:
 3120              	.L53:
 3121 00ba 00BF     		.align	2
 3122              	.L52:
 3123 00bc 00000000 		.word	.LANCHOR0
 3124 00c0 00000000 		.word	.LANCHOR2
 3125 00c4 00000000 		.word	__dso_handle
 3126 00c8 00000000 		.word	_ZN5daisy10DaisyPetalD1Ev
 3127 00cc 34EE0200 		.word	_ZL8g_chorus+192052
 3128 00d0 CC11FDFF 		.word	-192052
 3129 00d4 00EE0200 		.word	192000
 3130 00d8 00005C43 		.word	1130102784
 3131 00dc 68DC0500 		.word	_ZL8g_chorus+384104
 3132 00e0 00000000 		.word	_ZN10dingus_dsp6ChorusD1Ev
 3133 00e4 00000000 		.word	_ZL8g_chorus
 3134 00e8 00000000 		.word	.LANCHOR1
 3135 00ec 00000000 		.word	_ZN16GlobalParametersD1Ev
 3136 00f0 9CCA0800 		.word	_ZL8g_chorus+576156
 3137              	.LBE1430:
 3138              	.LBE1435:
 3139              		.cfi_endproc
 3140              	.LFE4732:
 3142              		.section	.init_array,"aw",%init_array
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 113


 3143              		.align	2
 3144 0000 00000000 		.word	_GLOBAL__sub_I_hw(target1)
 3145              		.global	hw
 3146              		.section	.rodata
 3147              		.align	2
 3148              		.set	.LANCHOR2,. + 0
 3149              	.LC0:
 3150 0000 0000     		.short	0
 3151 0002 0100     		.short	1
 3152 0004 0100     		.short	1
 3153 0006 0100     		.short	1
 3154 0008 0100     		.short	1
 3155 000a 0100     		.short	1
 3156 000c 0100     		.short	1
 3157 000e 0100     		.short	1
 3158 0010 0100     		.short	1
 3159 0012 0100     		.short	1
 3160 0014 0100     		.short	1
 3161 0016 0100     		.short	1
 3162 0018 0200     		.short	2
 3163 001a 0200     		.short	2
 3164 001c 0200     		.short	2
 3165 001e 0200     		.short	2
 3166 0020 0200     		.short	2
 3167 0022 0200     		.short	2
 3168 0024 0200     		.short	2
 3169 0026 0300     		.short	3
 3170 0028 0300     		.short	3
 3171 002a 0400     		.short	4
 3172 002c 0400     		.short	4
 3173 002e 0500     		.short	5
 3174 0030 0500     		.short	5
 3175 0032 0600     		.short	6
 3176 0034 0700     		.short	7
 3177 0036 0800     		.short	8
 3178 0038 0800     		.short	8
 3179 003a 0900     		.short	9
 3180 003c 0A00     		.short	10
 3181 003e 0B00     		.short	11
 3182 0040 0C00     		.short	12
 3183 0042 0D00     		.short	13
 3184 0044 0F00     		.short	15
 3185 0046 1000     		.short	16
 3186 0048 1100     		.short	17
 3187 004a 1200     		.short	18
 3188 004c 1400     		.short	20
 3189 004e 1500     		.short	21
 3190 0050 1700     		.short	23
 3191 0052 1900     		.short	25
 3192 0054 1A00     		.short	26
 3193 0056 1C00     		.short	28
 3194 0058 1E00     		.short	30
 3195 005a 2000     		.short	32
 3196 005c 2200     		.short	34
 3197 005e 2400     		.short	36
 3198 0060 2600     		.short	38
 3199 0062 2800     		.short	40
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 114


 3200 0064 2B00     		.short	43
 3201 0066 2D00     		.short	45
 3202 0068 3000     		.short	48
 3203 006a 3200     		.short	50
 3204 006c 3500     		.short	53
 3205 006e 3800     		.short	56
 3206 0070 3B00     		.short	59
 3207 0072 3E00     		.short	62
 3208 0074 4100     		.short	65
 3209 0076 4400     		.short	68
 3210 0078 4700     		.short	71
 3211 007a 4B00     		.short	75
 3212 007c 4E00     		.short	78
 3213 007e 5200     		.short	82
 3214 0080 5500     		.short	85
 3215 0082 5900     		.short	89
 3216 0084 5D00     		.short	93
 3217 0086 6100     		.short	97
 3218 0088 6500     		.short	101
 3219 008a 6900     		.short	105
 3220 008c 6E00     		.short	110
 3221 008e 7200     		.short	114
 3222 0090 7700     		.short	119
 3223 0092 7B00     		.short	123
 3224 0094 8000     		.short	128
 3225 0096 8500     		.short	133
 3226 0098 8A00     		.short	138
 3227 009a 8F00     		.short	143
 3228 009c 9500     		.short	149
 3229 009e 9A00     		.short	154
 3230 00a0 9F00     		.short	159
 3231 00a2 A500     		.short	165
 3232 00a4 AB00     		.short	171
 3233 00a6 B100     		.short	177
 3234 00a8 B700     		.short	183
 3235 00aa BD00     		.short	189
 3236 00ac C300     		.short	195
 3237 00ae CA00     		.short	202
 3238 00b0 D000     		.short	208
 3239 00b2 D700     		.short	215
 3240 00b4 DE00     		.short	222
 3241 00b6 E500     		.short	229
 3242 00b8 EC00     		.short	236
 3243 00ba F300     		.short	243
 3244 00bc FA00     		.short	250
 3245 00be 0201     		.short	258
 3246 00c0 0A01     		.short	266
 3247 00c2 1101     		.short	273
 3248 00c4 1901     		.short	281
 3249 00c6 2201     		.short	290
 3250 00c8 2A01     		.short	298
 3251 00ca 3201     		.short	306
 3252 00cc 3B01     		.short	315
 3253 00ce 4401     		.short	324
 3254 00d0 4C01     		.short	332
 3255 00d2 5501     		.short	341
 3256 00d4 5F01     		.short	351
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 115


 3257 00d6 6801     		.short	360
 3258 00d8 7101     		.short	369
 3259 00da 7B01     		.short	379
 3260 00dc 8501     		.short	389
 3261 00de 8F01     		.short	399
 3262 00e0 9901     		.short	409
 3263 00e2 A301     		.short	419
 3264 00e4 AE01     		.short	430
 3265 00e6 B801     		.short	440
 3266 00e8 C301     		.short	451
 3267 00ea CE01     		.short	462
 3268 00ec D901     		.short	473
 3269 00ee E501     		.short	485
 3270 00f0 F001     		.short	496
 3271 00f2 FC01     		.short	508
 3272 00f4 0802     		.short	520
 3273 00f6 1402     		.short	532
 3274 00f8 2002     		.short	544
 3275 00fa 2C02     		.short	556
 3276 00fc 3902     		.short	569
 3277 00fe 4602     		.short	582
 3278 0100 5202     		.short	594
 3279 0102 6002     		.short	608
 3280 0104 6D02     		.short	621
 3281 0106 7A02     		.short	634
 3282 0108 8802     		.short	648
 3283 010a 9602     		.short	662
 3284 010c A402     		.short	676
 3285 010e B202     		.short	690
 3286 0110 C002     		.short	704
 3287 0112 CF02     		.short	719
 3288 0114 DE02     		.short	734
 3289 0116 ED02     		.short	749
 3290 0118 FC02     		.short	764
 3291 011a 0B03     		.short	779
 3292 011c 1B03     		.short	795
 3293 011e 2B03     		.short	811
 3294 0120 3B03     		.short	827
 3295 0122 4B03     		.short	843
 3296 0124 5B03     		.short	859
 3297 0126 6C03     		.short	876
 3298 0128 7D03     		.short	893
 3299 012a 8E03     		.short	910
 3300 012c 9F03     		.short	927
 3301 012e B003     		.short	944
 3302 0130 C203     		.short	962
 3303 0132 D403     		.short	980
 3304 0134 E603     		.short	998
 3305 0136 F803     		.short	1016
 3306 0138 0A04     		.short	1034
 3307 013a 1D04     		.short	1053
 3308 013c 3004     		.short	1072
 3309 013e 4304     		.short	1091
 3310 0140 5604     		.short	1110
 3311 0142 6A04     		.short	1130
 3312 0144 7E04     		.short	1150
 3313 0146 9204     		.short	1170
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 116


 3314 0148 A604     		.short	1190
 3315 014a BA04     		.short	1210
 3316 014c CF04     		.short	1231
 3317 014e E404     		.short	1252
 3318 0150 F904     		.short	1273
 3319 0152 0E05     		.short	1294
 3320 0154 2405     		.short	1316
 3321 0156 3A05     		.short	1338
 3322 0158 5005     		.short	1360
 3323 015a 6605     		.short	1382
 3324 015c 7C05     		.short	1404
 3325 015e 9305     		.short	1427
 3326 0160 AA05     		.short	1450
 3327 0162 C105     		.short	1473
 3328 0164 D905     		.short	1497
 3329 0166 F005     		.short	1520
 3330 0168 0806     		.short	1544
 3331 016a 2006     		.short	1568
 3332 016c 3906     		.short	1593
 3333 016e 5106     		.short	1617
 3334 0170 6A06     		.short	1642
 3335 0172 8306     		.short	1667
 3336 0174 9D06     		.short	1693
 3337 0176 B606     		.short	1718
 3338 0178 D006     		.short	1744
 3339 017a EA06     		.short	1770
 3340 017c 0507     		.short	1797
 3341 017e 1F07     		.short	1823
 3342 0180 3A07     		.short	1850
 3343 0182 5507     		.short	1877
 3344 0184 7107     		.short	1905
 3345 0186 8C07     		.short	1932
 3346 0188 A807     		.short	1960
 3347 018a C407     		.short	1988
 3348 018c E107     		.short	2017
 3349 018e FD07     		.short	2045
 3350 0190 1A08     		.short	2074
 3351 0192 3708     		.short	2103
 3352 0194 5508     		.short	2133
 3353 0196 7208     		.short	2162
 3354 0198 9008     		.short	2192
 3355 019a AF08     		.short	2223
 3356 019c CD08     		.short	2253
 3357 019e EC08     		.short	2284
 3358 01a0 0B09     		.short	2315
 3359 01a2 2A09     		.short	2346
 3360 01a4 4A09     		.short	2378
 3361 01a6 6A09     		.short	2410
 3362 01a8 8A09     		.short	2442
 3363 01aa AA09     		.short	2474
 3364 01ac CB09     		.short	2507
 3365 01ae EC09     		.short	2540
 3366 01b0 0D0A     		.short	2573
 3367 01b2 2E0A     		.short	2606
 3368 01b4 500A     		.short	2640
 3369 01b6 720A     		.short	2674
 3370 01b8 940A     		.short	2708
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 117


 3371 01ba B70A     		.short	2743
 3372 01bc DA0A     		.short	2778
 3373 01be FD0A     		.short	2813
 3374 01c0 210B     		.short	2849
 3375 01c2 440B     		.short	2884
 3376 01c4 680B     		.short	2920
 3377 01c6 8D0B     		.short	2957
 3378 01c8 B10B     		.short	2993
 3379 01ca D60B     		.short	3030
 3380 01cc FB0B     		.short	3067
 3381 01ce 210C     		.short	3105
 3382 01d0 470C     		.short	3143
 3383 01d2 6D0C     		.short	3181
 3384 01d4 930C     		.short	3219
 3385 01d6 BA0C     		.short	3258
 3386 01d8 E10C     		.short	3297
 3387 01da 080D     		.short	3336
 3388 01dc 300D     		.short	3376
 3389 01de 580D     		.short	3416
 3390 01e0 800D     		.short	3456
 3391 01e2 A80D     		.short	3496
 3392 01e4 D10D     		.short	3537
 3393 01e6 FA0D     		.short	3578
 3394 01e8 230E     		.short	3619
 3395 01ea 4D0E     		.short	3661
 3396 01ec 770E     		.short	3703
 3397 01ee A10E     		.short	3745
 3398 01f0 CC0E     		.short	3788
 3399 01f2 F70E     		.short	3831
 3400 01f4 220F     		.short	3874
 3401 01f6 4E0F     		.short	3918
 3402 01f8 7A0F     		.short	3962
 3403 01fa A60F     		.short	4006
 3404 01fc D20F     		.short	4050
 3405 01fe FF0F     		.short	4095
 3406              		.section	.bss._ZL7g_param,"aw",%nobits
 3407              		.align	2
 3408              		.set	.LANCHOR1,. + 0
 3411              	_ZL7g_param:
 3412 0000 00000000 		.space	68
 3412      00000000 
 3412      00000000 
 3412      00000000 
 3412      00000000 
 3413              		.section	.bss._ZL8g_chorus,"aw",%nobits
 3414              		.align	2
 3417              	_ZL8g_chorus:
 3418 0000 00000000 		.space	384108
 3418      00000000 
 3418      00000000 
 3418      00000000 
 3418      00000000 
 3419              		.section	.bss.hw,"aw",%nobits
 3420              		.align	2
 3421              		.set	.LANCHOR0,. + 0
 3424              	hw:
 3425 0000 00000000 		.space	1748
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 118


 3425      00000000 
 3425      00000000 
 3425      00000000 
 3425      00000000 
 3426              		.text
 3427              	.Letext0:
 3428              		.file 23 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3429              		.file 24 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3430              		.file 25 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3431              		.file 26 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\lib\\gcc\\arm-none
 3432              		.file 27 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3433              		.file 28 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3434              		.file 29 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3435              		.file 30 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3436              		.file 31 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3437              		.file 32 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3438              		.file 33 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3439              		.file 34 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3440              		.file 35 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3441              		.file 36 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3442              		.file 37 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3443              		.file 38 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3444              		.file 39 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3445              		.file 40 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3446              		.file 41 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3447              		.file 42 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3448              		.file 43 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3449              		.file 44 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3450              		.file 45 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3451              		.file 46 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3452              		.file 47 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3453              		.file 48 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3454              		.file 49 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3455              		.file 50 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3456              		.file 51 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3457              		.file 52 "../../DaisyExamples/libdaisy/src/daisy_core.h"
 3458              		.file 53 "../../DaisyExamples/libdaisy/src/per/tim.h"
 3459              		.file 54 "../../DaisyExamples/libdaisy/src/per/sai.h"
 3460              		.file 55 "../../DaisyExamples/libdaisy/src/util/wav_format.h"
 3461              		.file 56 "../../DaisyExamples/libdaisy/src/hid/led.h"
 3462              		.file 57 "../../DaisyExamples/libdaisy/src/util/color.h"
 3463              		.file 58 "../../DaisyExamples/libdaisy/src/hid/rgb_led.h"
 3464              		.file 59 "../../DaisyExamples/libdaisy/src/per/qspi.h"
 3465              		.file 60 "../../DaisyExamples/libdaisy/src/per/gpio.h"
 3466              		.file 61 "../../DaisyExamples/libdaisy/src/dev/sdram.h"
 3467              		.file 62 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\lib\\gcc\\arm-none
 3468              		.file 63 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3469              		.file 64 "../../DaisyExamples/DaisySP/Source/Control/adenv.h"
 3470              		.file 65 "../../DaisyExamples/DaisySP/Source/Utility/dsp.h"
 3471              		.file 66 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3472              		.file 67 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3473              		.file 68 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 3474              		.file 69 "../../DaisyExamples/libdaisy/src/dev/sr_595.h"
 3475              		.file 70 "<built-in>"
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 119


DEFINED SYMBOLS
                            *ABS*:00000000 ChorusPetal.cpp
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:17     .text._ZN5daisy10DaisyPetalD2Ev:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:26     .text._ZN5daisy10DaisyPetalD2Ev:00000000 _ZN5daisy10DaisyPetalD2Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:26     .text._ZN5daisy10DaisyPetalD2Ev:00000000 _ZN5daisy10DaisyPetalD1Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:89     .text._ZN10dingus_dsp6ChorusD2Ev:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:97     .text._ZN10dingus_dsp6ChorusD2Ev:00000000 _ZN10dingus_dsp6ChorusD2Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:97     .text._ZN10dingus_dsp6ChorusD2Ev:00000000 _ZN10dingus_dsp6ChorusD1Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:120    .text._ZN16GlobalParametersD2Ev:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:128    .text._ZN16GlobalParametersD2Ev:00000000 _ZN16GlobalParametersD2Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:128    .text._ZN16GlobalParametersD2Ev:00000000 _ZN16GlobalParametersD1Ev
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:156    .text._Z8Controlsv:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:164    .text._Z8Controlsv:00000000 _Z8Controlsv
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:585    .text._Z8Controlsv:00000120 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3417   .bss._ZL8g_chorus:00000000 _ZL8g_chorus
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:595    .text._Z13AudioCallbackPKPKfPPfj:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:603    .text._Z13AudioCallbackPKPKfPPfj:00000000 _Z13AudioCallbackPKPKfPPfj
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:1128   .text._Z13AudioCallbackPKPKfPPfj:000001b8 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:1157   .text._Z13AudioCallbackPKPKfPPfj:000001d4 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2012   .text._Z13AudioCallbackPKPKfPPfj:00000404 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2027   .text.startup.main:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2035   .text.startup.main:00000000 main
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2634   .text.startup.main:00000114 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2644   .text.startup._GLOBAL__sub_I_hw:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:2651   .text.startup._GLOBAL__sub_I_hw:00000000 _GLOBAL__sub_I_hw
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3123   .text.startup._GLOBAL__sub_I_hw:000000bc $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3143   .init_array:00000000 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3424   .bss.hw:00000000 hw
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3147   .rodata:00000000 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3407   .bss._ZL7g_param:00000000 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3411   .bss._ZL7g_param:00000000 _ZL7g_param
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3414   .bss._ZL8g_chorus:00000000 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s:3420   .bss.hw:00000000 $d
                           .group:00000000 _ZN5daisy10DaisyPetalD5Ev
                           .group:00000000 _ZN10dingus_dsp6ChorusD5Ev
                           .group:00000000 _ZN16GlobalParametersD5Ev

UNDEFINED SYMBOLS
_ZN5daisy10DaisyPetal21ProcessAnalogControlsEv
_ZN5daisy10DaisyPetal22ProcessDigitalControlsEv
_ZN5daisy13AnalogControl7ProcessEv
_ZN10dingus_dsp10Oscillator11UpdateDeltaEv
_ZN10dingus_dsp10Oscillator7ProcessEv
_ZN5daisy10DaisyPetal4InitEb
_ZN5daisy10DaisyPetal15AudioSampleRateEv
_ZN10dingus_dsp10Oscillator4InitEf
srand
rand
_ZN5daisy10DaisyPetal8StartAdcEv
_ZN5daisy10DaisyPetal10StartAudioEPFvPKPKfPPfjE
_ZN5daisy10DaisyPetal7DelayMsEj
_ZN5daisy10DaisyPetal9ClearLedsEv
_ZN5daisy10DaisyPetal16SetFootswitchLedENS0_13FootswitchLedEf
_ZN5daisy10DaisyPetal10UpdateLedsEv
memcpy
__aeabi_atexit
memset
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccwEYeu0.s 			page 120


__dso_handle
