ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"modulated_delay.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN10dingus_dsp14ModulatedDelay4InitEf,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	_ZN10dingus_dsp14ModulatedDelay4InitEf
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN10dingus_dsp14ModulatedDelay4InitEf:
  27              	.LVL0:
  28              	.LFB2861:
  29              		.file 1 "dingus_dsp/modulated_delay.cpp"
   1:dingus_dsp/modulated_delay.cpp **** /*
   2:dingus_dsp/modulated_delay.cpp ****   ==============================================================================
   3:dingus_dsp/modulated_delay.cpp **** 
   4:dingus_dsp/modulated_delay.cpp ****     File: modulated_delay.cpp
   5:dingus_dsp/modulated_delay.cpp ****     Author: Daniel Schwartz
   6:dingus_dsp/modulated_delay.cpp ****     Description: A modulated delay line that combines a simple delay line 
   7:dingus_dsp/modulated_delay.cpp ****     with a modulation source.
   8:dingus_dsp/modulated_delay.cpp **** 
   9:dingus_dsp/modulated_delay.cpp ****   ==============================================================================
  10:dingus_dsp/modulated_delay.cpp **** */
  11:dingus_dsp/modulated_delay.cpp **** 
  12:dingus_dsp/modulated_delay.cpp **** #include "modulated_delay.h"
  13:dingus_dsp/modulated_delay.cpp **** 
  14:dingus_dsp/modulated_delay.cpp **** using namespace dingus_dsp;
  15:dingus_dsp/modulated_delay.cpp **** 
  16:dingus_dsp/modulated_delay.cpp **** void ModulatedDelay::Init(float sample_rate) {
  30              		.loc 1 16 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 16 46 is_stmt 0 view .LVU1
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
  17:dingus_dsp/modulated_delay.cpp ****     sample_rate_ = sample_rate;
  41              		.loc 1 17 18 view .LVU2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 2


  42 0002 00F51044 		add	r4, r0, #36864
  18:dingus_dsp/modulated_delay.cpp ****     osc_.Init(sample_rate);
  43              		.loc 1 18 14 view .LVU3
  44 0006 49F20465 		movw	r5, #38404
  17:dingus_dsp/modulated_delay.cpp ****     sample_rate_ = sample_rate;
  45              		.loc 1 17 5 is_stmt 1 view .LVU4
  17:dingus_dsp/modulated_delay.cpp ****     sample_rate_ = sample_rate;
  46              		.loc 1 17 18 is_stmt 0 view .LVU5
  47 000a 04F5C466 		add	r6, r4, #1568
  48              		.loc 1 18 14 view .LVU6
  49 000e 0544     		add	r5, r5, r0
  17:dingus_dsp/modulated_delay.cpp ****     sample_rate_ = sample_rate;
  50              		.loc 1 17 18 view .LVU7
  51 0010 86ED000A 		vstr.32	s0, [r6]
  52              		.loc 1 18 5 is_stmt 1 view .LVU8
  53              		.loc 1 18 14 is_stmt 0 view .LVU9
  54 0014 2846     		mov	r0, r5
  55              	.LVL1:
  56              		.loc 1 18 14 view .LVU10
  57 0016 FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator4InitEf
  58              	.LVL2:
  19:dingus_dsp/modulated_delay.cpp **** 
  20:dingus_dsp/modulated_delay.cpp ****     // Set the initial osc to a 1Hz tri wave.
  21:dingus_dsp/modulated_delay.cpp ****     osc_.SetType(OscType::SINE);
  59              		.loc 1 21 5 is_stmt 1 view .LVU11
  60              	.LBB77:
  61              	.LBI77:
  62              		.file 2 "dingus_dsp/oscillator.h"
   1:dingus_dsp/oscillator.h **** /*
   2:dingus_dsp/oscillator.h ****   ==============================================================================
   3:dingus_dsp/oscillator.h **** 
   4:dingus_dsp/oscillator.h ****     File: oscillator.h
   5:dingus_dsp/oscillator.h ****     Author: Daniel Schwartz
   6:dingus_dsp/oscillator.h ****     Description: A basic oscillator implemented using per sample calculations.
   7:dingus_dsp/oscillator.h **** 
   8:dingus_dsp/oscillator.h ****   ==============================================================================
   9:dingus_dsp/oscillator.h **** */
  10:dingus_dsp/oscillator.h **** 
  11:dingus_dsp/oscillator.h **** #pragma once
  12:dingus_dsp/oscillator.h **** #ifndef DINGUS_OSC_H
  13:dingus_dsp/oscillator.h **** #define DINGUS_OSC_H
  14:dingus_dsp/oscillator.h **** 
  15:dingus_dsp/oscillator.h **** #include "dingus_math.h"
  16:dingus_dsp/oscillator.h **** 
  17:dingus_dsp/oscillator.h **** namespace dingus_dsp 
  18:dingus_dsp/oscillator.h **** {
  19:dingus_dsp/oscillator.h **** 
  20:dingus_dsp/oscillator.h **** // The different oscillator waveforms available.
  21:dingus_dsp/oscillator.h **** enum class OscType {
  22:dingus_dsp/oscillator.h ****     SINE,
  23:dingus_dsp/oscillator.h ****     TRI,
  24:dingus_dsp/oscillator.h ****     SAW,
  25:dingus_dsp/oscillator.h ****     PULSE,
  26:dingus_dsp/oscillator.h ****     MAX
  27:dingus_dsp/oscillator.h **** };
  28:dingus_dsp/oscillator.h **** 
  29:dingus_dsp/oscillator.h **** // A basic oscillator implemented using per sample calculations.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 3


  30:dingus_dsp/oscillator.h **** class Oscillator 
  31:dingus_dsp/oscillator.h **** {
  32:dingus_dsp/oscillator.h ****     public:
  33:dingus_dsp/oscillator.h ****         Oscillator() {}
  34:dingus_dsp/oscillator.h ****         ~Oscillator() {}
  35:dingus_dsp/oscillator.h **** 
  36:dingus_dsp/oscillator.h ****         // Initialize the oscillator for playback given the audio rate.
  37:dingus_dsp/oscillator.h ****         void Init(float sample_rate);
  38:dingus_dsp/oscillator.h **** 
  39:dingus_dsp/oscillator.h ****         // Process a single sample.
  40:dingus_dsp/oscillator.h ****         float Process();
  41:dingus_dsp/oscillator.h **** 
  42:dingus_dsp/oscillator.h ****         // Reset the phase of the oscillator.
  43:dingus_dsp/oscillator.h ****         void Reset() {
  44:dingus_dsp/oscillator.h ****             phase_ = 0; 
  45:dingus_dsp/oscillator.h ****         }
  46:dingus_dsp/oscillator.h **** 
  47:dingus_dsp/oscillator.h ****         // Set the frequency of the oscillator.
  48:dingus_dsp/oscillator.h ****         void SetFrequency(float freq) {
  49:dingus_dsp/oscillator.h ****             freq_ = freq;
  50:dingus_dsp/oscillator.h ****             UpdateDelta();
  51:dingus_dsp/oscillator.h ****         }
  52:dingus_dsp/oscillator.h **** 
  53:dingus_dsp/oscillator.h ****         // Set the amplitude of the oscillator.
  54:dingus_dsp/oscillator.h ****         void SetAmplitude(float amp) {
  55:dingus_dsp/oscillator.h ****             amp_ = amp;
  56:dingus_dsp/oscillator.h ****         }
  57:dingus_dsp/oscillator.h **** 
  58:dingus_dsp/oscillator.h ****         // Set the waveform type of the oscillator.
  59:dingus_dsp/oscillator.h ****         void SetType(OscType type) {
  63              		.loc 2 59 14 view .LVU12
  64              	.LBB78:
  60:dingus_dsp/oscillator.h ****             osc_type_ = (type < OscType::MAX) ? type : OscType::SINE;
  65              		.loc 2 60 13 view .LVU13
  66              	.LBE78:
  67              	.LBE77:
  68              	.LBB81:
  69              	.LBB82:
  55:dingus_dsp/oscillator.h ****         }
  70              		.loc 2 55 18 is_stmt 0 view .LVU14
  71 001a 4FF07E52 		mov	r2, #1065353216
  72 001e 04F20463 		addw	r3, r4, #1540
  73              	.LBE82:
  74              	.LBE81:
  75              	.LBB84:
  76              	.LBB79:
  77              		.loc 2 60 23 view .LVU15
  78 0022 0021     		movs	r1, #0
  79              	.LBE79:
  80              	.LBE84:
  81              	.LBB85:
  82              	.LBB86:
  50:dingus_dsp/oscillator.h ****         }
  83              		.loc 2 50 24 view .LVU16
  84 0024 2846     		mov	r0, r5
  85              	.LBE86:
  86              	.LBE85:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 4


  87              	.LBB88:
  88              	.LBB80:
  89              		.loc 2 60 23 view .LVU17
  90 0026 C4F80416 		str	r1, [r4, #1540]
  91              	.LVL3:
  92              		.loc 2 60 23 view .LVU18
  93              	.LBE80:
  94              	.LBE88:
  22:dingus_dsp/modulated_delay.cpp ****     osc_.SetAmplitude(1.f);
  95              		.loc 1 22 5 is_stmt 1 view .LVU19
  96              	.LBB89:
  97              	.LBI81:
  54:dingus_dsp/oscillator.h ****             amp_ = amp;
  98              		.loc 2 54 14 view .LVU20
  99              	.LBB83:
  55:dingus_dsp/oscillator.h ****         }
 100              		.loc 2 55 13 view .LVU21
  55:dingus_dsp/oscillator.h ****         }
 101              		.loc 2 55 18 is_stmt 0 view .LVU22
 102 002a 5A60     		str	r2, [r3, #4]	@ float
 103              	.LVL4:
  55:dingus_dsp/oscillator.h ****         }
 104              		.loc 2 55 18 view .LVU23
 105              	.LBE83:
 106              	.LBE89:
  23:dingus_dsp/modulated_delay.cpp ****     osc_.SetFrequency(1.f);
 107              		.loc 1 23 5 is_stmt 1 view .LVU24
 108              	.LBB90:
 109              	.LBI85:
  48:dingus_dsp/oscillator.h ****             freq_ = freq;
 110              		.loc 2 48 14 view .LVU25
 111              	.LBB87:
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 112              		.loc 2 49 13 view .LVU26
  49:dingus_dsp/oscillator.h ****             UpdateDelta();
 113              		.loc 2 49 19 is_stmt 0 view .LVU27
 114 002c 9A60     		str	r2, [r3, #8]	@ float
  50:dingus_dsp/oscillator.h ****         }
 115              		.loc 2 50 13 is_stmt 1 view .LVU28
  50:dingus_dsp/oscillator.h ****         }
 116              		.loc 2 50 24 is_stmt 0 view .LVU29
 117 002e FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator11UpdateDeltaEv
 118              	.LVL5:
  50:dingus_dsp/oscillator.h ****         }
 119              		.loc 2 50 24 view .LVU30
 120              	.LBE87:
 121              	.LBE90:
  24:dingus_dsp/modulated_delay.cpp **** 
  25:dingus_dsp/modulated_delay.cpp ****     // Set the initial delay time to 10ms
  26:dingus_dsp/modulated_delay.cpp ****     SetDelayTime(0.001f);
 122              		.loc 1 26 5 is_stmt 1 view .LVU31
 123              	.LBB91:
 124              	.LBI91:
 125              		.file 3 "dingus_dsp/modulated_delay.h"
   1:dingus_dsp/modulated_delay.h **** /*
   2:dingus_dsp/modulated_delay.h ****   ==============================================================================
   3:dingus_dsp/modulated_delay.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 5


   4:dingus_dsp/modulated_delay.h ****     File: modulated_delay.h
   5:dingus_dsp/modulated_delay.h ****     Author: Daniel Schwartz
   6:dingus_dsp/modulated_delay.h ****     Description: A modulated delay line that combines a simple delay line 
   7:dingus_dsp/modulated_delay.h ****     with a modulation source.
   8:dingus_dsp/modulated_delay.h **** 
   9:dingus_dsp/modulated_delay.h ****   ==============================================================================
  10:dingus_dsp/modulated_delay.h **** */
  11:dingus_dsp/modulated_delay.h **** 
  12:dingus_dsp/modulated_delay.h **** #pragma once
  13:dingus_dsp/modulated_delay.h **** #ifndef MODULATED_DELAY_H
  14:dingus_dsp/modulated_delay.h **** #define MODULATED_DELAY_H
  15:dingus_dsp/modulated_delay.h **** 
  16:dingus_dsp/modulated_delay.h **** #include "delayline.h"
  17:dingus_dsp/modulated_delay.h **** #include "oscillator.h"
  18:dingus_dsp/modulated_delay.h **** #include "dingus_math.h"
  19:dingus_dsp/modulated_delay.h **** 
  20:dingus_dsp/modulated_delay.h **** namespace dingus_dsp 
  21:dingus_dsp/modulated_delay.h **** {
  22:dingus_dsp/modulated_delay.h **** 
  23:dingus_dsp/modulated_delay.h **** // A modulated delay line that combines a simple delay line with a modulation source.
  24:dingus_dsp/modulated_delay.h **** class ModulatedDelay
  25:dingus_dsp/modulated_delay.h **** {
  26:dingus_dsp/modulated_delay.h ****     public:
  27:dingus_dsp/modulated_delay.h ****         ModulatedDelay() {}
  28:dingus_dsp/modulated_delay.h ****         ~ModulatedDelay() {}
  29:dingus_dsp/modulated_delay.h **** 
  30:dingus_dsp/modulated_delay.h ****         // This constant determines the size of the internal delay buffer.
  31:dingus_dsp/modulated_delay.h ****         // Sample rate 48kHz: a buffer of size 4800 has a max delay of 100ms.
  32:dingus_dsp/modulated_delay.h ****         static constexpr size_t MAX_DELAY {4800};
  33:dingus_dsp/modulated_delay.h **** 
  34:dingus_dsp/modulated_delay.h ****         // Sets the initial state of the modulated delay given the sample rate.
  35:dingus_dsp/modulated_delay.h ****         void Init(float sample_rate);
  36:dingus_dsp/modulated_delay.h **** 
  37:dingus_dsp/modulated_delay.h ****         // Writes the input sample to the delay buffer and returns the delayed output.
  38:dingus_dsp/modulated_delay.h ****         float Process(float input);
  39:dingus_dsp/modulated_delay.h **** 
  40:dingus_dsp/modulated_delay.h ****         // Clears the buffer and resets the modulation.
  41:dingus_dsp/modulated_delay.h ****         void Reset();
  42:dingus_dsp/modulated_delay.h **** 
  43:dingus_dsp/modulated_delay.h ****         // Sets the delay time in seconds.
  44:dingus_dsp/modulated_delay.h ****         void SetDelayTime(float delay_time) {
 126              		.loc 3 44 14 view .LVU32
 127              	.LBB92:
  45:dingus_dsp/modulated_delay.h ****             delay_time = delay_time * sample_rate_;
 128              		.loc 3 45 13 view .LVU33
 129              		.loc 3 45 24 is_stmt 0 view .LVU34
 130 0032 D6ED007A 		vldr.32	s15, [r6]
 131 0036 DFED0F6A 		vldr.32	s13, .L7
 132              	.LBB93:
 133              	.LBB94:
 134              		.file 4 "dingus_dsp/dingus_math.h"
   1:dingus_dsp/dingus_math.h **** #pragma once
   2:dingus_dsp/dingus_math.h **** #ifndef DINGUS_MATH_H
   3:dingus_dsp/dingus_math.h **** #define DINGUS_MATH_H
   4:dingus_dsp/dingus_math.h **** 
   5:dingus_dsp/dingus_math.h **** #include <cmath>
   6:dingus_dsp/dingus_math.h **** #include <random>
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 6


   7:dingus_dsp/dingus_math.h **** 
   8:dingus_dsp/dingus_math.h **** namespace dingus_dsp
   9:dingus_dsp/dingus_math.h **** {
  10:dingus_dsp/dingus_math.h **** 
  11:dingus_dsp/dingus_math.h **** // Generally useful constant values.
  12:dingus_dsp/dingus_math.h **** template<typename FloatType>
  13:dingus_dsp/dingus_math.h **** struct MathConstants
  14:dingus_dsp/dingus_math.h **** {
  15:dingus_dsp/dingus_math.h ****     static constexpr FloatType PI = static_cast<FloatType>(3.1415927410125732421875f);
  16:dingus_dsp/dingus_math.h ****     static constexpr FloatType TWOPI = static_cast<FloatType>(2 * 3.1415927410125732421875f);
  17:dingus_dsp/dingus_math.h **** };
  18:dingus_dsp/dingus_math.h **** 
  19:dingus_dsp/dingus_math.h **** // Given a value and limits lo and hi, clamps the value between the limits.
  20:dingus_dsp/dingus_math.h **** template <typename T>
  21:dingus_dsp/dingus_math.h **** inline T Clamp(T value, T lo, T hi) {
  22:dingus_dsp/dingus_math.h ****     if (value > hi) {
 135              		.loc 4 22 5 view .LVU35
 136 003a 9FED0F7A 		vldr.32	s14, .L7+4
 137              	.LBE94:
 138              	.LBE93:
 139              		.loc 3 45 24 view .LVU36
 140 003e 67EEA67A 		vmul.f32	s15, s15, s13
 141              	.LVL6:
  46:dingus_dsp/modulated_delay.h **** 
  47:dingus_dsp/modulated_delay.h ****             // Make sure the delay time won't exceed the buffer size.
  48:dingus_dsp/modulated_delay.h ****             delay_time_ = Clamp<float>(delay_time, 0.f, MAX_DELAY);
 142              		.loc 3 48 13 is_stmt 1 view .LVU37
 143              	.LBB97:
 144              	.LBI93:
  21:dingus_dsp/dingus_math.h ****     if (value > hi) {
 145              		.loc 4 21 10 view .LVU38
 146              	.LBB95:
 147              		.loc 4 22 5 is_stmt 0 view .LVU39
 148 0042 F4EEC77A 		vcmpe.f32	s15, s14
 149 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 150 004a 0BDC     		bgt	.L3
  23:dingus_dsp/dingus_math.h ****         return hi;
  24:dingus_dsp/dingus_math.h ****     } else if (value < lo) {
 151              		.loc 4 24 12 view .LVU40
 152 004c F5EEC07A 		vcmpe.f32	s15, #0
 153 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 154 0054 01D5     		bpl	.L2
  25:dingus_dsp/dingus_math.h ****         return lo;
 155              		.loc 4 25 16 view .LVU41
 156 0056 DFED097A 		vldr.32	s15, .L7+8
 157              	.LVL7:
 158              	.L2:
 159              		.loc 4 25 16 view .LVU42
 160              	.LBE95:
 161              	.LBE97:
 162              		.loc 3 48 25 view .LVU43
 163 005a 04F21C64 		addw	r4, r4, #1564
 164              	.LVL8:
 165              		.loc 3 48 25 view .LVU44
 166 005e C4ED007A 		vstr.32	s15, [r4]
 167              	.LVL9:
 168              		.loc 3 48 25 view .LVU45
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 7


 169              	.LBE92:
 170              	.LBE91:
  27:dingus_dsp/modulated_delay.cpp **** }
 171              		.loc 1 27 1 view .LVU46
 172 0062 70BD     		pop	{r4, r5, r6, pc}
 173              	.LVL10:
 174              	.L3:
 175              	.LBB100:
 176              	.LBB99:
 177              	.LBB98:
 178              	.LBB96:
  23:dingus_dsp/dingus_math.h ****         return hi;
 179              		.loc 4 23 16 view .LVU47
 180 0064 F0EE477A 		vmov.f32	s15, s14
 181              	.LVL11:
  23:dingus_dsp/dingus_math.h ****         return hi;
 182              		.loc 4 23 16 view .LVU48
 183              	.LBE96:
 184              	.LBE98:
 185              		.loc 3 48 25 view .LVU49
 186 0068 04F21C64 		addw	r4, r4, #1564
 187 006c C4ED007A 		vstr.32	s15, [r4]
 188              	.LVL12:
 189              		.loc 3 48 25 view .LVU50
 190              	.LBE99:
 191              	.LBE100:
 192              		.loc 1 27 1 view .LVU51
 193 0070 70BD     		pop	{r4, r5, r6, pc}
 194              	.L8:
 195 0072 00BF     		.align	2
 196              	.L7:
 197 0074 6F12833A 		.word	981668463
 198 0078 00009645 		.word	1167458304
 199 007c 00000000 		.word	0
 200              		.cfi_endproc
 201              	.LFE2861:
 203              		.section	.text._ZN10dingus_dsp14ModulatedDelay7ProcessEf,"ax",%progbits
 204              		.align	1
 205              		.p2align 2,,3
 206              		.global	_ZN10dingus_dsp14ModulatedDelay7ProcessEf
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu fpv5-d16
 212              	_ZN10dingus_dsp14ModulatedDelay7ProcessEf:
 213              	.LVL13:
 214              	.LFB2862:
  28:dingus_dsp/modulated_delay.cpp **** 
  29:dingus_dsp/modulated_delay.cpp **** float ModulatedDelay::Process(float input) {
 215              		.loc 1 29 44 is_stmt 1 view -0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
  30:dingus_dsp/modulated_delay.cpp ****     delay_line_.Write(input);
 219              		.loc 1 30 5 view .LVU53
  29:dingus_dsp/modulated_delay.cpp ****     delay_line_.Write(input);
 220              		.loc 1 29 44 is_stmt 0 view .LVU54
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 8


 221 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 222              		.cfi_def_cfa_offset 24
 223              		.cfi_offset 3, -24
 224              		.cfi_offset 4, -20
 225              		.cfi_offset 5, -16
 226              		.cfi_offset 6, -12
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229              	.LBB111:
 230              	.LBB112:
 231              		.file 5 "dingus_dsp/delayline.h"
   1:dingus_dsp/delayline.h **** /*
   2:dingus_dsp/delayline.h ****   ==============================================================================
   3:dingus_dsp/delayline.h **** 
   4:dingus_dsp/delayline.h ****     File: delayline.h
   5:dingus_dsp/delayline.h ****     Author: Daniel Schwartz
   6:dingus_dsp/delayline.h ****     Description: A simple fractional delay line using linear interpolation.
   7:dingus_dsp/delayline.h **** 
   8:dingus_dsp/delayline.h ****   ==============================================================================
   9:dingus_dsp/delayline.h **** */
  10:dingus_dsp/delayline.h **** 
  11:dingus_dsp/delayline.h **** #pragma once
  12:dingus_dsp/delayline.h **** #ifndef DINGUS_DELAYLINE_H
  13:dingus_dsp/delayline.h **** #define DINGUS_DELAYLINE_H
  14:dingus_dsp/delayline.h **** 
  15:dingus_dsp/delayline.h **** #include <array>
  16:dingus_dsp/delayline.h **** 
  17:dingus_dsp/delayline.h **** namespace dingus_dsp
  18:dingus_dsp/delayline.h **** {
  19:dingus_dsp/delayline.h **** 
  20:dingus_dsp/delayline.h **** // Takes a float sample type and the max delay time (in samples) which 
  21:dingus_dsp/delayline.h **** // determines the size of the buffer.
  22:dingus_dsp/delayline.h **** template <typename SampleType, size_t max_delay>
  23:dingus_dsp/delayline.h **** class DelayLine 
  24:dingus_dsp/delayline.h **** {
  25:dingus_dsp/delayline.h ****     public:
  26:dingus_dsp/delayline.h ****         DelayLine() {
  27:dingus_dsp/delayline.h ****             Clear();
  28:dingus_dsp/delayline.h ****         }
  29:dingus_dsp/delayline.h **** 
  30:dingus_dsp/delayline.h ****         ~DelayLine() {}
  31:dingus_dsp/delayline.h **** 
  32:dingus_dsp/delayline.h ****         // Returns the buffer size.
  33:dingus_dsp/delayline.h ****         size_t Size() {
  34:dingus_dsp/delayline.h ****             return max_delay;
  35:dingus_dsp/delayline.h ****         }
  36:dingus_dsp/delayline.h **** 
  37:dingus_dsp/delayline.h ****         // Clears the contents of the buffer and resets the position.
  38:dingus_dsp/delayline.h ****         void Clear() {
  39:dingus_dsp/delayline.h ****             buffer_.fill(SampleType(0));
  40:dingus_dsp/delayline.h ****             pos_ = 0;
  41:dingus_dsp/delayline.h ****         }
  42:dingus_dsp/delayline.h **** 
  43:dingus_dsp/delayline.h ****         // Writes the given value to the buffer.
  44:dingus_dsp/delayline.h ****         inline void Write(SampleType value) {
  45:dingus_dsp/delayline.h ****             buffer_[pos_] = value;
 232              		.loc 5 45 20 view .LVU55
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 9


 233 0002 00F51047 		add	r7, r0, #36864
  46:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 234              		.loc 5 46 43 view .LVU56
 235 0006 2C4D     		ldr	r5, .L11
 236 0008 4FF41656 		mov	r6, #9600
 237              	.LBE112:
 238              	.LBE111:
  29:dingus_dsp/modulated_delay.cpp ****     delay_line_.Write(input);
 239              		.loc 1 29 44 view .LVU57
 240 000c 0446     		mov	r4, r0
 241              	.LVL14:
 242              	.LBB120:
 243              	.LBI111:
  44:dingus_dsp/delayline.h ****             buffer_[pos_] = value;
 244              		.loc 5 44 21 is_stmt 1 view .LVU58
 245              	.LBB115:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 246              		.loc 5 45 20 is_stmt 0 view .LVU59
 247 000e D7F80026 		ldr	r2, [r7, #1536]
 248              	.LVL15:
 249              	.LBB113:
 250              	.LBI113:
 251              		.file 6 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\incl
   1:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // <array> -*- C++ -*-
   2:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
   3:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** //
   5:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // software; you can redistribute it and/or modify it under the
   7:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // terms of the GNU General Public License as published by the
   8:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // any later version.
  10:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  11:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // This library is distributed in the hope that it will be useful,
  12:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // GNU General Public License for more details.
  15:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  16:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // 3.1, as published by the Free Software Foundation.
  19:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  20:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // You should have received a copy of the GNU General Public License and
  21:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** // <http://www.gnu.org/licenses/>.
  24:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  25:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** /** @file include/array
  26:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  *  This is a Standard C++ Library header.
  27:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  */
  28:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  29:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #ifndef _GLIBCXX_ARRAY
  30:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #define _GLIBCXX_ARRAY 1
  31:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  32:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #pragma GCC system_header
  33:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  34:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #if __cplusplus < 201103L
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 10


  35:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** # include <bits/c++0x_warning.h>
  36:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #else
  37:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  38:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <utility>
  39:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/functexcept.h>
  40:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/stl_algobase.h>
  41:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** #include <bits/range_access.h>
  42:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  43:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** {
  45:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  47:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  48:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     struct __array_traits
  49:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
  50:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp _Type[_Nm];
  51:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  54:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp&
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  58:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       static constexpr _Tp*
  59:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _S_ptr(const _Type& __t) noexcept
  60:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp*>(__t); }
  61:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     };
  62:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  63:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****  template<typename _Tp>
  64:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    struct __array_traits<_Tp, 0>
  65:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    {
  66:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      struct _Type { };
  67:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_swappable;
  68:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      typedef true_type _Is_nothrow_swappable;
  69:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  70:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp&
  71:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      { return *static_cast<_Tp*>(nullptr); }
  73:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  74:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      static constexpr _Tp*
  75:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      _S_ptr(const _Type&) noexcept
  76:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****      { return nullptr; }
  77:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    };
  78:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
  79:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   /**
  80:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  82:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @ingroup sequences
  83:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  84:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  <a href="tables.html#67">sequence</a>.
  87:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  88:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  Sets support random access iterators.
  89:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *
  90:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****    *  @tparam  Nm  Number of elements.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 11


  92:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   */
  93:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****   template<typename _Tp, std::size_t _Nm>
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     struct array
  95:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****     {
  96:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _Tp 	    			      value_type;
  97:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*			      pointer;
  98:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*                       const_pointer;
  99:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type&                   	      reference;
 100:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type&             	      const_reference;
 101:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef value_type*          		      iterator;
 102:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef const value_type*			      const_iterator;
 103:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::size_t                    	      size_type;
 104:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 108:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Support for zero-sized arrays mandatory.
 109:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       typename _AT_Type::_Type                         _M_elems;
 111:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 112:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // No explicit construct/copy/destroy for aggregate type.
 113:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 114:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // DR 776.
 115:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       fill(const value_type& __u)
 117:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 118:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 119:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX20_CONSTEXPR void
 120:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       swap(array& __other)
 121:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 124:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Iterators.
 125:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 126:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       begin() noexcept
 127:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data()); }
 128:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 129:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       begin() const noexcept
 131:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 132:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 133:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR iterator
 134:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       end() noexcept
 135:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return iterator(data() + _Nm); }
 136:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 137:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       end() const noexcept
 139:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 140:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 141:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() noexcept
 143:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(end()); }
 144:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 145:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rbegin() const noexcept
 147:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 148:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 12


 149:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rend() noexcept
 151:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return reverse_iterator(begin()); }
 152:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 153:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       rend() const noexcept
 155:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 156:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 157:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       cbegin() const noexcept
 159:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data()); }
 160:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 161:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       cend() const noexcept
 163:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_iterator(data() + _Nm); }
 164:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 165:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       crbegin() const noexcept
 167:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(end()); }
 168:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 169:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       crend() const noexcept
 171:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_reverse_iterator(begin()); }
 172:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 173:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Capacity.
 174:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 175:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       size() const noexcept { return _Nm; }
 176:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 177:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr size_type
 178:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       max_size() const noexcept { return _Nm; }
 179:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 180:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX_NODISCARD constexpr bool
 181:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       empty() const noexcept { return size() == 0; }
 182:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 183:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       // Element access.
 184:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       _GLIBCXX17_CONSTEXPR reference
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       operator[](size_type __n) noexcept
 252              		.loc 6 185 7 is_stmt 1 view .LVU60
 253              	.LBB114:
 254              	.LBI114:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 255              		.loc 6 55 7 view .LVU61
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 256              		.loc 6 55 7 is_stmt 0 view .LVU62
 257              	.LBE114:
 258              	.LBE113:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 259              		.loc 5 45 27 view .LVU63
 260 0012 00EB8203 		add	r3, r0, r2, lsl #2
 261              	.LBE115:
 262              	.LBE120:
  31:dingus_dsp/modulated_delay.cpp **** 
  32:dingus_dsp/modulated_delay.cpp ****     // Modulated time ranges from 0.5dt to 1.5dt
  33:dingus_dsp/modulated_delay.cpp ****     float mod_delay = delay_time_ + (delay_time_ * 0.5) * osc_.Process();
 263              		.loc 1 33 71 view .LVU64
 264 0016 49F20460 		movw	r0, #38404
 265              	.LVL16:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 13


  29:dingus_dsp/modulated_delay.cpp ****     delay_line_.Write(input);
 266              		.loc 1 29 44 view .LVU65
 267 001a 2DED028B 		vpush.64	{d8}
 268              		.cfi_def_cfa_offset 32
 269              		.cfi_offset 80, -32
 270              		.cfi_offset 81, -28
 271              	.LBB121:
 272              	.LBB116:
  45:dingus_dsp/delayline.h ****             pos_ = (pos_ + max_delay - 1) % max_delay;
 273              		.loc 5 45 27 view .LVU66
 274 001e 83ED000A 		vstr.32	s0, [r3]
 275              		.loc 5 46 38 view .LVU67
 276 0022 42F27F53 		movw	r3, #9599
 277              	.LBE116:
 278              	.LBE121:
 279              		.loc 1 33 71 view .LVU68
 280 0026 2044     		add	r0, r0, r4
 281              	.LBB122:
 282              	.LBB117:
 283              		.loc 5 46 38 view .LVU69
 284 0028 1344     		add	r3, r3, r2
 285              	.LBE117:
 286              	.LBE122:
 287              		.loc 1 33 23 view .LVU70
 288 002a 07F21C62 		addw	r2, r7, #1564
 289 002e 92ED008A 		vldr.32	s16, [r2]
 290              	.LBB123:
 291              	.LBB118:
 292              		.loc 5 46 43 view .LVU71
 293 0032 A5FB0312 		umull	r1, r2, r5, r3
 294 0036 920A     		lsrs	r2, r2, #10
 295              	.LBE118:
 296              	.LBE123:
 297              		.loc 1 33 23 view .LVU72
 298 0038 B7EEC88A 		vcvt.f64.f32	d8, s16
 299              	.LBB124:
 300              	.LBB119:
 301              		.loc 5 46 43 view .LVU73
 302 003c 06FB1233 		mls	r3, r6, r2, r3
 303              		.loc 5 46 18 view .LVU74
 304 0040 C7F80036 		str	r3, [r7, #1536]
 305              	.LVL17:
 306              		.loc 5 46 18 view .LVU75
 307              	.LBE119:
 308              	.LBE124:
 309              		.loc 1 33 5 is_stmt 1 view .LVU76
 310              		.loc 1 33 71 is_stmt 0 view .LVU77
 311 0044 FFF7FEFF 		bl	_ZN10dingus_dsp10Oscillator7ProcessEv
 312              	.LVL18:
 313              		.loc 1 33 50 view .LVU78
 314 0048 B6EE006B 		vmov.f64	d6, #5.0e-1
 315              		.loc 1 33 71 view .LVU79
 316 004c B7EEC00A 		vcvt.f64.f32	d0, s0
 317              	.LBB125:
 318              	.LBB126:
  47:dingus_dsp/delayline.h ****         }
  48:dingus_dsp/delayline.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 14


  49:dingus_dsp/delayline.h ****         // Reads from the buffer given a delay time in samples.
  50:dingus_dsp/delayline.h ****         // Performs linear interpolation on fractional times.
  51:dingus_dsp/delayline.h ****         inline SampleType Read(SampleType delay) const {
  52:dingus_dsp/delayline.h ****             SampleType delay_pos = static_cast<SampleType>(pos_) + delay + SampleType(1);
 319              		.loc 5 52 36 view .LVU80
 320 0050 04F51643 		add	r3, r4, #38400
 321              		.loc 5 52 24 view .LVU81
 322 0054 F7EE005A 		vmov.f32	s11, #1.0e+0
 323              	.LBE126:
 324              	.LBE125:
 325              		.loc 1 33 50 view .LVU82
 326 0058 28EE066B 		vmul.f64	d6, d8, d6
 327              	.LBB133:
 328              	.LBB131:
 329              		.loc 5 52 36 view .LVU83
 330 005c 93ED007A 		vldr.32	s14, [r3]	@ int
 331 0060 B8EE477A 		vcvt.f32.u32	s14, s14
 332              	.LBE131:
 333              	.LBE133:
 334              		.loc 1 33 35 view .LVU84
 335 0064 A6EE008B 		vfma.f64	d8, d6, d0
 336              	.LVL19:
  34:dingus_dsp/modulated_delay.cpp ****     float output = delay_line_.Read(mod_delay);
 337              		.loc 1 34 5 is_stmt 1 view .LVU85
 338              	.LBB134:
 339              	.LBI125:
  51:dingus_dsp/delayline.h ****             SampleType delay_pos = static_cast<SampleType>(pos_) + delay + SampleType(1);
 340              		.loc 5 51 27 view .LVU86
 341              	.LBE134:
  33:dingus_dsp/modulated_delay.cpp ****     float output = delay_line_.Read(mod_delay);
 342              		.loc 1 33 72 is_stmt 0 view .LVU87
 343 0068 F7EEC87B 		vcvt.f32.f64	s15, d8
 344              	.LVL20:
  35:dingus_dsp/modulated_delay.cpp **** 
  36:dingus_dsp/modulated_delay.cpp ****     return output;
  37:dingus_dsp/modulated_delay.cpp **** }
 345              		.loc 1 37 1 view .LVU88
 346 006c BDEC028B 		vldm	sp!, {d8}
 347              		.cfi_restore 80
 348              		.cfi_restore 81
 349              		.cfi_def_cfa_offset 24
 350              	.LBB135:
 351              	.LBB132:
 352              		.loc 5 52 66 view .LVU89
 353 0070 77EE277A 		vadd.f32	s15, s14, s15
 354              	.LVL21:
 355              		.loc 5 52 24 view .LVU90
 356 0074 77EEA57A 		vadd.f32	s15, s15, s11
 357              	.LVL22:
  53:dingus_dsp/delayline.h **** 
  54:dingus_dsp/delayline.h ****             size_t a = static_cast<size_t>(delay_pos);
 358              		.loc 5 54 20 view .LVU91
 359 0078 BCEEE77A 		vcvt.u32.f32	s14, s15
 360 007c 17EE103A 		vmov	r3, s14	@ int
 361              	.LVL23:
 362              	.LBB127:
 363              	.LBI127:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 15


 186:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 187:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array **** 
 188:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       constexpr const_reference
 189:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       operator[](size_type __n) const noexcept
 364              		.loc 6 189 7 is_stmt 1 view .LVU92
 365              	.LBB128:
 366              	.LBI128:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 367              		.loc 6 55 7 view .LVU93
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 368              		.loc 6 55 7 is_stmt 0 view .LVU94
 369              	.LBE128:
 370              	.LBE127:
  55:dingus_dsp/delayline.h ****             size_t b = (a + 1);
  56:dingus_dsp/delayline.h **** 
  57:dingus_dsp/delayline.h ****             SampleType frac = delay_pos - static_cast<SampleType>(a);
 371              		.loc 5 57 43 view .LVU95
 372 0080 B8EE477A 		vcvt.f32.u32	s14, s14
  58:dingus_dsp/delayline.h **** 
  59:dingus_dsp/delayline.h ****             SampleType a_value = buffer_[a % max_delay];
 373              		.loc 5 59 41 view .LVU96
 374 0084 A5FB0312 		umull	r1, r2, r5, r3
  57:dingus_dsp/delayline.h **** 
 375              		.loc 5 57 24 view .LVU97
 376 0088 77EEC77A 		vsub.f32	s15, s15, s14
 377              	.LVL24:
 378              		.loc 5 59 41 view .LVU98
 379 008c 920A     		lsrs	r2, r2, #10
 380 008e 06FB1232 		mls	r2, r6, r2, r3
  55:dingus_dsp/delayline.h ****             size_t b = (a + 1);
 381              		.loc 5 55 20 view .LVU99
 382 0092 0133     		adds	r3, r3, #1
 383              	.LVL25:
  60:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 384              		.loc 5 60 41 view .LVU100
 385 0094 A5FB0315 		umull	r1, r5, r5, r3
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 386              		.loc 5 59 24 view .LVU101
 387 0098 04EB8202 		add	r2, r4, r2, lsl #2
 388              		.loc 5 60 41 view .LVU102
 389 009c AD0A     		lsrs	r5, r5, #10
  59:dingus_dsp/delayline.h ****             SampleType b_value = buffer_[b % max_delay];
 390              		.loc 5 59 24 view .LVU103
 391 009e 92ED000A 		vldr.32	s0, [r2]
 392              	.LVL26:
 393              	.LBB129:
 394              	.LBI129:
 395              		.loc 6 189 7 is_stmt 1 view .LVU104
 396              	.LBB130:
 397              	.LBI130:
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 398              		.loc 6 55 7 view .LVU105
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { return const_cast<_Tp&>(__t[__n]); }
 399              		.loc 6 55 7 is_stmt 0 view .LVU106
 400              	.LBE130:
 401              	.LBE129:
 402              		.loc 5 60 41 view .LVU107
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 16


 403 00a2 06FB1533 		mls	r3, r6, r5, r3
 404              	.LVL27:
 405              		.loc 5 60 24 view .LVU108
 406 00a6 04EB8303 		add	r3, r4, r3, lsl #2
  61:dingus_dsp/delayline.h **** 
  62:dingus_dsp/delayline.h ****             return a_value + frac * (b_value - a_value);
 407              		.loc 5 62 46 view .LVU109
 408 00aa 93ED007A 		vldr.32	s14, [r3]
 409 00ae 37EE407A 		vsub.f32	s14, s14, s0
 410              	.LVL28:
 411              		.loc 5 62 46 view .LVU110
 412              	.LBE132:
 413              	.LBE135:
  36:dingus_dsp/modulated_delay.cpp **** }
 414              		.loc 1 36 5 is_stmt 1 view .LVU111
 415              		.loc 1 37 1 is_stmt 0 view .LVU112
 416 00b2 A7EE870A 		vfma.f32	s0, s15, s14
 417              	.LVL29:
 418              		.loc 1 37 1 view .LVU113
 419 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 420              	.LVL30:
 421              	.L12:
 422              		.loc 1 37 1 view .LVU114
 423              		.align	2
 424              	.L11:
 425 00b8 B5814E1B 		.word	458129845
 426              		.cfi_endproc
 427              	.LFE2862:
 429              		.section	.text._ZN10dingus_dsp14ModulatedDelay5ResetEv,"ax",%progbits
 430              		.align	1
 431              		.p2align 2,,3
 432              		.global	_ZN10dingus_dsp14ModulatedDelay5ResetEv
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv5-d16
 438              	_ZN10dingus_dsp14ModulatedDelay5ResetEv:
 439              	.LVL31:
 440              	.LFB2863:
  38:dingus_dsp/modulated_delay.cpp **** 
  39:dingus_dsp/modulated_delay.cpp **** void ModulatedDelay::Reset() {
 441              		.loc 1 39 30 is_stmt 1 view -0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
  40:dingus_dsp/modulated_delay.cpp ****     delay_line_.Clear();
 445              		.loc 1 40 5 view .LVU116
  39:dingus_dsp/modulated_delay.cpp ****     delay_line_.Clear();
 446              		.loc 1 39 30 is_stmt 0 view .LVU117
 447 0000 10B5     		push	{r4, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 4, -8
 450              		.cfi_offset 14, -4
  39:dingus_dsp/modulated_delay.cpp ****     delay_line_.Clear();
 451              		.loc 1 39 30 view .LVU118
 452 0002 0446     		mov	r4, r0
 453              	.LVL32:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 17


 454              	.LBB152:
 455              	.LBI152:
  38:dingus_dsp/delayline.h ****             buffer_.fill(SampleType(0));
 456              		.loc 5 38 14 is_stmt 1 view .LVU119
 457              	.LBB153:
 458              	.LBB154:
 459              	.LBI154:
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\array ****       { std::fill_n(begin(), size(), __u); }
 460              		.loc 6 116 7 view .LVU120
 461              	.LBB155:
 462              	.LBI155:
 463              		.file 7 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\incl
   1:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
   3:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** //
   5:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // any later version.
  10:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  11:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  16:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  20:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  25:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /*
  26:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  27:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  30:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  38:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  39:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  42:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 18


  46:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  50:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  51:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  55:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  56:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  59:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  73:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <type_traits>
  74:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  75:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus > 201703L
  76:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <compare>
  77:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  78:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  79:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** {
  81:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  83:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /*
  84:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    */
  87:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline int
  90:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
  92:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  93:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  95:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
  97:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
  98:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return 0;
 102:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 19


 103:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       else
 104:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 105:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 107:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 108:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 109:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _BoolType>
 113:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap
 114:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 115:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 117:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 119:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    _ValueType1;
 121:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__a = *__b;
 123:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__b = __tmp;
 124:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 125:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 126:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 127:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 128:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap<true>
 129:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 130:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 132:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 134:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  swap(*__a, *__b);
 135:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 136:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 137:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif // C++03
 138:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 139:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 140:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 143:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 144:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 145:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 146:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  iterators themselves.
 148:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 149:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 152:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 154:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 155:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 157:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 159:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 20


 160:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 161:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType1;
 163:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType2;
 165:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 166:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType2>)
 168:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType1>)
 170:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 171:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType1;
 173:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType2;
 175:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 179:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 180:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // 187. iter_swap underspecified
 182:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       swap(*__a, *__b);
 183:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 184:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 185:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 186:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 187:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 194:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The ranges must not overlap.
 197:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 198:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _ForwardIterator2
 201:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 204:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 205:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 207:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 209:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 211:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first2;
 214:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 215:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 216:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 21


 217:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 218:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 223:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 226:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 227:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 228:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 230:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 232:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 233:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__b < __a)
 236:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 237:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 238:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 239:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 240:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 241:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 242:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 246:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 247:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 250:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 251:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 252:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 254:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 256:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 257:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__a < __b)
 260:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 261:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 262:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 263:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 264:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 265:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 266:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 272:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 22


 274:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 275:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 278:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 280:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__b, __a))
 282:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 283:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 284:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 285:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 286:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 287:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 288:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 293:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 294:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 297:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 300:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 302:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__a, __b))
 304:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 305:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 306:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 307:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 308:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 311:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 313:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 314:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __it; }
 316:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 317:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _From, typename _To>
 321:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _From
 323:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 326:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 328:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 330:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 23


 331:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __res; }
 332:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 333:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // a for loop with an explicit count.
 338:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 339:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move
 341:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 342:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 343:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 345:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 347:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = *__first;
 349:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 350:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 351:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 352:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 353:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 354:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 355:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 357:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 358:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 360:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 362:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 364:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 365:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 366:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 367:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 368:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 369:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 370:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 372:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 373:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 375:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 377:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 380:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = *__first;
 381:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 382:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 383:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
 384:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 385:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 386:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 387:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 24


 388:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 389:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 390:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 392:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 393:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 395:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 397:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 400:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 401:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 402:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 403:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
 404:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 405:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 406:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 407:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 408:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 409:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 410:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 412:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 413:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 415:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 417:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 418:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 424:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
 426:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result + _Num;
 428:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 429:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 430:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 431:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT>
 434:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct char_traits;
 435:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 436:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class istreambuf_iterator;
 438:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 439:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class ostreambuf_iterator;
 441:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 442:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 25


 445:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 448:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 454:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				    _CharT*>::__type
 457:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 460:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 463:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 465:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 468:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 471:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 474:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 475:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 477:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct _Deque_iterator;
 479:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 480:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 482:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 483:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 485:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _OI);
 488:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 489:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 490:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 496:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 26


 502:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 505:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 508:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 511:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 513:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 514:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 516:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 517:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 518:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 519:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 520:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 522:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  _OI);
 525:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 526:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 527:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II, _II,
 530:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 532:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 533:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 540:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 541:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 544:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 545:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 546:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 547:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 548:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 554:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 556:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 557:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 558:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 27


 559:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 560:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 562:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 563:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 568:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 571:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 572:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 573:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 574:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 577:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 578:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 579:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 580:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 581:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 587:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 589:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 590:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 591:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 593:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 595:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 596:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 601:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 604:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 605:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 607:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 609:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 610:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward
 612:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 613:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 28


 616:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 618:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
 619:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 620:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 621:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 622:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 623:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 624:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 625:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 626:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 628:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 631:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 633:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
 634:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 636:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 637:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 638:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 639:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 640:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 641:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 643:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 646:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 648:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 650:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 652:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 653:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 654:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 655:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 656:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 657:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 658:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 660:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 663:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 665:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 667:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 670:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 671:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 672:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 29


 673:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 674:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 675:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 677:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 678:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 680:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 682:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 683:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 689:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
 691:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result - _Num;
 693:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 694:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 695:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 696:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 699:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 701:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 704:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 707:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __last,
 711:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __result);
 712:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 713:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 714:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 717:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 720:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 721:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 723:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _OI);
 726:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 727:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 728:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 30


 730:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(
 731:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 735:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 742:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 745:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 747:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 748:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   std::__niter_base(__result)));
 751:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 752:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 753:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 754:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 756:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 757:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_OI);
 760:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 761:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 762:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 767:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 768:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 772:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 776:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 777:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
 783:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 784:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 31


 787:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 790:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 791:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 794:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 797:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 799:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 800:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 807:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 810:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 811:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 812:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 813:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
 819:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 820:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 826:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 827:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 830:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 833:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 835:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 836:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 843:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 32


 844:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       std::__miter_base(__last),
 845:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       __result);
 846:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 847:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 848:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 850:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 852:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 853:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 856:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 859:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 860:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 861:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
 862:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 863:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 864:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 867:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 870:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 871:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 874:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 875:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 876:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 878:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 880:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 883:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __c;
 884:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 886:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 887:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__first = __tmp;
 889:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return;
 890:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 891:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 892:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 895:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 896:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 899:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 33


 901:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 902:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 904:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 906:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _VTp&);
 909:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 910:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 916:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 918:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const _Tp&);
 921:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 922:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 923:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 929:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 930:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 934:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 937:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 939:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 940:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator>)
 942:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 944:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 946:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 947:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
 954:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 34


 958:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 961:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 967:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 973:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 979:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 985:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 986:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(float __n) { return __n; }
 988:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(double __n) { return __n; }
 990:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long double __n) { return __n; }
 992:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__float128 __n) { return __n; }
 995:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 996:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 997:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
1000:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1003:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
1005:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1006:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1007:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1008:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
1011:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1014:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 35


1015:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
1017:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1018:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1019:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1020:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp>
1022:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag);
1026:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1027:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1030:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::output_iterator_tag)
1032:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1033:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1034:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1036:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1038:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1039:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1042:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag)
1044:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1045:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1046:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1048:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1050:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1051:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1057:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1058:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1060:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__n <= 0)
1061:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __first;
1062:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1063:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1065:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first + __n;
1067:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1068:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1069:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
1070:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 36


1072:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An output iterator.
1073:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The iterator at first+n.
1076:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1077:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1081:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
1083:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
1089:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 464              		.loc 7 1089 5 view .LVU121
 465              		.loc 7 1089 5 is_stmt 0 view .LVU122
 466              	.LBE155:
 467              	.LBE154:
 468              	.LBE153:
 469              	.LBE152:
 951:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 470              		.loc 7 951 37 is_stmt 1 view .LVU123
 471              	.LBB165:
 472              	.LBB163:
 473              	.LBB162:
 474              	.LBB161:
 475              	.LBB156:
 476              	.LBI156:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 477              		.loc 7 1054 5 view .LVU124
 478              	.LBB157:
 479              	.LBI157:
1054:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 480              		.loc 7 1054 5 view .LVU125
 481              	.LBB158:
 482              	.LBI158:
 913:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 483              		.loc 7 913 5 view .LVU126
 484              	.LBB159:
 485              	.LBI159:
 868:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 486              		.loc 7 868 5 view .LVU127
 487              	.LBB160:
 872:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 488              		.loc 7 872 22 view .LVU128
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 489              		.loc 7 873 11 is_stmt 0 view .LVU129
 490 0004 4FF41642 		mov	r2, #38400
 491 0008 0021     		movs	r1, #0
 492 000a FFF7FEFF 		bl	memset
 493              	.LVL33:
 873:c:\users\daniel schwartz\documents\daisytoolchain-0.3.1\windows\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 494              		.loc 7 873 11 view .LVU130
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 37


 495              	.LBE160:
 496              	.LBE159:
 497              	.LBE158:
 498              	.LBE157:
 499              	.LBE156:
 500              	.LBE161:
 501              	.LBE162:
  40:dingus_dsp/delayline.h ****         }
 502              		.loc 5 40 18 view .LVU131
 503 000e 04F51040 		add	r0, r4, #36864
 504 0012 0021     		movs	r1, #0
 505              	.LBE163:
 506              	.LBE165:
 507              	.LBB166:
 508              	.LBB167:
  44:dingus_dsp/oscillator.h ****         }
 509              		.loc 2 44 20 view .LVU132
 510 0014 0022     		movs	r2, #0
 511 0016 00F20463 		addw	r3, r0, #1540
 512              	.LBE167:
 513              	.LBE166:
 514              	.LBB169:
 515              	.LBB164:
  40:dingus_dsp/delayline.h ****         }
 516              		.loc 5 40 18 view .LVU133
 517 001a C0F80016 		str	r1, [r0, #1536]
 518              	.LVL34:
  40:dingus_dsp/delayline.h ****         }
 519              		.loc 5 40 18 view .LVU134
 520              	.LBE164:
 521              	.LBE169:
  41:dingus_dsp/modulated_delay.cpp ****     osc_.Reset();
 522              		.loc 1 41 5 is_stmt 1 view .LVU135
 523              	.LBB170:
 524              	.LBI166:
  43:dingus_dsp/oscillator.h ****             phase_ = 0; 
 525              		.loc 2 43 14 view .LVU136
 526              	.LBB168:
  44:dingus_dsp/oscillator.h ****         }
 527              		.loc 2 44 13 view .LVU137
  44:dingus_dsp/oscillator.h ****         }
 528              		.loc 2 44 20 is_stmt 0 view .LVU138
 529 001e DA60     		str	r2, [r3, #12]	@ float
 530              	.LVL35:
  44:dingus_dsp/oscillator.h ****         }
 531              		.loc 2 44 20 view .LVU139
 532              	.LBE168:
 533              	.LBE170:
  42:dingus_dsp/modulated_delay.cpp **** }...
 534              		.loc 1 42 1 view .LVU140
 535 0020 10BD     		pop	{r4, pc}
 536              		.loc 1 42 1 view .LVU141
 537              		.cfi_endproc
 538              	.LFE2863:
 540 0022 00BF     		.text
 541              	.Letext0:
 542              		.file 8 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\incl
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 38


 543              		.file 9 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\incl
 544              		.file 10 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 545              		.file 11 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\lib\\gcc\\arm-none
 546              		.file 12 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 547              		.file 13 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 548              		.file 14 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 549              		.file 15 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 550              		.file 16 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 551              		.file 17 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 552              		.file 18 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 553              		.file 19 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 554              		.file 20 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 555              		.file 21 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 556              		.file 22 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 557              		.file 23 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 558              		.file 24 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 559              		.file 25 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 560              		.file 26 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 561              		.file 27 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 562              		.file 28 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 563              		.file 29 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 564              		.file 30 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 565              		.file 31 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 566              		.file 32 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 567              		.file 33 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 568              		.file 34 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\lib\\gcc\\arm-none
 569              		.file 35 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 570              		.file 36 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 571              		.file 37 "c:\\users\\daniel schwartz\\documents\\daisytoolchain-0.3.1\\windows\\arm-none-eabi\\inc
 572              		.file 38 "<built-in>"
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 modulated_delay.cpp
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:17     .text._ZN10dingus_dsp14ModulatedDelay4InitEf:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:26     .text._ZN10dingus_dsp14ModulatedDelay4InitEf:00000000 _ZN10dingus_dsp14ModulatedDelay4InitEf
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:197    .text._ZN10dingus_dsp14ModulatedDelay4InitEf:00000074 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:204    .text._ZN10dingus_dsp14ModulatedDelay7ProcessEf:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:212    .text._ZN10dingus_dsp14ModulatedDelay7ProcessEf:00000000 _ZN10dingus_dsp14ModulatedDelay7ProcessEf
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:425    .text._ZN10dingus_dsp14ModulatedDelay7ProcessEf:000000b8 $d
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:430    .text._ZN10dingus_dsp14ModulatedDelay5ResetEv:00000000 $t
C:\Users\DANIEL~1\AppData\Local\Temp\ccZIHl27.s:438    .text._ZN10dingus_dsp14ModulatedDelay5ResetEv:00000000 _ZN10dingus_dsp14ModulatedDelay5ResetEv

UNDEFINED SYMBOLS
_ZN10dingus_dsp10Oscillator4InitEf
_ZN10dingus_dsp10Oscillator11UpdateDeltaEv
_ZN10dingus_dsp10Oscillator7ProcessEv
memset
